<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>
    SDN on ForwardingPlane.net
    
    </title>
    <link>https://forwardingplane.net/tags/sdn/</link>
    <description>Recent content 
    
    in SDN on ForwardingPlane.net
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <copyright>Copyright (c) 2019, all rights reserved.</copyright>
    <lastBuildDate>Wed, 29 May 2019 18:17:13 +0000</lastBuildDate>
    
    
        <atom:link href="https://forwardingplane.net/tags/sdn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a dynamic security infrastructure [in a box - with SDN]</title>
      <link>https://forwardingplane.net/post/building-a-dynamic-security-infrastructure-in-a-box-with-sdn/</link>
      <pubDate>Wed, 29 May 2019 18:17:13 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-a-dynamic-security-infrastructure-in-a-box-with-sdn/</guid>
      <description>&lt;p&gt;Years ago I wrote about building a &lt;a href=&#34;https://www.forwardingplane.net/2013/07/building-a-secured-network-in-a-box/&#34;&gt;secure network in a box&lt;/a&gt;. Over a weekend I decided to revisit this concept thanks to a colleague at work wanting to do something similar. It got me thinking “a lot has changed since I last did this” and it felt like time to revisit it. Well, disappointment wasn’t in the cards because it’s easier, smarter, and more flexible now that it was back then. As I noted back in 2013 when I wrote that last post, OVS was a lot less well traveled and, frankly, there was not a reasonable controller that I could use in production for OpenFlow integration. I’ve since standardized on &lt;a href=&#34;https://www.proxmox.com/en/&#34;&gt;ProxMox&lt;/a&gt; for my lab and production virtualization and have espoused on every available occasion the usefulness of the &lt;a href=&#34;https://www.faucet.nz&#34;&gt;Faucet SDN controller&lt;/a&gt;. Both play fundamental roles in this project. This is significantly easier than I expected - primarily due to the use of faucet for controlling the OVS switch. It’s fairly straightforward, so I won’t go into the step by step details here since the projects have good install and support docs. Proxmox has support for OVS, so just install it using apt and create an OVS switch in the GUI interface. Faucet has &lt;a href=&#34;https://docs.faucet.nz/en/latest/&#34;&gt;amazingly complete documentation&lt;/a&gt; and even a &lt;a href=&#34;https://docs.faucet.nz/en/latest/installation.html#installing-on-raspberry-pi&#34;&gt;raspberry pi image&lt;/a&gt; (if you’re still thinking “OpenFlow is dead, isn’t it?”, have a listen to &lt;a href=&#34;https://blog.ipspace.net/2019/04/using-faucet-to-build-sc18-network-with.html&#34;&gt;this podcast&lt;/a&gt; I did with Ivan Pepelnjak). From there, install a &lt;a href=&#34;https://securityonion.net/&#34;&gt;security option VM&lt;/a&gt; (or any other tool you want to capture data with). Once you have the OVS switch, the controller, and the VM up and running getting data to it is as simple as issuing the comments to configure a controller. I my case the command was:```
sudo ovs-vsctl set-controller vmbr4 tcp:10.16.9.12:6653 tcp:10.16.9.12:6654&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-In my lab design the architecture was as such ![Faucet OVS Proxmox Security](https://www.forwardingplane.net/wp-content/uploads/2019/05/Faucet-OVS-Proxmox-Security.jpg &#34;Faucet OVS Proxmox Security.jpg&#34;) The two switches on the right are physical and span all uplink data via two physical ports into my proxmox host. Everything else is done virtually in OVS. Once you have the controller setup, the data coming in, and the host listening, you can validate you have the correct controller, interfaces and ports in ovs.```&#34; data-lang=&#34;In my lab design the architecture was as such ![Faucet OVS Proxmox Security](https://www.forwardingplane.net/wp-content/uploads/2019/05/Faucet-OVS-Proxmox-Security.jpg &#34;Faucet OVS Proxmox Security.jpg&#34;) The two switches on the right are physical and span all uplink data via two physical ports into my proxmox host. Everything else is done virtually in OVS. Once you have the controller setup, the data coming in, and the host listening, you can validate you have the correct controller, interfaces and ports in ovs.```&#34;&gt;root@pve1:~# ovs-vsctl show
75b4bc7f-4e00-45c2-8919-b043cbaf509d
Bridge &amp;#34;vmbr4&amp;#34;
Controller &amp;#34;tcp:10.16.9.12:6654&amp;#34;
Controller &amp;#34;tcp:10.16.9.12:6653&amp;#34;
is\_connected: true
Port &amp;#34;enx00051ba65ece&amp;#34;
Interface &amp;#34;enx00051ba65ece&amp;#34;
Port &amp;#34;tap115i1&amp;#34;
Interface &amp;#34;tap115i1&amp;#34;
Port &amp;#34;vmbr4&amp;#34;
Interface &amp;#34;vmbr4&amp;#34;
type: internal
Port &amp;#34;eno2&amp;#34;
Interface &amp;#34;eno2&amp;#34;
ovs\_version: “2.7.0&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Listing interfaces in OVS can be a helpful way to aid in building the faucet configuration```
root@pve1:~# ovs-vsctl &amp;ndash;columns=ofport,name list interface
ofport : 65534
name : &amp;ldquo;vmbr4&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 1
name : &amp;ldquo;eno2&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 4
name : &amp;ldquo;tap115i1&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 2
name : &amp;ldquo;enx00051ba65ece&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-For spanning the data into the VM, the basic configuration within faucet looks like this and should reside in /etc/faucet/faucet.yaml. The real meat here is the mirror statement on port 4.```&#34; data-lang=&#34;For spanning the data into the VM, the basic configuration within faucet looks like this and should reside in /etc/faucet/faucet.yaml. The real meat here is the mirror statement on port 4.```&#34;&gt;dps:
    proxovs1:
        dp\_id: 0x51ba65ece
        hardware: &amp;#34;Open vSwitch&amp;#34;
        interfaces:
            65534:
                name: &amp;#34;vmbr4&amp;#34;
                description: &amp;#34;ProxMox OVS vmbr4&amp;#34;
                native\_vlan: servernet
            1:
                name: &amp;#34;eno2&amp;#34;
                description: &amp;#34;Span from sw1&amp;#34;
                native\_vlan: servernet
            2:
                name: &amp;#34;enx00051ba65ece&amp;#34;
                description: &amp;#34;Span from sw2&amp;#34;
                native\_vlan: servernet
            4:
                name: &amp;#34;tap115i1&amp;#34;
                description: &amp;#34;ProxMox OVS vmbr4&amp;#34;
                output\_only: True
                mirror: \[1,2\]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be fairly easily adjusted to mirror all internal, east-west traffic in a virtualization farm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faucet: Enterprise OpenFlow in production</title>
      <link>https://forwardingplane.net/post/faucet-enterprise-openflow-in-production/</link>
      <pubDate>Mon, 05 Nov 2018 10:56:21 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/faucet-enterprise-openflow-in-production/</guid>
      <description>

&lt;p&gt;Remember OpenFlow? It was the media and marketing darling for the better part of 5 years as “the machine” conflated OpenFlow with SDN and SDN with - almost literally - everything. &amp;ldquo;Still Does Nothing&amp;rdquo; was a common phrase uttered around those of us that had run large scale, complex networks for a long time. Quietly, &lt;a href=&#34;https://faucet-sdn.blogspot.com/&#34;&gt;and mostly&lt;/a&gt;, out of the fickle media and blogosphere eye, a scrappy little SDN project called &lt;a href=&#34;https://github.com/faucetsdn/faucet&#34;&gt;faucet&lt;/a&gt; has been &lt;a href=&#34;https://github.com/faucetsdn/faucet&#34;&gt;diligently plugging away&lt;/a&gt; &amp;ndash; making easy to use, production quality, well documented, and very stable code that runs OpenFlow networks quite happily in production and at scale. Oh, did I mention that it&amp;rsquo;s also got a very small footprint? Did I also mention that we&amp;rsquo;ve built a multi-terabit network that scales, transiting IPv4, IPv6, L2/L3 switching as well as routing? Or that faucet can control switches from multiple vendors, including P4 vendors who provide a P4-to-OF bridge, and interoperates with non-SDN networks? Or (and possibly most importantly) that faucet provides automated integration tests, allowing many bugs to be caught early (sometimes even by the switch vendor) before shipping new releases? Well, I should probably mention those things. I&amp;rsquo;ve been lucky enough to have been involved in SDN off and on since around 2009, and I can emphatically say that of the production SDN and OpenFlow networks that I have been intimately involved in, this combination of hardware, software and people has been, hands down, the most rewarding and most supportable. In fact, this has been so supportable and great to work with, we migrated our production branch office over to a set of faucet controlled SDN switches, and will soon migrate first hop routing over to our robust faucet system. &amp;ldquo;However did you do this?!?!&amp;rdquo; you might be inclined to say. Well, I&amp;rsquo;m glad you asked, because I am going to tell you.    First, though, there should be some design goals. As many of the naysayers of SDN will happy point out, &amp;ldquo;what problem are you trying to solve?&amp;rdquo; to that end, here is what our design goals were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run all layer 2 in via faucet&lt;/li&gt;
&lt;li&gt;Remove need to log into any network elements after deployment (other than firmware updates)&lt;/li&gt;
&lt;li&gt;Centralize management&lt;/li&gt;
&lt;li&gt;Stretch goal to NFV BGP, do first hop L3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Easy enough, right? It really is. For our deployment we leveraged Aruba 2930F switches giving us a wealth of 1G copper ports and a handful of 10G SFP+ ports. Luckily, we already had this gear because as so many that have tried to deploy openflow in the past have seen, all hardware is not created equally. Luckily, the &lt;a href=&#34;https://www.faucet.org.nz/&#34;&gt;faucet foundation&lt;/a&gt; has published a list of requirements for support, and there are a reasonable number of vendors that actually conform. The real key that I learned in this process is that without proper vendor support (which had been several lacking in the past), and without multi-table, OpenFlow is not positioned for success. It comes down to using the right tools for the job, and OpenFlow (as well as SDN) is no different. Originally this post was to detail the process of building this network, much like posts in the past where there has been a “do this, then do that” how-to, it’s more or less unnecessary here. Why? The faucet project is serious, well documented and generally here to work. The expectation is that this is not an enclave, or a science experiment, or a lab. It’s a production network with real people and real traffic. Read that again. The expectation is that this is stable, supportable, and can do in ready to use day-to-day. And it doesn’t disappoint. Installing is a snap, the &lt;a href=&#34;https://docs.faucet.nz/en/latest/tutorials/first_time.html&#34;&gt;documentation&lt;/a&gt; for faucet is fantastic and complete. If there is something missing or a question, the developers are incredibly responsive and very quick to answer and address any issues that may arise. It’s extremely low footprint - it runs very well on a raspberry pi and does not tax a raspberry pi series 2, even with the gauge telemetry interface (there is a &lt;a href=&#34;https://docs.faucet.nz/en/latest/installation.html#installing-on-raspberry-pi&#34;&gt;pre-built pi OS&lt;/a&gt; for anyone that would prefer a more turnkey option). You may be thinking “_But Nick, I need my CLI!!!_” You’re covered - and here is why: the developers use this system. They run real networks with it. Every day. They know what is necessary to manage and maintain a real production network and sometimes that means troubleshooting. Like many engineers that learned on traditional network equipment, most of us prefer a CLI to troubleshoot, so the inclusion of this feature from the controller is not really a surprise. The fctl command provides a reasonable visibility into the operations of the controller and can be augmented and scripted.```
buraglio@faucet:~ $ /usr/bin/fctl &amp;ndash;help&lt;/p&gt;

&lt;p&gt;usage:&lt;/p&gt;

&lt;p&gt;MACs learned on a DP.&lt;/p&gt;

&lt;p&gt;/usr/bin/fctl -n &amp;ndash;endpoints=&lt;a href=&#34;http://172.17.0.1:9302&#34;&gt;http://172.17.0.1:9302&lt;/a&gt; &amp;ndash;metrics=learned_macs &amp;ndash;labels=dp_id:0xb827eb608918&lt;/p&gt;

&lt;p&gt;Status of all DPs&lt;/p&gt;

&lt;p&gt;/usr/bin/fctl -n &amp;ndash;endpoints=&lt;a href=&#34;http://172.17.0.1:9302&#34;&gt;http://172.17.0.1:9302&lt;/a&gt; &amp;ndash;metrics=dp_status&lt;/p&gt;

&lt;p&gt;Retrieve FAUCET/Gauge state using Prometheus variables.&lt;/p&gt;

&lt;p&gt;optional arguments:&lt;/p&gt;

&lt;p&gt;-h, &amp;ndash;help            show this help message and exit&lt;/p&gt;

&lt;p&gt;-n, &amp;ndash;nonzero         nonzero results only&lt;/p&gt;

&lt;p&gt;-e ENDPOINTS, &amp;ndash;endpoints ENDPOINTS&lt;/p&gt;

&lt;p&gt;list of endpoint URLs to query&lt;/p&gt;

&lt;p&gt;-m METRICS, &amp;ndash;metrics METRICS&lt;/p&gt;

&lt;p&gt;list of metrics to query&lt;/p&gt;

&lt;p&gt;-l LABELS, &amp;ndash;labels LABELS&lt;/p&gt;

&lt;p&gt;list of labels that must be present&lt;/p&gt;

&lt;p&gt;&amp;ndash;display-labels DISPLAY_LABELS&lt;/p&gt;

&lt;p&gt;list of labels to filter display by (default all)
```Monitoring is also taken into account in the form of the gauge interface, which provides a nearly-real-time telemetry stream of important and useful information. Leveraging both the wealth of topological information that the controller has at its disposal and a familiar &lt;a href=&#34;https://github.com/prometheus&#34;&gt;prometheus&lt;/a&gt; / &lt;a href=&#34;https://grafana.com/&#34;&gt;grafana&lt;/a&gt; back / front end interface, the oft-touted notion of streaming telemetry is fully - and quite capably - realized. From the perspective of a networking monitoring and statistics geek, this is the cat’s meow. Very, very data rich. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2018/11/grafana-screencap.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2018/11/grafana-screencap-1024x275.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt; A simple diagram of our office network pretty well explains the decoupled control plane architecture. Keep it simple, architect for success. Fundamentally SDN networks should be designed like other networks, redundant systems, good monitoring, out of band access. A good design principle is that if you wouldn’t do it on a traditional network, you probably shouldn’t do it for an SDN based network.   &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2018/11/faunet-office.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2018/11/faunet-office.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;   Don’t trust me? Fair enough, check out the &lt;a href=&#34;https://www.waikato.ac.nz/research/units/wand.shtml&#34;&gt;University of Waikato&lt;/a&gt; interface &lt;a href=&#34;https://grafana.redcables.wand.nz/d/000000003/redcables-bgp?orgId=1&#34;&gt;here&lt;/a&gt;. For more interface on the deployment at &lt;a href=&#34;https://wand.net.nz/&#34;&gt;WAND&lt;/a&gt;, check &lt;a href=&#34;https://redcables.wand.nz/&#34;&gt;this link&lt;/a&gt;. You won’t be disappointed.    &lt;/p&gt;

&lt;h2 id=&#34;my-take&#34;&gt;My take&lt;/h2&gt;

&lt;h3 id=&#34;building-and-running-it&#34;&gt;Building and running it&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.faucet.nz/en/latest/&#34;&gt;documentation for faucet&lt;/a&gt; is indescribably better than any other SDN project I have worked with over the span of nearly 10 years. &lt;strong&gt;It’s also supportable.&lt;/strong&gt; My office has been running the enterprise network off of faucet for a while now, without issue, and it meets our design goals [stretch goal of BGP NFV is still in process - testing is successful]). It is easy to manage and very information rich. I can see security minded folks being very interested in the ACLs and other such options available.&lt;/p&gt;

&lt;h3 id=&#34;telemetry-and-analytics&#34;&gt;Telemetry and analytics    &lt;/h3&gt;

&lt;p&gt;   Where so many others in this space are talking about their Telemetry solution, this one is already here, complete, and usable. Frankly, I am fully comfortable running a production network on this technology, operationally it is truly easier. From a security perspective, the options added scale well and deliver on their promise. Where OpenFlow was once touted as the networking silver bullet (without a lot of real stick time to prove or disprove it), it has now fallen comfortable into a nice, supportable model.&lt;/p&gt;

&lt;h3 id=&#34;up-next&#34;&gt;Up next….    &lt;/h3&gt;

&lt;p&gt;If you think this is cool, wait until &lt;a href=&#34;https://sc18.supercomputing.org/&#34;&gt;SuperComputing 18&lt;/a&gt;, where we’re deploying a &lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6461072411969363968/&#34;&gt;first-of-it’s kind network&lt;/a&gt;, all controlled by FAUCET.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faucet: Enterprise OpenFlow in production</title>
      <link>https://forwardingplane.net/post/faucet-enterprise-openflow-in-production/</link>
      <pubDate>Mon, 05 Nov 2018 10:56:21 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/faucet-enterprise-openflow-in-production/</guid>
      <description>

&lt;p&gt;Remember OpenFlow? It was the media and marketing darling for the better part of 5 years as “the machine” conflated OpenFlow with SDN and SDN with - almost literally - everything. &amp;ldquo;Still Does Nothing&amp;rdquo; was a common phrase uttered around those of us that had run large scale, complex networks for a long time. Quietly, &lt;a href=&#34;https://faucet-sdn.blogspot.com/&#34;&gt;and mostly&lt;/a&gt;, out of the fickle media and blogosphere eye, a scrappy little SDN project called &lt;a href=&#34;https://github.com/faucetsdn/faucet&#34;&gt;faucet&lt;/a&gt; has been &lt;a href=&#34;https://github.com/faucetsdn/faucet&#34;&gt;diligently plugging away&lt;/a&gt; &amp;ndash; making easy to use, production quality, well documented, and very stable code that runs OpenFlow networks quite happily in production and at scale. Oh, did I mention that it&amp;rsquo;s also got a very small footprint? Did I also mention that we&amp;rsquo;ve built a multi-terabit network that scales, transiting IPv4, IPv6, L2/L3 switching as well as routing? Or that faucet can control switches from multiple vendors, including P4 vendors who provide a P4-to-OF bridge, and interoperates with non-SDN networks? Or (and possibly most importantly) that faucet provides automated integration tests, allowing many bugs to be caught early (sometimes even by the switch vendor) before shipping new releases? Well, I should probably mention those things. I&amp;rsquo;ve been lucky enough to have been involved in SDN off and on since around 2009, and I can emphatically say that of the production SDN and OpenFlow networks that I have been intimately involved in, this combination of hardware, software and people has been, hands down, the most rewarding and most supportable. In fact, this has been so supportable and great to work with, we migrated our production branch office over to a set of faucet controlled SDN switches, and will soon migrate first hop routing over to our robust faucet system. &amp;ldquo;However did you do this?!?!&amp;rdquo; you might be inclined to say. Well, I&amp;rsquo;m glad you asked, because I am going to tell you.    First, though, there should be some design goals. As many of the naysayers of SDN will happy point out, &amp;ldquo;what problem are you trying to solve?&amp;rdquo; to that end, here is what our design goals were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run all layer 2 in via faucet&lt;/li&gt;
&lt;li&gt;Remove need to log into any network elements after deployment (other than firmware updates)&lt;/li&gt;
&lt;li&gt;Centralize management&lt;/li&gt;
&lt;li&gt;Stretch goal to NFV BGP, do first hop L3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Easy enough, right? It really is. For our deployment we leveraged Aruba 2930F switches giving us a wealth of 1G copper ports and a handful of 10G SFP+ ports. Luckily, we already had this gear because as so many that have tried to deploy openflow in the past have seen, all hardware is not created equally. Luckily, the &lt;a href=&#34;https://www.faucet.org.nz/&#34;&gt;faucet foundation&lt;/a&gt; has published a list of requirements for support, and there are a reasonable number of vendors that actually conform. The real key that I learned in this process is that without proper vendor support (which had been several lacking in the past), and without multi-table, OpenFlow is not positioned for success. It comes down to using the right tools for the job, and OpenFlow (as well as SDN) is no different. Originally this post was to detail the process of building this network, much like posts in the past where there has been a “do this, then do that” how-to, it’s more or less unnecessary here. Why? The faucet project is serious, well documented and generally here to work. The expectation is that this is not an enclave, or a science experiment, or a lab. It’s a production network with real people and real traffic. Read that again. The expectation is that this is stable, supportable, and can do in ready to use day-to-day. And it doesn’t disappoint. Installing is a snap, the &lt;a href=&#34;https://docs.faucet.nz/en/latest/tutorials/first_time.html&#34;&gt;documentation&lt;/a&gt; for faucet is fantastic and complete. If there is something missing or a question, the developers are incredibly responsive and very quick to answer and address any issues that may arise. It’s extremely low footprint - it runs very well on a raspberry pi and does not tax a raspberry pi series 2, even with the gauge telemetry interface (there is a &lt;a href=&#34;https://docs.faucet.nz/en/latest/installation.html#installing-on-raspberry-pi&#34;&gt;pre-built pi OS&lt;/a&gt; for anyone that would prefer a more turnkey option). You may be thinking “_But Nick, I need my CLI!!!_” You’re covered - and here is why: the developers use this system. They run real networks with it. Every day. They know what is necessary to manage and maintain a real production network and sometimes that means troubleshooting. Like many engineers that learned on traditional network equipment, most of us prefer a CLI to troubleshoot, so the inclusion of this feature from the controller is not really a surprise. The fctl command provides a reasonable visibility into the operations of the controller and can be augmented and scripted.```
buraglio@faucet:~ $ /usr/bin/fctl &amp;ndash;help&lt;/p&gt;

&lt;p&gt;usage:&lt;/p&gt;

&lt;p&gt;MACs learned on a DP.&lt;/p&gt;

&lt;p&gt;/usr/bin/fctl -n &amp;ndash;endpoints=&lt;a href=&#34;http://172.17.0.1:9302&#34;&gt;http://172.17.0.1:9302&lt;/a&gt; &amp;ndash;metrics=learned_macs &amp;ndash;labels=dp_id:0xb827eb608918&lt;/p&gt;

&lt;p&gt;Status of all DPs&lt;/p&gt;

&lt;p&gt;/usr/bin/fctl -n &amp;ndash;endpoints=&lt;a href=&#34;http://172.17.0.1:9302&#34;&gt;http://172.17.0.1:9302&lt;/a&gt; &amp;ndash;metrics=dp_status&lt;/p&gt;

&lt;p&gt;Retrieve FAUCET/Gauge state using Prometheus variables.&lt;/p&gt;

&lt;p&gt;optional arguments:&lt;/p&gt;

&lt;p&gt;-h, &amp;ndash;help            show this help message and exit&lt;/p&gt;

&lt;p&gt;-n, &amp;ndash;nonzero         nonzero results only&lt;/p&gt;

&lt;p&gt;-e ENDPOINTS, &amp;ndash;endpoints ENDPOINTS&lt;/p&gt;

&lt;p&gt;list of endpoint URLs to query&lt;/p&gt;

&lt;p&gt;-m METRICS, &amp;ndash;metrics METRICS&lt;/p&gt;

&lt;p&gt;list of metrics to query&lt;/p&gt;

&lt;p&gt;-l LABELS, &amp;ndash;labels LABELS&lt;/p&gt;

&lt;p&gt;list of labels that must be present&lt;/p&gt;

&lt;p&gt;&amp;ndash;display-labels DISPLAY_LABELS&lt;/p&gt;

&lt;p&gt;list of labels to filter display by (default all)
```Monitoring is also taken into account in the form of the gauge interface, which provides a nearly-real-time telemetry stream of important and useful information. Leveraging both the wealth of topological information that the controller has at its disposal and a familiar &lt;a href=&#34;https://github.com/prometheus&#34;&gt;prometheus&lt;/a&gt; / &lt;a href=&#34;https://grafana.com/&#34;&gt;grafana&lt;/a&gt; back / front end interface, the oft-touted notion of streaming telemetry is fully - and quite capably - realized. From the perspective of a networking monitoring and statistics geek, this is the cat’s meow. Very, very data rich. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2018/11/grafana-screencap.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2018/11/grafana-screencap-1024x275.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt; A simple diagram of our office network pretty well explains the decoupled control plane architecture. Keep it simple, architect for success. Fundamentally SDN networks should be designed like other networks, redundant systems, good monitoring, out of band access. A good design principle is that if you wouldn’t do it on a traditional network, you probably shouldn’t do it for an SDN based network.   &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2018/11/faunet-office.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2018/11/faunet-office.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;   Don’t trust me? Fair enough, check out the &lt;a href=&#34;https://www.waikato.ac.nz/research/units/wand.shtml&#34;&gt;University of Waikato&lt;/a&gt; interface &lt;a href=&#34;https://grafana.redcables.wand.nz/d/000000003/redcables-bgp?orgId=1&#34;&gt;here&lt;/a&gt;. For more interface on the deployment at &lt;a href=&#34;https://wand.net.nz/&#34;&gt;WAND&lt;/a&gt;, check &lt;a href=&#34;https://redcables.wand.nz/&#34;&gt;this link&lt;/a&gt;. You won’t be disappointed.    &lt;/p&gt;

&lt;h2 id=&#34;my-take&#34;&gt;My take&lt;/h2&gt;

&lt;h3 id=&#34;building-and-running-it&#34;&gt;Building and running it&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.faucet.nz/en/latest/&#34;&gt;documentation for faucet&lt;/a&gt; is indescribably better than any other SDN project I have worked with over the span of nearly 10 years. &lt;strong&gt;It’s also supportable.&lt;/strong&gt; My office has been running the enterprise network off of faucet for a while now, without issue, and it meets our design goals [stretch goal of BGP NFV is still in process - testing is successful]). It is easy to manage and very information rich. I can see security minded folks being very interested in the ACLs and other such options available.&lt;/p&gt;

&lt;h3 id=&#34;telemetry-and-analytics&#34;&gt;Telemetry and analytics    &lt;/h3&gt;

&lt;p&gt;   Where so many others in this space are talking about their Telemetry solution, this one is already here, complete, and usable. Frankly, I am fully comfortable running a production network on this technology, operationally it is truly easier. From a security perspective, the options added scale well and deliver on their promise. Where OpenFlow was once touted as the networking silver bullet (without a lot of real stick time to prove or disprove it), it has now fallen comfortable into a nice, supportable model.&lt;/p&gt;

&lt;h3 id=&#34;up-next&#34;&gt;Up next….    &lt;/h3&gt;

&lt;p&gt;If you think this is cool, wait until &lt;a href=&#34;https://sc18.supercomputing.org/&#34;&gt;SuperComputing 18&lt;/a&gt;, where we’re deploying a &lt;a href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:6461072411969363968/&#34;&gt;first-of-it’s kind network&lt;/a&gt;, all controlled by FAUCET.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The rush to automation and the IT pendulum</title>
      <link>https://forwardingplane.net/post/the-rush-to-automation-and-the-it-pendulum/</link>
      <pubDate>Thu, 18 Oct 2018 14:20:52 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/the-rush-to-automation-and-the-it-pendulum/</guid>
      <description>

&lt;p&gt;Recently, the venerable &lt;a href=&#34;https://blog.ipspace.net&#34;&gt;Ivan Pepelnjak&lt;/a&gt; published a very insightful article about &lt;a href=&#34;https://blog.ipspace.net/2018/10/why-is-network-automation-such-hot-topic.html&#34;&gt;automation becoming such a popular topic&lt;/a&gt; that was spawned by an email from one of his readers. I found this article to be spot on, and wanted to add a bit of my own opinion into the automation pie, as I have been spending a lot of time on automation as it related to existing networks as well as into SDN based environments. There is a link, and I wanted to explore it a bit more whilst adding a healthy dose of my opinion. A very large part of the automation push is the IT pendulum swing. Like those of us that worked in the burgeoning ISP world, automating was born of necessity. Except - we didn&amp;rsquo;t call it automation. Most of us didn&amp;rsquo;t call it anything, it was sysadmin scripting at worst and full blown orchestration at best. And there were even commercial platforms (see broadband provisioning tools). However, like many of us that were in the early ISP days, at the very least we had some rudimentary programming and scripting skills because we either had to develop them to stay afloat or we came from an early applied computer science background. Those skills, like a lot of other things, also have the pendulum swing.&lt;/p&gt;

&lt;h2 id=&#34;https-media-giphy-com-media-tttkr0wqcuct2-giphy-gif&#34;&gt;&lt;img src=&#34;https://media.giphy.com/media/ttTKR0wqCUCt2/giphy.gif&#34; alt=&#34;&#34; /&gt;&lt;/h2&gt;

&lt;h2 id=&#34;the-pendulum&#34;&gt;The pendulum.&lt;/h2&gt;

&lt;p&gt;Think of the pendulum in terms of computing, as it&amp;rsquo;s the easiest to quantify. Computing went from centralized (i.e. the mainframe) to decentralized (i.e. the desktop PC). Now we&amp;rsquo;re moving back into the &amp;ldquo;centralized&amp;rdquo; model in the push to cloud (ok, that may be a tad different, but conceptually it&amp;rsquo;s the same - work with me). Moving computationally expensive operations out of a single, personal system into a larger resource while reducing the overhead of the end station. Think &lt;a href=&#34;https://www.amazon.com/Google-Pixelbook-RAM-128GB-GA00122-US/dp/B075JSK7TR/ref=sr_1_4_acs_osp_osp19-42c2a08e-2d_2?s=pc&amp;amp;ie=UTF8&amp;amp;qid=1539871559&amp;amp;sr=1-4-acs&amp;amp;keywords=chromebook&amp;amp;tag=crverifiedexp-20&amp;amp;ascsubtag=42c2a08e-2d48-4a89-8acb-841bc830f277&amp;amp;linkCode=oas&amp;amp;cv_ct_id=amzn1.osp.42c2a08e-2d48-4a89-8acb-841bc830f277&amp;amp;cv_ct_pg=search&amp;amp;cv_ct_wn=osp-search&amp;amp;pf_rd_s=desktop-sx-inline&amp;amp;pd_rd_w=qgIuG&amp;amp;pf_rd_i=chromebook&amp;amp;pd_rd_wg=OLHr0&amp;amp;pf_rd_p=53b688eb-671a-4acd-886f-dc89fa36d3d2&amp;amp;pf_rd_t=301&amp;amp;pd_rd_r=4d4ed571-35bf-4be9-860c-7deaa1ce8cc4&amp;amp;pf_rd_r=QNRHZW6VWAWZ13HMDGF7&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;creativeASIN=B075JSK7TR&amp;amp;pf_rd_p=53b688eb-671a-4acd-886f-dc89fa36d3d2&amp;amp;pd_rd_wg=OLHr0&amp;amp;pd_rd_i=B075JSK7TR&amp;amp;pf_rd_s=desktop-sx-inline&amp;amp;pf_rd_t=301&amp;amp;pf_rd_i=chromebook&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pd_rd_w=qgIuG&amp;amp;pf_rd_r=QNRHZW6VWAWZ13HMDGF7&amp;amp;pd_rd_r=4d4ed571-35bf-4be9-860c-7deaa1ce8cc4&#34;&gt;Chromebook&lt;/a&gt; or VDI thin client. Dramatic changes do not happen quickly in the networking world, and there are a number of simple reasons why&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mean time to replacement is somewhere between 5 and 10 years depending on the environment&lt;/li&gt;
&lt;li&gt;Standards for networking take &lt;strong&gt;For-ev-er&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, even if the time to replace lifecycle is short, the windows for new tech standards, vendor implementation, and knowledge dissemination to occur rarely, if ever, line up. What this means is that new tech is very slow to adopt in the network world. Even I make the mistake of being far too impatient with this process sometimes, as &lt;a href=&#34;https://twitter.com/bcjordo?lang=en&#34;&gt;Jordan Marti&lt;/a&gt;n called me out on in a &lt;a href=&#34;https://thenetworkcollective.com/2018/02/otc-nfd17/&#34;&gt;Network Collective podcast&lt;/a&gt; a few months ago (p.s., it&amp;rsquo;s a fun listen - check it out). Back to automation. As IT changed in non-service providers from a questionable money sink to a potentially critical revenue generating business and communications environment the generalist IT workers slowly morphed into the specialists. Developers, Network Engineers, Systems Engineers, phone system admins, etc. As this occurred, the disciplines fractured and the skillsets refined, and in many cases lost the generalist foundation in trade for a deeply focused skill set.&lt;/p&gt;

&lt;h2 id=&#34;the-sdn&#34;&gt;The SDN&lt;/h2&gt;

&lt;p&gt;After a decade or two of this shift, SDN blows onto the scene. SDN, as it emerges and becomes the new marketing darling of many a start up and huge company alike, promises to destroy boundaries and obsolete basically everything - equipment, skill sets, people, cars, dogs, cats, water, air&amp;hellip;&amp;hellip;.everything. The issue is that from a few research products that had ground breaking ideas came a monster. As over-hyped, over-marketed, and under developed juggernaut that had a different meaning to anyone you asked. Whole some folks plugged away quietly on &lt;a href=&#34;https://faucet.nz/&#34;&gt;projects that actually wor&lt;/a&gt;k, and &lt;a href=&#34;http://www.forwardingplane.net/2012/11/sdn-across-domains-in-the-wan-a-novice-look/&#34;&gt;experimented&lt;/a&gt; with &lt;a href=&#34;https://esnetupdates.wordpress.com/2015/11/03/esnets-nick-buraglio-leading-scinets-first-sdn-effort-at-sc15/&#34;&gt;deployments meant to function in production&lt;/a&gt;, the marketing machines created more and more hype and delivered only a few promises. This is the far out pendulum swing. Many operators recoiled. Enterprises said &amp;ldquo;why?&amp;rdquo;, and folks trying to push boundaries with new deployments were saying &amp;ldquo;&lt;em&gt;wait, let&amp;rsquo;s figure out &amp;ldquo;what&amp;rdquo; before we ask &amp;ldquo;why?&amp;rdquo;&lt;/em&gt;&amp;rdquo;. Then the pendulum started swinging back. Automation is back, and now there are &lt;a href=&#34;https://www.ansible.com/&#34;&gt;products&lt;/a&gt; and tools, and &lt;a href=&#34;https://www.ipspace.net/Hands-On_Network_Automation&#34;&gt;resources&lt;/a&gt;. We&amp;rsquo;re centering on a safer alternative that conservative enterprises can deploy safely and without event. We&amp;rsquo;re back to the fundamentals and the basics of what worked long ago - but now we have help.&lt;/p&gt;

&lt;h2 id=&#34;my-take&#34;&gt;My take&lt;/h2&gt;

&lt;p&gt;Make no mistake, I am still believer in the fundamentals that something resembling SDN brings to the table and have been working on &lt;a href=&#34;https://sc18.supercomputing.org/blog/&#34;&gt;significant SDN projects even recently&lt;/a&gt;, including moving our entire office over to FAUCET controlled switches (more on this soon), and a fair amount of work in the segment routing / PCE space. However, I am not a fan of the marketing machine, especially when there is a poverty of useful data to build said marketing from, and said marketing contains an &lt;a href=&#34;https://www.forwardingplane.net/2013/03/my-sdn-soapbox-now-with-ipv6/&#34;&gt;overabundance of sensational FUD&lt;/a&gt;. New technology needs to be supportable to be deployed, and it happens, very, very slowly. Much like IPv4 to IPv6, Frame Relay to ATM, and circuit switched to packet switched, as SDN technologies become more and more exposed and easier to use, they become &amp;ldquo;just another thing&amp;rdquo;, and that takes time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating an internal span port inside proxmox OVS</title>
      <link>https://forwardingplane.net/post/creating-internal-span-port-inside-proxmox-ovs/</link>
      <pubDate>Tue, 21 Mar 2017 03:49:58 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/creating-internal-span-port-inside-proxmox-ovs/</guid>
      <description>&lt;p&gt;In the last few years I have moved all of my virtualization to &lt;a href=&#34;https://www.proxmox.com/en/&#34;&gt;proxmox&lt;/a&gt; and docker. Seeing as I like to look at packets because I am a closet security guy, and being as I have been working off-and-on on a security project in recent times, I wanted to be able to span a port not only from a hardware switch, but also within my software switches. I had been using linux bridge, which I am not a fan of, so when I started down this path I did not look hard to find a way to do so under that platform. Instead I used it as an opportunity to move some of the internal bridges to &lt;a href=&#34;http://openvswitch.org/&#34;&gt;OpenVSwitch&lt;/a&gt;. I wanted to create an OVS span port internally. I had experience with OVS in the past for SDN work that I was doing, but I had never created a mirror port. I briefly thought about using OpenFlow to do it, but the unnecessary complexity was off putting. Instead I chose to create a simple mirror of a span port from my switch. So, traffic flow goes as such: &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2017/03/OVS-SPAN-1.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2017/03/OVS-SPAN-1.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;     This was fairly trivial, and I was seeing packets in no time. I&amp;rsquo;m not going to go through creating an OVS bridge in proxmox, there are lots of &lt;a href=&#34;https://pve.proxmox.com/wiki/Open_vSwitch&#34;&gt;documents&lt;/a&gt; on how to do that. Once you have your switch port SPAN up and running, and the physical interface in the OVS bridge, you essentially just need to add the following: Create the mirror```
ovs-vsctl &amp;ndash; &amp;ndash;id=@m create mirror name=span &amp;ndash; add bridge vmbr1 mirrors @m&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Find your ports that you want to mirror - you&#39;ll need the physical port if consuming from a real switch like I am, and the software port of the virtualized analyzer.  Remember, in OVS anything you want to mess with is going to have a UUID. You need to match the interfaces with the UUID to verify. ovs-vsctl list port \_uuid : 42dbd5a9-27c6-4f1b-958b-943f67b6801b bond\_downdelay : 0 bond\_fake\_iface : false bond\_mode : \[\] bond\_updelay : 0 external\_ids : {} fake\_bridge : false interfaces : \[b155454d-db6e-4bb8-af88-7cd6b544c303\] lacp : \[\] mac : \[\] name : &#34;eth1&#34; other\_config : {} qos : \[\] statistics : {} status : {} tag : \[\] trunks : \[\] vlan\_mode : \[\] \_uuid : 85c932b2-4f98-4650-8298-ae9e9ca72796 bond\_downdelay : 0 bond\_fake\_iface : false bond\_mode : \[\] bond\_updelay : 0 external\_ids : {} fake\_bridge : false interfaces : \[5219306f-96ec-440a-ac8b-d949ea18d752\] lacp : \[\] mac : \[\] name : &#34;vmbr1&#34; other\_config : {} qos : \[\] statistics : {} status : {} tag : \[\] trunks : \[\] vlan\_mode : \[\] \_uuid : d53c7323-517f-48a2-9235-4505e654d4b1 bond\_downdelay : 0 bond\_fake\_iface : false bond\_mode : \[\] bond\_updelay : 0 external\_ids : {} fake\_bridge : false interfaces : \[91d52d05-d881-4693-ab5c-fc64b5d87518\] lacp : \[\] mac : \[\] name : &#34;veth100i9&#34; other\_config : {} qos : \[\] statistics : {} status : {} tag : \[\] trunks : \[\] vlan\_mode : \[\] In red we have the interfaces I want to to use. the veth interface is the software port on the VM. Eth1 is the hardware interfce that my switch is spanning traffic to. Pro tip: In OVS, the commands are a little unintuitive to me when talking about mirrors.  &#34;select\_src\_port&#34; and &#34;select\_dst\_port=&#34; is the destination of the traffic flow from an interface and not source and destination of the traffic you are mirroring from the point of view of the in and out ports. Confusing, right? For instance I can monitor the input from one interface and the output of another in the mirror. What we want is the input and output of the same interface to get both directions of traffic. This is not unlike how span ports are configured on your hardware switch, the nomenclature just threw me off.```&#34; data-lang=&#34;Find your ports that you want to mirror - you&#39;ll need the physical port if consuming from a real switch like I am, and the software port of the virtualized analyzer.  Remember, in OVS anything you want to mess with is going to have a UUID. You need to match the interfaces with the UUID to verify. ovs-vsctl list port \_uuid : 42dbd5a9-27c6-4f1b-958b-943f67b6801b bond\_downdelay : 0 bond\_fake\_iface : false bond\_mode : \[\] bond\_updelay : 0 external\_ids : {} fake\_bridge : false interfaces : \[b155454d-db6e-4bb8-af88-7cd6b544c303\] lacp : \[\] mac : \[\] name : &#34;eth1&#34; other\_config : {} qos : \[\] statistics : {} status : {} tag : \[\] trunks : \[\] vlan\_mode : \[\] \_uuid : 85c932b2-4f98-4650-8298-ae9e9ca72796 bond\_downdelay : 0 bond\_fake\_iface : false bond\_mode : \[\] bond\_updelay : 0 external\_ids : {} fake\_bridge : false interfaces : \[5219306f-96ec-440a-ac8b-d949ea18d752\] lacp : \[\] mac : \[\] name : &#34;vmbr1&#34; other\_config : {} qos : \[\] statistics : {} status : {} tag : \[\] trunks : \[\] vlan\_mode : \[\] \_uuid : d53c7323-517f-48a2-9235-4505e654d4b1 bond\_downdelay : 0 bond\_fake\_iface : false bond\_mode : \[\] bond\_updelay : 0 external\_ids : {} fake\_bridge : false interfaces : \[91d52d05-d881-4693-ab5c-fc64b5d87518\] lacp : \[\] mac : \[\] name : &#34;veth100i9&#34; other\_config : {} qos : \[\] statistics : {} status : {} tag : \[\] trunks : \[\] vlan\_mode : \[\] In red we have the interfaces I want to to use. the veth interface is the software port on the VM. Eth1 is the hardware interfce that my switch is spanning traffic to. Pro tip: In OVS, the commands are a little unintuitive to me when talking about mirrors.  &#34;select\_src\_port&#34; and &#34;select\_dst\_port=&#34; is the destination of the traffic flow from an interface and not source and destination of the traffic you are mirroring from the point of view of the in and out ports. Confusing, right? For instance I can monitor the input from one interface and the output of another in the mirror. What we want is the input and output of the same interface to get both directions of traffic. This is not unlike how span ports are configured on your hardware switch, the nomenclature just threw me off.```&#34;&gt;ovs-vsctl set mirror span select\_src\_port=@eth1 select\_dst\_port=@eth1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also do this with the UUID```
ovs-vsctl set mirror span select_src_port=42dbd5a9-27c6-4f1b-958b-943f67b6801b select_dst_port=42dbd5a9-27c6-4f1b-958b-943f67b6801b&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Now that we have the source of our mirror we just need to send it somewhere. I wanted mine to go to an internal host running some analytics software (on interface veth100i9)```&#34; data-lang=&#34;Now that we have the source of our mirror we just need to send it somewhere. I wanted mine to go to an internal host running some analytics software (on interface veth100i9)```&#34;&gt;ovs-vsctl -- --id=@veth100i9 get port veth100i9 -- set mirror span output-port=@veth100i9&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;rsquo;s it. Log into your host and do a tcpdump on whatever interface is mapped to veth100i9 and you should see packets flowing. A few tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verify your span from the hardware switch is working before diving into the software stack.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re doing this is proxmox, be aware that proxmox networking stack can be unforgiving when you much around outside of their environment.&lt;/li&gt;
&lt;li&gt;This will not persist across reboots. Add it to /etc/network/interfaces manually to keep it after a restart.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Why I care about Segment Routing</title>
      <link>https://forwardingplane.net/post/care-segment-routing/</link>
      <pubDate>Tue, 04 Oct 2016 00:54:27 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/care-segment-routing/</guid>
      <description>&lt;p&gt;Edit: &lt;em&gt;Going against my normal “just get the content out there” methodology, I’ve been mulling over this blog post since July of 2016.  Segment routing is such a beautifully elegant solution I have had trouble articulating that fact. WAN technologies are squarely within my wheelhouse, and this one fits in so well I was going over and over the post never really satisfied with it, continuing to find mistakes and decided to just get it out there. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As a WAN guy by chance and opportunity, and a service provider engineer and architect by choice (and also chance and opportunity), segment routing (SR) is one of those wonderful new technologies that keeps rearing its head over and over in recent days - and it&amp;rsquo;s already playing in the big leagues. SR is supported by many of the large network equipment providers including Cisco, Juniper, and Nokia (Alcatel-Lucent), and as I have just learned, Arista.&lt;/p&gt;

&lt;p&gt;Why is this a notable tech you may want to pay attention to? Wide area and service provider networks have a longer mean time before replacement. They don’t change topology or architecture nearly as often and the gear typically has higher cost due to things like deeper interface buffers, more complex feature sets, larger TCAM for things like route tables, as well as increased redundancy features. Managing a WAN has a different feel and a different set of problems. Complex overlays and traffic engineering often play a role in wide area networks. Many an attempt to reduce the the complexity of WANs has been made and SDN is creeping its way into some pretty large networks. When a network of any size is built, there comes a tipping point when managing things by hand, even with great documentation, is too daunting and cannot be done efficiently. Automation is key. Simplicity is paramount. Anyone that has ever managed a large MPLS network knows this. So, when I started looking at segment routing, I was cautiously optimistic - it had many attributes that were comfortable to a seasoned WAN engineer and yet abstracted many of the complexities of the networks that we&amp;rsquo;d been running for years. In order to really understand the benefits that SR brings to the table, it&amp;rsquo;s important to understand the current landscape. When one builds a large MPLS network there are incremental elements that all build from each other in order to work. If one is broken or problematic, the problem will trickle up the stack. Fundamentally, the stack for a very vanilla MPLs WAN contains the following elements (top down):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client service interface&lt;/li&gt;
&lt;li&gt;Overlay, L3VPN, VPLS, ePIPE/PseudoWire/VLL&lt;/li&gt;
&lt;li&gt;BGP&lt;/li&gt;
&lt;li&gt;Label Distribution, LDP, etc.&lt;/li&gt;
&lt;li&gt;IGP, IS-IS or OSPFv2/3&lt;/li&gt;
&lt;li&gt;Ethernet, SONET, DS1/DS3/E1&lt;/li&gt;
&lt;li&gt;Optical transport or other last mile and long haul outside plant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add into this list the complications of traffic engineering, and you&amp;rsquo;ve got a mix of things that are fairly daunting to all but the most experienced engineers. What segment routing provides is a way to remove several layers of this and simplify what is arguably the most complex and least understood element: Traffic Engineering. Segment routing allows for the selection of an entire path, from the ingress of the network to the egress port, all outside of the IGPs shortest path table. It is often labeled as &amp;ldquo;source routing&amp;rdquo; which will inevitably create feeling of disgust, dread, and distain from a network engineer and panic from the security folks. I choose not to label SR as &amp;ldquo;source routing&amp;rdquo; because of the negative connotation associated with that technological approach. Instead, I would rather use the term &amp;ldquo;deliberate path selection&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Oh, and this can be automated. That&amp;rsquo;s right. It&amp;rsquo;s &amp;ldquo;SDN&amp;rdquo;. Utilizing a tool called a path computational engine or &amp;ldquo;PCE&amp;rdquo;, these paths can be selected based on any number of criteria including latency, hop count, load, time of day, phase of the moon, mood of the boss, etc.&lt;/p&gt;

&lt;p&gt;I was lucky enough to get to spend some quality time at a &lt;a href=&#34;http://techfieldday.com/event/srr1/&#34;&gt;special event&lt;/a&gt; recently. Interesting discussions were had, many a thing was learned. A few of the other attendees wrote up some great info on segment routing, including some use cases, which can be found here&lt;/p&gt;

&lt;p&gt;Terry Slattery on No Jitter&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nojitter.com/post/240171828/segment-routing-inside-a-new-sdn-technology&#34;&gt;http://www.nojitter.com/post/240171828/segment-routing-inside-a-new-sdn-technology&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Carl Niger on Come Route With Me&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://comeroutewithme.com/2016/07/24/post-tfd-segment-routing-roundtable-thoughts/&#34;&gt;https://comeroutewithme.com/2016/07/24/post-tfd-segment-routing-roundtable-thoughts/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Russ White on Net Work&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ntwrk.guru/dc-fabric-segment-routing-use-case-1/&#34;&gt;http://ntwrk.guru/dc-fabric-segment-routing-use-case-1/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ntwrk.guru/dc-fabric-segment-routing-use-case-2/&#34;&gt;http://ntwrk.guru/dc-fabric-segment-routing-use-case-2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I highly recommend taking a view of the talks from some folks using SR on some pretty significant networks - it&amp;rsquo;s worth your time if you&amp;rsquo;re really interested in throwing down with segment routing.  But what did this tell &lt;strong&gt;&lt;em&gt;me&lt;/em&gt;&lt;/strong&gt;? Lets look further into SR and see why it&amp;rsquo;s become so attractive to large, geographically diverse networks. First, SR builds on an existing knowledgeable. Far more people exist in the market that already know MPLS. The understand labels, they understand overlays, and they have vast experience with virtual circuits. Service providers are very likely MPLS based if they operate at any scale and offer typical ISP services. MPLS is well traveled, and even though there may be reasons that&amp;rsquo;s not perfect, it&amp;rsquo;s the devil we know. Other SDN technologies are either fairly green (l&lt;a href=&#34;http://blog.ipspace.net/2015/12/running-open-daylight-in-production.html#more&#34;&gt;et me tell you about running a production openflow experience&lt;/a&gt;) or are primarily focused on the data center, which as I will adamantly insist is a very different beast.&lt;/p&gt;

&lt;p&gt;Large scale service providers have a very different redundancy model. Attempting to apply campus or enterprise redundancy to a service provider does not scale and it certainly isn&amp;rsquo;t affordable. SR leverages the same models that MPLS does, it realies heavily on the IGP, leveraging a TLV within IS-IS. That brings me to IS-IS. Most service providers leverage IS-IS as their internal gateway protocol due to it&amp;rsquo;s ability to carry multiple routed protocols at once, leverage multi-topology, and the fact that it does not rely on the protocol it is routing for connectivity like OSPF does. SR is more-or-less an extension to IS-IS. Overlapping skill set #2. The other option, and this is a big one, is that there are multiple vendors that supported, as stated above. This is a big deal as int provides that &amp;ldquo;throat to choke&amp;rdquo; that a lot of emerging technologies just do not really have yet.&lt;/p&gt;

&lt;p&gt;Did I mention that it &amp;ldquo;fails open”? What’s not to love about falling back to an IGP rather than ceasing to process packets?  Lets do a for-instance use-case. Within your SR network you provision a path that takes a path with more hops but has less congestion. Create your label stack and away you go* Of that path fails, the traffic falls back to the standard routing table.&lt;/p&gt;

&lt;p&gt;Much like MPLS (of which I am a fan, FWIW), this technology is better suited for a larger network with multiple paths, this could be any number of  environments such as large camps networks, large scale data centers geographically diverse environments connected by multiple WAN circuits, and of course, service and content providers. This tech is quite simply full of win. &lt;/p&gt;

&lt;p&gt;*greatly simplified =)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buzzwords, technology, terminology, and the interconnection of modern networking</title>
      <link>https://forwardingplane.net/post/buzzwords-technology-terminology-interconnection-modern-networking/</link>
      <pubDate>Mon, 18 Jan 2016 16:33:09 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/buzzwords-technology-terminology-interconnection-modern-networking/</guid>
      <description>&lt;p&gt;&lt;em&gt;I&amp;rsquo;m way overdue for a soapbox session &amp;ndash; I found this one in my drafts and thought it was something I needed to put out there. It&amp;rsquo;s already dated in terminology but that actually helps make the point - it&amp;rsquo;s hard to keep up. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lets throw this out there: social media can be exhausting. Do not misunderstand me, it’s a great tool for communication, obtaining and disseminating information as well as standard goofing around. It’s also a serious business for a huge amount of companies. I use it extensively myself and I’ll assume there is a pretty good chance you followed a tweet or other social media link to get here. However, for a green network engineer looking for a path forward it can be a bit daunting. Those my age never had the social media aspect to deal with when we were learning, we may have had IRC or other haphazard back channels to bounce ideas and questions, but for the most part, the resources were far more limited than they are today. In actuality, I believe that this was a bit of an advantage that we had over today: we were often forced to bulldoze through problems, making mistakes that taught us deep understandings of the inner working of that given technology. It also sucked a lot more [time].&lt;/p&gt;

&lt;p&gt;Am I right? Maybe. Maybe not. Who is to say? These days I take full advantage of the wealth of information that is the internet for both personal and professional tasks, I would be a tad crazy not to. It&amp;rsquo;s why I write the tech stuff I write.&lt;/p&gt;

&lt;p&gt;With all of that, though, comes so many buzzwords and so much hype that it is very easy for an aspiring network engineer (or any professional IT hopeful, student or casual techie) to become completely overwhelmed by simply looking at twitter and following a handful of key players. I’ve been doing what I do with networks since the 1990s and even I have been feeling a little overwhelmed by the sheer number of “Network Engineer Killer” or “Must know” technologies being thrown around in the last few years. It&amp;rsquo;s both exciting, encouraging and at the same time enough to make even the most grizzly engineer feel snowed under.&lt;/p&gt;

&lt;p&gt;Wait for it……Cloud. No wait, DevOps. Containers! NO! NO! SDN! They&amp;rsquo;re all cool and they&amp;rsquo;re all important. They are also a lot to take in.&lt;/p&gt;

&lt;p&gt;I have been thinking a great deal about DevOps and SDN lately. Being a really, really bad developer, DevOps is a tad uncomfortable for me. It is an obviously useful skill set: Understanding code and automation. It’s powerful and &lt;strong&gt;will&lt;/strong&gt; make your professional life easier. Do you need to obsess over it? Probably not (do you need to obsess over any of it?!?). Remember that internet thing that I mentioned before? Yeah, there are a lot of resources there. Search engines are your friend.&lt;/p&gt;

&lt;p&gt;Will you need to know the concepts? For sure. Guess what, though? There are a &lt;strong&gt;ton&lt;/strong&gt; of resources for that too.&lt;/p&gt;

&lt;p&gt;As I was brainstorming this, I mind-mapped some of the things that jumped into my brain [&lt;a href=&#34;https://mindnode.com/&#34;&gt;mindnode pro&lt;/a&gt; is a fantastic app for this, I highly recommend it]. Things that get a lot of attention and maybe deserve a cursory glance. Lets break them down in a simple-ish and concise-ish manner and understand that by the time of this writing I’m positive it will be outdated and there will be some new whiz-bang thing that the marketing machine will be saying is the “something-killer&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Here are the high level things I see thrown around a lot. For what it’s worth, OpenDayLight has &lt;a href=&#34;http://www.opendaylight.org/project/technical-overview&#34;&gt;a page&lt;/a&gt; with some definitions that is pretty good, too.&lt;/p&gt;

&lt;p&gt; &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/07/Networking-Tech-Relationships.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/07/Networking-Tech-Relationships.png&#34; alt=&#34;Networking Tech Relationships&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is absolutely &lt;strong&gt;not&lt;/strong&gt; all-encompassing and is likely missing major things, however, the point is really not to be accurate as much as it is to demonstrate that there is a &lt;strong&gt;monumental&lt;/strong&gt; amount of scope that is in some ways interconnected and in other ways completely autonomous. It is also pretty clear that due to the nature of what “DevOps” is, it has ties into many other things.&lt;/p&gt;

&lt;p&gt;The biggest take-away is that the communication paths need to be there - Better communication between these specializations makes for better, more secure, more usable tools.&lt;/p&gt;

&lt;p&gt;It is how the DevOps is done, &lt;strong&gt;not&lt;/strong&gt; what it is doing.&lt;/p&gt;

&lt;p&gt;What I am really getting at here is that there is no need to get overwhelmed. You don’t need to know all of this stuff. If you know a little about most of it and a lot about one or two topics, then in my opinion you are doing really, really well.&lt;/p&gt;

&lt;p&gt;My best advice to any new IT person is not to know everything but to know where to find it - and then share what you learned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Interdomain SDN part 3</title>
      <link>https://forwardingplane.net/post/building-interdomain-sdn-part-3/</link>
      <pubDate>Fri, 06 Nov 2015 04:37:23 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-interdomain-sdn-part-3/</guid>
      <description>&lt;p&gt;A few years ago I wrote &lt;a href=&#34;http://www.forwardingplane.net/2012/11/sdn-across-domains-in-the-wan-a-novice-look/&#34;&gt;some text&lt;/a&gt; on &lt;a href=&#34;http://www.forwardingplane.net/2013/01/sdn-across-the-wan-part-deux-primitives/&#34;&gt;interdomain SDN&lt;/a&gt;. Years later, work is being done, smart people are thinking about it and building ways to make it a reality. Not being one to give up on an idea, I gave &lt;a href=&#34;https://docs.google.com/presentation/d/1anAaqWR8wmzKO5fqidDy9QJXW4RiVshX9Miq3PoDv9E/edit&#34;&gt;this presentation&lt;/a&gt; in may at &lt;a href=&#34;http://chinog.org/meetings/chi-nog-05/&#34;&gt;ChiNOG&lt;/a&gt;  on what my take on what that architecture should be. I (we) propose that the use of existing protocols such as &lt;a href=&#34;https://tools.ietf.org/html/rfc5575&#34;&gt;BGP FlowSpec&lt;/a&gt; will make this realistically deployable and maintainable given some &lt;a href=&#34;https://github.com/dwcarder/sdn-ix-demo&#34;&gt;simple, pluggable middleware&lt;/a&gt;. As work continues to happen on this, my belief is that this is a very sound (and simple) concept. The middleware is modular and flexible enough that it can stand alone or plug into an existing code base such as ODL or Ryu. As &lt;a href=&#34;http://sc15blog.blogspot.com/2015/11/simplifying-worlds-most-powerful.html&#34;&gt;I work on the SDN deployment&lt;/a&gt; for the &lt;a href=&#34;http://www.sc15.org&#34;&gt;annual international supercomputing conference&lt;/a&gt;, and work on the &lt;a href=&#34;https://www.es.net/network-r-and-d/workshops/&#34;&gt;SDN for scientific networking workshop&lt;/a&gt;,  I become more and more convinced that there needs to be an operationally viable and simple way to support these types of networks in ways that are thin and simple since it is a newer concept and some of the protocols involved (e.g. OpenFlow) is still in its infancy.  Here is the video of the talk for anyone interested in listening to me talk about it for 20 minutes. As a reference, this is a great talk from the same conference on BGP FlowSpec that adds a lot of credence to the use of it as a policy dissemination protocol.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brocade Vyatta Install and OpenFlow 1.3 on ICX 7450</title>
      <link>https://forwardingplane.net/post/brocade-vyatta-install-and-openflow-1-3-on-icx-7450/</link>
      <pubDate>Sat, 20 Jun 2015 16:06:03 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/brocade-vyatta-install-and-openflow-1-3-on-icx-7450/</guid>
      <description>

&lt;p&gt;I recently had a need to test OpenFlow on the brocade ICX 7450 for a fairly good sized, high visibility &lt;a href=&#34;http://scinet.supercomputing.org&#34;&gt;project&lt;/a&gt;. The basic goal is pretty simple, Layer2 path provisioning. Straightforward and fairly well supported in OpenFlow, even from the early days. To do this, the idea was to use a turnkey platform, that way there is one throat to choke if there are issues. I landed on the &lt;a href=&#34;http://www1.brocade.com/forms/jsp/vyatta-controller/download.jsp&#34;&gt;Brocade Vyatta controller&lt;/a&gt; (which is essentially ODL), and the ICX. Below is a rough account of getting this up and working to the point of testing. For the purposes of this I used BVC 1.3 and an ICX 7450. The docs for the BVC are actually pretty good if you read them. I found the google searching for the docs led to &lt;sup&gt;9&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt; links to brocade being 404 errors. My guess is that they restructured their site and did not alias anything. Minor frustration since my guess is that most folks search using a search engine rather than going to the site and searching from there. The link to the configuration guide I used for the ICX is &lt;a href=&#34;http://www.brocade.com/content/brocade/en/backend-content/pdf-page.html?/content/dam/common/documents/content-types/configuration-guide/fastiron-08030-sdnguide.pdf&#34;&gt;here&lt;/a&gt;. Once I grabbed the software, which requires registration, I went on to try to build this on CentOS 6.6. After some hurdles that I didn&amp;rsquo;t expect, I went and actually read the doc for BVC and found that ubuntu is a requirement. Another minor annoyance, but surmountable pretty easily. Enterprise customers are probably not going to want to have a one-off from RHEL/CentOS even if I don&amp;rsquo;t have a strong preference either way. Now that the VM is up and running with just over the minimum requirements, time to log in and get to work. This is assuming you have the code actually on the server already.```
apt-get install -y unzip curl wget python-pip&lt;br /&gt;
curl -sL &lt;a href=&#34;https://deb.nodesource.com/setup&#34;&gt;https://deb.nodesource.com/setup&lt;/a&gt; | sudo bash -
sudo apt-get install -y nodejs
unzip -o bvc-1.3.0.zip -d /opt
unzip -o bvc-dependencies-1.3.0.zip -d /opt
unzip -o bvc-app-pathexplorer-packaging-1.2.0.zip -d /opt
cd /opt/bvc
./install&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-The output should look something like this```&#34; data-lang=&#34;The output should look something like this```&#34;&gt; root@bvc:/opt/bvc# ./install
 Brocade Vyatta Controller Installation

 Starting @ : 2015-06-17 15:31:15.564202

 Performing prerequisite check ...
 JDK Check ................................ \[ OK \]
 CPU Count Check: ......................... \[ OK \]
 Memory Size Check: ....................... \[ OK \]

 Running pre-install scripts ...

 Unpacking archives ....................... \[ OK \]

 Setting up karaf container ............... \[ OK \]

 Running controller pre-install scripts ...

 Configuring base features ................ \[ OK \]
 Start controller ......................... \[ OK \]
 Waiting for base initialization .......... \[ OK \]

 Configuring all features ................. \[ OK \]
 Adding Repositories ...................... \[ OK \]
 Adding Features .......................... \[ OK \]

 Running controller post install scripts ...

 Running install scripts ...


 Stopping NODEJS server 9000 .............. \[ OK \]
 Starting NODEJS server  .................. \[ OK \]
   Server @ http://10.42.44.20:9000/

 Install completed @ :  2015-06-17 15:32:26.464365&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monitoring the connection to the controller from the controller can be accomplished by using the included tool: /opt/bvc/bin/taillog which operates just like you think, by tailing a log file. Checking for capability can be pretty easily accomplished by looking at the restconf modules:```
http://&lt;IP address&gt;:8181/restconf/modules&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Now, for the ICX, I was under the impression that OpenFlow was in the base code. This is a true statement, however, I made a bad assumption that it was in _all_ code for that platform. Not so. After banging around and reading release notes as well as contacting my SE, I found that the code that it shipped with did _not_ support openflow, so I would need to upgrade it. _The ICX 7450 (and probably others) requires at least Version 08.0.30aa for OpenFlow support. Earlier versions will be lacking in the entire command hierarchy, even for older versions of OpenFlow._ **Brocade ICX 7450 configuration** From the console:```&#34; data-lang=&#34;Now, for the ICX, I was under the impression that OpenFlow was in the base code. This is a true statement, however, I made a bad assumption that it was in _all_ code for that platform. Not so. After banging around and reading release notes as well as contacting my SE, I found that the code that it shipped with did _not_ support openflow, so I would need to upgrade it. _The ICX 7450 (and probably others) requires at least Version 08.0.30aa for OpenFlow support. Earlier versions will be lacking in the entire command hierarchy, even for older versions of OpenFlow._ **Brocade ICX 7450 configuration** From the console:```&#34;&gt;ip address 10.42.44.30 255.255.255.224
no ip dhcp-client enable
ip default-gateway 10.42.44.1
ip dns server-address 10.42.2.2
clock timezone us central
clock summer-time
logging host 10.42.44.7
logging enable user-login
logging enable config-changed
ntp 
server 10.42.2.2

interface ethernet 1/1/1 
port-name port1

crypto key generate rsa modulus 2048
ip ssh  authentication-retries 5
ip ssh timeout 120 
ip ssh key-authentication yes
username buraglio enable
username buraglio privilege 0
username buraglio password brocade

openflow enable ofv130 
openflow controller 10.42.44.20
system-max openflow-flow-entries 3072&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thoughts: OpenFlow wants to use SSL by default. When configuring this it failed in a way that is not intuitive &lt;em&gt;at all&lt;/em&gt;. To get it running quickly, you need to disable SSL, which I absolutely &lt;em&gt;do not&lt;/em&gt; recommended for anything production). If you see anything other than this, the OpenFlow connection isn&amp;rsquo;t working```
SSH@icx-of-test#sh openflow controller
Openflow controller information&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controller-mode-tcp-ssl-ip-address-port-status&#34;&gt;Controller   Mode      TCP/SSL   IP-address        Port   Status&lt;/h2&gt;

&lt;p&gt;1  (Equal)   active    TCP       10.42.44.20     6653   OPENFLOW_ESTABLISHED&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-This command will make it talk to the BVC over unencrypted TCP:```&#34; data-lang=&#34;This command will make it talk to the BVC over unencrypted TCP:```&#34;&gt;openflow controller ip-address 10.42.44.20 no-ssl port 6653 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make this work over SSL requires pulling the certificates into the device from the controller. I am still working on this for consideration in a production environment. Path explorer has most of the interesting bits in it. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-4.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-4.png&#34; alt=&#34;BVC-4&#34; /&gt;&lt;/a&gt; Other handy commands:```
SSH@icx-of-test#sh openflow inter
  interface     Show interfaces where OpenFlow is enabled
  &lt;cr&gt;
SSH@icx-of-test#sh openflow interface&lt;/p&gt;

&lt;p&gt;Total number of Openflow interfaces: 2&lt;/p&gt;

&lt;p&gt;Port   Link   Speed Tag MAC            OF-portid   Name           Mode
1/1/1  Up     1G    No  cc4e.248b.4570 1           port1          Hybrid-Layer23
1/1/48 Down   None  No  cc4e.248b.459f 48          port48         Hybrid-Layer23&lt;/p&gt;

&lt;p&gt;```The topology explorer is pretty cool, lots of eye candy. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-1.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-1.png&#34; alt=&#34;BVC-1&#34; /&gt;&lt;/a&gt; Random Thoughts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Restarting the BVC causes the topology to need to rebuild, as one would expect. The ICX took longer to show up in the controller than I expected. In fact, it never recovered until I intervened manually.&lt;/li&gt;
&lt;li&gt;The Brocade ICX randomly rebooted while attempting to scp the bootloader code. I never figured out why.&lt;/li&gt;
&lt;li&gt;The ICX stopped responding to SSH for some reason. The only way I could recover it was to reboot. Concerning from a management standpoint, but I suspect it was an anomaly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next post I&amp;rsquo;ll explore the actual provisioning and the SSL configuration.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brocade does a double down on SDN</title>
      <link>https://forwardingplane.net/post/brocade-does-a-double-down-on-sdn/</link>
      <pubDate>Sat, 28 Mar 2015 16:09:11 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/brocade-does-a-double-down-on-sdn/</guid>
      <description>&lt;p&gt;Since &lt;a href=&#34;http://techfieldday.com/event/nfd9/&#34;&gt;Network Field Day 9&lt;/a&gt;, I have spent more and more time mentally grinding on what Brocade is doing. I have been a pretty vocal critic of the foundry hardware and software platform since my first experience with it years and years ago. I found it to be lacking in completed features, Layer 3 functionality and general stability.&lt;br /&gt;
This is one reason that anyone reading this should take pause and think about the background this post is sourcing from and how much of a shift it is. I tend to be a pretty harsh critic and have (more than once) been labeled as irreverent when it comes to what is stated in the network and security industry, instead focusing on what is actually necessary in a production network. Brocade has added some good products and features, keeping their SDN features at the forefront, as expected. These are great, but while useful and innovataive, I am less interested in those technical abilities. Brocade has been a long standing icon in the SDN and specifically in the openflow and &lt;a href=&#34;http://www.opendaylight.org&#34;&gt;OpenDayLight&lt;/a&gt; space since the very early days. In fact, from an outsiders perspective they&amp;rsquo;ve bet their networking arm on it. They were one of the first to market and are able to make software changes quickly and add significant features due to the fact that their larger boxes are FPGA based. This is where it gets interesting for me as someone that had to manage large Foundry/Brocade networks for a number of years and who sports the scars and experiences to prove it. Knowing that the majority of the issues with their platform were software related things like lack of full featured protocols, buggy Layer 3 features and their infamously poor multicast support, the fact that they are laser focused on software defined networking has my wheels turning, and let me tell you why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Brocade is slurping up pretty much all of the thought leaders, idea producers, and game changers in the SDN community. This isn&amp;rsquo;t exactly ground breaking news, but it is worth repeating because it is significant. It signals, in a very public way, that they are not messing around. They&amp;rsquo;re embracing SDN and they are ready to stop selling sugar water and change the [networking]world. There is a related branch to this, bear with me, I&amp;rsquo;ll come back to it.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Brocade purchased &lt;a href=&#34;http://www.brocade.com/launch/vyatta/&#34;&gt;Vyatta&lt;/a&gt;, a completely software based company and they did not just absorb the IP and rebadge it. They are actively integrating it, as a product, into their portfolio.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Brocade is &lt;strong&gt;supporting&lt;/strong&gt; an open sourced based commercialized SDN controller. This signals that they are ready for someone to buy it, deploy it and use it in production. And to answer support questions.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Circling back to my first point:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Brocade hired &lt;a href=&#34;https://www.linkedin.com/in/michaelbushong&#34;&gt;Michael Bushong&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may ask, why does that really matter? I assert that this indicates a very key element inside of Brocade: they know that they need to adapt and that they need a visionary to help direct that change. Bushong has a long history of enacting significant change. He is also a smart guy (see degree from UC Berkeley in advanced heat transfer &amp;amp; fluid dynamics). Bushong was responsible for the SDN group and the One Junos initiative at Juniper. He was also a key player at Plexxi, a very innovative networking company with a unique product. He knows how to motivate and promote change and has built a culture that is open to it. In fact, after the NFD9 presentation several of the team members approached a handful of us and asked us to elaborate on the things we were asking about and requesting. I have also received follow ups on those items. These things may seem insignificant, but give some serious thought to how often network vendors ask these questions, follow up and actually &lt;em&gt;listen&lt;/em&gt; to needs and requirements that are non-standard.&lt;/p&gt;

&lt;p&gt;All of that opinion aside, Brocade is also bringing good featues and really thinking about how to change and more importantly, improve, a key element in a sucessful company (see H.G Wells: &amp;ldquo;Adapt or perish, now as ever, is nature&amp;rsquo;s inexorable imperative.&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;I remain intrigued.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The NEC surprise</title>
      <link>https://forwardingplane.net/post/the-nec-surprise/</link>
      <pubDate>Fri, 20 Feb 2015 06:52:33 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/the-nec-surprise/</guid>
      <description>&lt;p&gt;When &lt;a href=&#34;http://necam.com/&#34;&gt;NEC&lt;/a&gt; began talking about SDN at &lt;a href=&#34;http://techfieldday.com/event/nfd9/&#34;&gt;Network Field Day 9&lt;/a&gt;, I was not sure what to expect. I knew they had been heavily involved with openflow since the early days, and many years ago I was able to get my hands on their early OpenFlow controller and was immediately frustrated by its cryptic nature and frankly, poor documentation. Their switches were fine and were heavily utilized in early OpenFlow deployments. I knew they had decent support and were squarely on board the SDN train. Their controller, in 2010, was not terribly fun to work with. It was (if memory serves) prohibitively expensive and the support manual was nearly as cryptic as the controller. Because it&amp;rsquo;s my personality type, I went in with a very open mind, hoping to be surprised. After all, it&amp;rsquo;d been 4+ years since I&amp;rsquo;d seen that controller. Well, I am here to report that I will happily eat some crow. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/02/Eat-Crow.jpg&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/02/Eat-Crow.jpg&#34; alt=&#34;Eat Crow&#34; /&gt;&lt;/a&gt;   A few things became very apparent to me as I sat and watched the presentation from NEC, which you can view in its entirety below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NEC is not messing around with their SDN offering. They&amp;rsquo;ve been in the openflow game since the beginning and the polish on their controller shows it. The topology is quite nice and they&amp;rsquo;ve got a finished looking product that would find itself at home in a decent sized NOC.&lt;/li&gt;
&lt;li&gt;NEC is playing well with others. Their demo consisted of both NEC and DELL whitebox switches. To me this is an indication of both great forward thinking and a clear message that the controller is a product that can stand on its own.&lt;/li&gt;
&lt;li&gt;NEC is setting the barrier of entry low. Very low. They&amp;rsquo;ve got an entry level &amp;ldquo;SDN in a box&amp;rdquo; that consists of their controller and a few switches for like 3k. They&amp;rsquo;re also offering a 90 day free trial on their controller that is bundled with &lt;a href=&#34;http://mininet.org/&#34;&gt;mininet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Like most other controllers, the NEC controller is topology aware and using openflow 1.3 for it&amp;rsquo;s communication. Unlike any other demo I&amp;rsquo;ve seen, NEC used CLI to make changes and displayed the updates in near realtime on the controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They&amp;rsquo;ve got a tap product aimed at security tap aggregators a la &lt;a href=&#34;http://www.gigamon.com/&#34;&gt;gigamon&lt;/a&gt;, so they&amp;rsquo;re seeing the value of SDN and openflow from a security lens as well as a network operations perspective, a good play in my opinion. SDN and openflow in particular have a great deal to offer the security community (think of all of the wacky stuff your security team has asked for and then map that into an openflow network. You&amp;rsquo;ll probably hit 80% match). NEC has done some tight integration with &lt;a href=&#34;https://technet.microsoft.com/en-us/windowsserver/dd448604.aspx&#34;&gt;microsoft hyper-v&lt;/a&gt; too, so environments leveraging hyper-v as a virtualization technology can drop this in to take advantage of the network programmability on top of their virtualization environment. This is something that I&amp;rsquo;d not seen before [although it may exist and I just don&amp;rsquo;t know it]. In addition, NEC has spun up an &amp;ldquo;app store&amp;rdquo; for SDN apps and allowed for some cross pollination, with a handful of caveats, with &lt;a href=&#34;http://www.opendaylight.org/&#34;&gt;opendaylight&lt;/a&gt; for testing. &lt;speculation&gt; There are a few things I find interesting about the NEC offering and about NEC in general. Being in a service provider environment off and on for most of my career, the fact that NEC is getting involved so heavily is intriguing. Unlike most of the other DC focused companies, NEC plays in the carrier market. While this particular briefing did not include any carrier updates, it would surprise me if this wasn&amp;rsquo;t being investigated behind some big doors. It makes sense to me and it would be a surprise if it did not occur to someone else. The SP market is fickle and slow to change, but ripe for fresh ideas. I see a lot of potential both there and in the DC / campus / enterprise. &lt;/speculation&gt;   &lt;a href=&#34;https://vimeo.com/119508255&#34;&gt;Introduction to NEC Networking&lt;/a&gt; from &lt;a href=&#34;https://vimeo.com/sfoskett&#34;&gt;Stephen Foskett&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;. &lt;a href=&#34;https://vimeo.com/119508725&#34;&gt;NEC ProgrammableFlow vCOps Solution&lt;/a&gt; from &lt;a href=&#34;https://vimeo.com/sfoskett&#34;&gt;Stephen Foskett&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;. &lt;a href=&#34;https://vimeo.com/119510207&#34;&gt;ProgrammableFlow SCVMM Demo&lt;/a&gt; from &lt;a href=&#34;https://vimeo.com/sfoskett&#34;&gt;Stephen Foskett&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BigSwitch Networks BigCloud Fabric 2.5</title>
      <link>https://forwardingplane.net/post/bigswitch-networks-bigcloud-fabric-2-5/</link>
      <pubDate>Thu, 29 Jan 2015 01:04:46 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/bigswitch-networks-bigcloud-fabric-2-5/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.bigswitch.com&#34;&gt;BigSwitch&lt;/a&gt; is &lt;a href=&#34;http://www.bigswitch.com/press-releases/2015/01/28/big-switch-networks-unveils-big-cloud-fabric-2_5?mkt_tok=3RkMMJWWfF9wsRonvqTIZKXonjHpfsX56eQrUKS2lMI%2F0ER3fOvrPUfGjI4ASMtrI%2BSLDwEYGJlv6SgFQ7fBMbd4yLgIXRA%3D&#34;&gt;making waves again&lt;/a&gt;, this time with its Big Cloud Fabric product update. I was lucky enough to get a bit of a preview of what was coming and was pleasantly surprised by the new features, finding them functionally useful for both operators, security folks and management alike.&lt;/p&gt;

&lt;p&gt;Not only is the fabric fit to operate at hyper scale proportions, they&amp;rsquo;ve paid  close attention to making such operations even easier. With release 2.5 they&amp;rsquo;re focusing more on white box switches and abstracting the control plane further, which is important to note because decoupling those things can prove to be confusing and complicated and doing so can make operation and service clunky if not done well. From what &lt;a href=&#34;http://www.forwardingplane.net/2014/09/bigswitch-labs-for-sdn-learning-a-sneak-peek/&#34; title=&#34;BigSwitch Labs for SDN learning: a sneak peek!&#34;&gt;I&amp;rsquo;ve seen and experienced in their fabric cloud training&lt;/a&gt; and in this update, it appears smooth and easy to use.&lt;/p&gt;

&lt;p&gt;Something mentioned during this briefing that I found particularly cool was the notion of a starter kits. BigSwitch is making available a &amp;ldquo;kickstarter&amp;rdquo; of their big cloud fabric with available software, hardware, cables and optics; a turnkey SDN platform in a box. Where I could see this being convenient is for those looking to build out a lab, dip their toe into the SDN / data center fabric world or to build out a dedicated project. A nice option for sure.&lt;/p&gt;

&lt;p&gt;BigSwitch is also adding support for VMWare VCenter and they&amp;rsquo;re also adding support for the &lt;a href=&#34;http://www.dell.com/us/business/p/open-networking-switches/pd&#34;&gt;dell open network switch&lt;/a&gt; series to boot.&lt;/p&gt;

&lt;p&gt;What really caught my eye, though, was the existence of a very robust looking set of analytics. An eye catching assortment of graphs, logs and functional data that is, get this, driven by an &lt;a href=&#34;http://www.elasticsearch.com&#34;&gt;elasticsearch&lt;/a&gt; back end.   What is included is useful not only for Network and SDN engineers, but also for security &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/bsw-eyecandy.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/bsw-eyecandy.png&#34; alt=&#34;bsw-eyecandy&#34; /&gt;&lt;/a&gt;professionals. Including things like event logs, fine grained search, canned reports for the execs and presenting everything via a REST API and a subset available via syslog for good measure I could see this being a very handy set of data for tracking down any number of things from incident response to problem resolution.&lt;/p&gt;

&lt;p&gt;I look forward to seeing more from &lt;a href=&#34;http://www.bigswitch.com&#34;&gt;BigSwitch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Network Field Day 9</title>
      <link>https://forwardingplane.net/post/network-field-day-9/</link>
      <pubDate>Sat, 24 Jan 2015 15:55:48 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/network-field-day-9/</guid>
      <description>&lt;p&gt;In a few weeks I&amp;rsquo;ll have the opportunity to participate in another &lt;a href=&#34;http://techfieldday.com/event/nfd9/&#34;&gt;Network Field Day&lt;/a&gt;. I&amp;rsquo;ve been lucky enough to have the opportunity to attend&lt;a href=&#34;http://www.forwardingplane.net/2014/02/network-field-day-7/&#34; title=&#34;Network Field Day 7&#34;&gt; in the past&lt;/a&gt; and have done some &lt;a href=&#34;http://www.forwardingplane.net/2013/03/network-field-day-5/&#34; title=&#34;Network Field Day 5 – Participate Remotely&#34;&gt;remote participation&lt;/a&gt; when possible, but like some of the other rare &lt;a href=&#34;http://www.forwardingplane.net/2012/11/scinet-a-privileged-few/&#34; title=&#34;SCinet, a privileged few&#34;&gt;opportunities&lt;/a&gt; I have had in my career, NFD is fairly unique in that it is constantly evolving in both the information provided and the individuals involved. As the saying goes, variety is the spice of life. I&amp;rsquo;m particularly excited about the presentations and have been looking forward to talking to a few of the participant companies for a while. There is a tight line up for NFD9, but I am very intrigued as I am either unfamiliar or have been looking for more information about several of them for quite some time now. &lt;a href=&#34;http://netbeez.net/&#34;&gt;NetBeez&lt;/a&gt; is  an interesting one, they provide a service not unlike a project I&amp;rsquo;ve been working with for years called &lt;a href=&#34;https://www.perfsonar.net/&#34;&gt;perfSonar&lt;/a&gt;. The data that these kind of projects provide is absolutely invaluable, so I&amp;rsquo;m very interested in NetBeez and how they&amp;rsquo;re accomplishing their tasks and presenting their data. I met with and &lt;a href=&#34;http://www.forwardingplane.net/2014/04/blending-the-network-pluribus-serverswitch/&#34;&gt;wrote about&lt;/a&gt; &lt;a href=&#34;http://www.pluribusnetworks.com/&#34;&gt;Pluribus Networks&lt;/a&gt; at (and around the time of) &lt;a href=&#34;http://techfieldday.com/event/nfd7/&#34;&gt;NFD7&lt;/a&gt;. I was impressed then and I&amp;rsquo;m impressed now. I see a great value in what they&amp;rsquo;re doing for so many practical applications and am very anxious to see what they&amp;rsquo;ve added, changed or tweaked since our last meeting roughly a year ago. &lt;a href=&#34;http://cumulusnetworks.com/&#34;&gt;Cumulus networks&lt;/a&gt; is another one I&amp;rsquo;ve been wanting to get lab time with since they came out. I am looking forward to having them in a room, they&amp;rsquo;re doing something to networking that, like Pluribus, is pretty unique and arguably game changing. At then end of the day, though, the best part of this is not that there are a few interesting topics, it is the fact that all of the topics and players are unique, top shelf and potentially game changing. It&amp;rsquo;s essentially an all star lineup (again) with the likes of &lt;a href=&#34;http://www.brocade.com&#34;&gt;Brocade&lt;/a&gt;, &lt;a href=&#34;http://www.solarwinds.com/&#34;&gt;Solarwinds&lt;/a&gt;, &lt;a href=&#34;http://www.nec.com&#34;&gt;NEC&lt;/a&gt;, &lt;a href=&#34;http://www.velocloud.com/&#34;&gt;VeloCloud&lt;/a&gt; and &lt;a href=&#34;http://www.cloudgenix.com/&#34;&gt;Cloudgenix&lt;/a&gt;. This entire line up is right up my alley, as a large number of them are WAN or SDN oriented, which is where I spend the majority of my normal working days. In addition to all of that, I&amp;rsquo;ll finally get to meet &lt;a href=&#34;http://twitter.com/networkingnerd&#34;&gt;NetworkingNerd&lt;/a&gt; in real life.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenVswitch 2.3.0 RPMs</title>
      <link>https://forwardingplane.net/post/openvswitch-2-3-0-rpms/</link>
      <pubDate>Fri, 10 Oct 2014 21:06:50 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/openvswitch-2-3-0-rpms/</guid>
      <description>&lt;p&gt;I was wanting to do a few quick mock-ups with &lt;a href=&#34;http://openvswitch.org/&#34;&gt;OpenvSwitch&lt;/a&gt; and &lt;a href=&#34;http://www.opendaylight.org/&#34;&gt;OpenDayLight&lt;/a&gt; and wanted to use CentOS since I have templates for it that I replicate.  Just like with the &lt;a href=&#34;http://www.forwardingplane.net/2013/11/openvswitch-2-0-debian-packages/&#34; title=&#34;OpenvSwitch 2.0 Debian packages&#34;&gt;debian stuff I had been doing&lt;/a&gt;, I wasn&amp;rsquo;t able to find any in some quick searches.   I stumbled upon &lt;a href=&#34;http://n40lab.wordpress.com/2014/09/04/openvswitch-2-3-0-lts-and-centos-7/&#34;&gt;This site&lt;/a&gt;, which had a great how to for building them, so I just used that.  Seeing as that the debian packages actually got downloaded a lot, I figured I&amp;rsquo;d post these RPMs as well.  They&amp;rsquo;re available &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/OVS2.0/OpenvSwitch-2.3.0-RPM.tgz&#34;&gt;here&lt;/a&gt; and should work on CentOS 6.5 and probably 7. Just do a quick local install and start the service and you should be up and running.  &lt;code&gt;
yum localinstall /home/ovswitch/rpmbuild/RPMS/x86\_64/openvswitch-2.3.0-1.x86\_64.rpm 
sudo service openvswitch start
&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BigSwitch Labs for SDN learning: a sneak peek!</title>
      <link>https://forwardingplane.net/post/bigswitch-labs-for-sdn-learning-a-sneak-peek/</link>
      <pubDate>Mon, 22 Sep 2014 10:24:34 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/bigswitch-labs-for-sdn-learning-a-sneak-peek/</guid>
      <description>&lt;p&gt;I was recently granted access to the beta &lt;a href=&#34;http://www.bigswitch.com/&#34;&gt;BigSwitch Networks&lt;/a&gt; lab site, a purpose built classroom in the cloud focused on teaching the BigSwitch SDN environment.  I had seen some of the BSN offerings in the past and always held them in high regard, but I was thoroughly impressed with both the completeness of the lab and how polished the controller environment was.&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.28.50.png&#34; alt=&#34;Screenshot 2014-09-12 10.28.50&#34; /&gt; At the time of this writing, the lab consists of 3 modules: Building cloud fabric, monitoring fabric and dynamic provisioning of monitoring fabric.  Since there is quite a lot going on with this cloud based SDN classroom, for the scope of this post I&amp;rsquo;ll concentrate on the first, building cloud fabric.  I&amp;rsquo;m a big fan of the CLI*, and one thing that jumped right out to me was that they provide the GUI and the CLI, and that the CLI is familiar to anyone that has worked on an IOS device.  The lab is useful, even for someone that has done some SDN, both on production or in a lab, in that it presents the fundamentals in a way that both demonstrates the purpose and function and lays out the technology and product. From the technology presentation standpoint, the BigSwitch offering is quite impressive. The reality of it is that, in my experience, GUIs don&amp;rsquo;t always have the most intuitive or complete implementations and they&amp;rsquo;re hard to automate.  Now, from what I&amp;rsquo;ve seen to far the bigswitch offing is the exception to that rule.  The setup is very functional and goes through a range of great material. for comparison, below is the tenants display from the web interface: &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.47.37.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.47.37.png&#34; alt=&#34;Screenshot 2014-09-12 10.47.37&#34; /&gt;&lt;/a&gt;   and the corresponding show command: &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.33.49.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.33.49.png&#34; alt=&#34;show tenant&#34; /&gt;&lt;/a&gt; Nevertheless, part of my usual workflow is to use one to define the other when I can.  What I mean by that is that if I don&amp;rsquo;t know exactly how to accomplish my goal in the GUI, I switch to the CLI and see what I can do from there, returning to the GUI to see what has changed and then reverse engineer it from that perspective.  The opposite is also true, I have used the CLI to define the GUI &lt;em&gt;:cough:&lt;/em&gt; &lt;a href=&#34;http://www.juniper.net/us/en/products-services/security/netscreen/&#34;&gt;netscreen&lt;/a&gt; &lt;em&gt;:cough:&lt;/em&gt;. The important thing to note here, though, is that the tools all work as if it is a real environment, because it &lt;em&gt;is&lt;/em&gt; a real environment. The god among men here, really, is the &lt;em&gt;debug rest&lt;/em&gt; command.  This command, when issued in the CLI (displayed below) allows the commands sent to the terminal to automatically pop up with the rest interface commands necessary to utilize them.  Wrap your head around that one for a minute.  Are you thinking automation?  Me too; seeing that made me want to go write code, and I am a horrible developer. &lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.50.19.png&#34; alt=&#34;Screenshot 2014-09-12 10.50.19&#34; /&gt; In the time I&amp;rsquo;ve spent within this system I have been thoroughly impressed with how well it functioned.  I had no issues whatsoever with how the training presented the material, executed the commands or displayed the responses.  My only suggestion would be to add a configuration guide for the CLI =) Below is a quick youtube video of some of the functions.    * Yes, I know SDN is supposed to &amp;ldquo;kill the CLI&amp;rdquo;.  I don&amp;rsquo;t by the sensationalism for the short to medium term.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
