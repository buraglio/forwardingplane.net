<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>
    Posts on ForwardingPlane.net
    
    </title>
    <link>https://forwardingplane.net/post/</link>
    <description>Recent content 
    
    in Posts on ForwardingPlane.net
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <copyright>Copyright (c) 2019, all rights reserved.</copyright>
    <lastBuildDate>Sat, 02 Nov 2019 18:11:58 +0000</lastBuildDate>
    
    
        <atom:link href="https://forwardingplane.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Packet Pushers Weekend Edition Number 1</title>
      <link>https://forwardingplane.net/post/packet-pushers-weekend-edition-no1/</link>
      <pubDate>Sat, 02 Nov 2019 18:11:58 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/packet-pushers-weekend-edition-no1/</guid>
      <description>&lt;p&gt;We all know the &lt;a href=&#34;https://www.packetpushers.net&#34;&gt;Packet Pushers&lt;/a&gt;. Recently, I had the pleasure of sitting in on the inagural &lt;a href=&#34;https://www.youtube.com/watch?v=goQ9ppGwrEo&amp;amp;t=1668s&#34;&gt;&amp;ldquo;Packet Pushers Weekend Edition&amp;rdquo;&lt;/a&gt; - an informal, video round table where we discuss fun and relevant topics in the space of networking and other related IT topics. Much discussion was had on SR-MPLS, Service providers, SD-WAN, and Cloud. I hope to participate again, as I found the experience both entertaining and informative, I hope you will too.&lt;/p&gt;

&lt;p&gt;Tune in here:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/goQ9ppGwrEo&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>ElastiFlow Template VM</title>
      <link>https://forwardingplane.net/post/elastiflow-template-vm/</link>
      <pubDate>Sun, 08 Sep 2019 18:11:58 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/elastiflow-template-vm/</guid>
      <description>&lt;p&gt;Flow data is a critical piece of understanding how your network works what what it is actively doing. It also provides a great baseline and capacity planning tool. However, some of the more feature rich NetFlow and/or sFlow collectors can be quite daunting in their cost and/or complexity to install. &lt;a href=&#34;https://github.com/robcowart/elastiflow&#34;&gt;ElastiFlow&lt;/a&gt; is a great alternative for flow analytics and is built on the well traveled and robust &lt;a href=&#34;https://www.elastic.co/start?ultron=[EL]-[B]-[AMER]-US+CA-Exact&amp;amp;blade=adwords-s&amp;amp;Device=c&amp;amp;thor=elastic%20stack&amp;amp;gclid=EAIaIQobChMIuKC5xefB5AIVCYnICh0wEg5lEAAYASAAEgIp_fD_BwE&#34;&gt;ElasticStack&lt;/a&gt;, meaning, its back end is well documented, well supported, and scales exceptionally well. For those that would like to play around with this but don&amp;rsquo;t want to take the time to install it (see below for the instruction set I used), I have provided a simple VM to toy around with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2019/09/Screen-Shot-2019-09-07-at-11.00.35-PM-1024x704.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Included here is a vanilla Ubuntu 18 LTS VM with a basic &lt;a href=&#34;https://github.com/robcowart/elastiflow&#34;&gt;Elastiflow&lt;/a&gt; install. This includes all of the components of an ElasticStack plus the front end pieces of the ElastiFlow project. Most of the install is based on &lt;a href=&#34;https://www.catapultsystems.com/blogs/install-elastiflow-on-ubuntu-18-04-part-1/&#34;&gt;this&lt;/a&gt; how-to. &lt;/p&gt;

&lt;p&gt;Included in the image is also a base install of NGINX and certbot so that you can reverse proxy the access and have a valid SSL certificate. There are a plethora of guides on how to accomplish that task on the internet.&lt;/p&gt;

&lt;p&gt;This was build and validated on Proxmox 6.0.6 but should be able to run on VMWare as well with a bit of qemu-img conversion. As expected, ElastiFlow (and ElasticStack) are fairly resource hungry. 16G of Memory and a handful of CPU cores is the bare minimum to run this with any real efficiency. Additionally, Ubuntu 18 has changed how the networking is setup - it is all located in /etc/netplan/ now.   &lt;/p&gt;

&lt;p&gt;Login Information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User Name: root
Password: elastiflow
Privileged user: elastiflow
Password: elastiflow  

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Default IP addresses:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10.255.255.5/27
2001:db8:ffff:2::5/64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the image &lt;a href=&#34;https://drive.google.com/open?id=1ga_Pj2j6h1ce9rcT7jQjncpVjLIC4X4t&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic automation for WISPs and small to medium ISPs</title>
      <link>https://forwardingplane.net/post/basic-automation-for-wisps-and-small-to-medium-isps/</link>
      <pubDate>Mon, 29 Jul 2019 09:39:35 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/basic-automation-for-wisps-and-small-to-medium-isps/</guid>
      <description>&lt;p&gt;Small to medium ISPs are an interesting phenomenon. Early in my career I was pretty heavily involved in that space, so much of my current thought processes and methodologies are heavily informed by that experience. Something that never ceases to amaze me today is that the practice of scripting and “automating” things seems to have become somewhat of a lost art, or at the very least it is not part of an initial deployment plan. As I learned to operate a network at scale and with efficiency, we used a significant amount of perl to automate repetitive tasks such as user creation for ppp profiles, provisioning DSL CPE, checking status of PRI and ATM VPCs, etc. In the many years that have passed since my introduction to ISP architecture and operation, the internet has gone from a luxury item to a required utility. In this lapsed time, specialization in networking has become far more prevalent and the generalist role has been significantly diminished. With that specialization and commoditization of IT, the prevalence of the network engineer that could write code became more and more uncommon. Then came “automation”. As we realized that the ubiquitous nature of IT systems and services was only going to increase, automation platforms and companies operating those platforms started to spring up. No longer was there a need to learn hardcore perl, python, shell programming. There were frameworks such as &lt;a href=&#34;https://cfengine.com/&#34;&gt;cfengine&lt;/a&gt;, &lt;a href=&#34;https://puppet.com/&#34;&gt;puppet&lt;/a&gt;, &lt;a href=&#34;https://www.saltstack.com/&#34;&gt;salt&lt;/a&gt;, and &lt;a href=&#34;https://www.ansible.com/&#34;&gt;ansible&lt;/a&gt; that could abstract some of that away and provide significant functionality in addition. I did extensive work with cfengine and did production deployments of salt. In addition, I was around for production deployments of puppet, but it wasn’t until I played with Ansible a few years ago that I got really interested in the automation space - but not really automation, per se. It was far more interesting to me to work on orchestrating workflows. Ansible was perfect for this due to its extreme flexibility and its ability to natively talk to network hardware. So I wrote some Ansible. Then I was informed that my ansible was poor form (which it definitely was). At that point I spent some time learning and playing. Then other things came along and I set it aside for a few years. Well, this past month my interest has ben re-ignited (mainly due to the inclusion of a &lt;a href=&#34;https://docs.ansible.com/ansible/latest/network/user_guide/platform_routeros.html&#34;&gt;mikrotik routeos ansible module&lt;/a&gt;). I spent some time with my &lt;a href=&#34;https://twitter.com/samoehlert&#34;&gt;local ansible guru&lt;/a&gt; and he taught me the best practices and from there I was off to the races. After a bit of re-education, I have compiled a few very simple ansible roles and playbooks focused mostly on the WISP world (because I have a lot of this type of gear in my lab), but I fully expect to expand on them greatly as they are all part of a larger bunch of orchestration parts that I have been writing at night and in my free time. Until then, please feel free to use, modify, or provide patches / input for what I have published thus far. &lt;img src=&#34;https://www.forwardingplane.net/wp-content/uploads/2019/07/transparent-ansible-logo.png&#34; alt=&#34;Transparent ansible logo&#34; title=&#34;transparent-ansible-logo.png&#34; /&gt; &lt;a href=&#34;https://github.com/buraglio/mikrotik-armor&#34;&gt;mikrotik-armor&lt;/a&gt; Simple Ansible role and playbook to harden a Mikrotik RouterOS device &lt;a href=&#34;https://github.com/buraglio/upgrade-mikrotik-routeros&#34;&gt;upgrade-mikrotik-routeros&lt;/a&gt; Simple Ansible playbook and role for setting a software channel and upgrading RouterOS on mikrotik devices &lt;a href=&#34;https://github.com/buraglio/ubnt-airos-tshaper&#34;&gt;ubnt-airos-tshaper&lt;/a&gt; Ansible playbooks to enable and configure the traffic shaper on Ubiquity AirOS CPE&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The BGP conundrum</title>
      <link>https://forwardingplane.net/post/the-bgp-conundrum/</link>
      <pubDate>Sun, 30 Jun 2019 02:15:32 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/the-bgp-conundrum/</guid>
      <description>&lt;p&gt;BGP. It’s that magical protocol that runs the internet. For for as much as BGP is a fundamental, critical, irreplaceable part of the core functioning of the internet, it is a protocol that has not aged well as far as security is concerned. See, BGP was born when the internet was really still an academic experiment. Handshakes and loose agreements were totally fine for connecting a new site. &lt;/p&gt;

&lt;p&gt;Then came the awakening. &lt;img src=&#34;https://www.forwardingplane.net/wp-content/uploads/2019/06/Awakening.jpg&#34; alt=&#34;Awakening&#34; title=&#34;Awakening.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once the internet was used for more critical things, security was obviously more important. But BGP did not really evolve at the same rate - and more importantly, the security model surrounding it was mostly left behind. The reasons aren&amp;rsquo;t really important, but the fallout absolutely is. Retrofitting security into an externally exposed protocol is demonstrably difficult. It has been &lt;a href=&#34;https://tools.ietf.org/html/rfc8205&#34;&gt;tried&lt;/a&gt; and &lt;a href=&#34;https://tools.ietf.org/html/rfc6810&#34;&gt;tried&lt;/a&gt; and &lt;a href=&#34;https://tools.ietf.org/id/draft-sa-grow-maxprefix-00.html&#34;&gt;tried&lt;/a&gt; and &lt;a href=&#34;https://www.radb.net/&#34;&gt;tried&lt;/a&gt;. The real limit in this space exists because of the nature of the protocol itself - it is external in nature, thereby requiring coordination between multiple parties. The mechanics of this are two fold: personal interaction to agree on the peering, and technical compliance for the protocol to adhere to the agreed upon policy.&lt;/p&gt;

&lt;p&gt;Technical limitations imposed by vendors and hardware limits have plagued this space for decades. However, the real problem, as with most things technical, is actually the people. A reluctance to agree on methodology, a refusal to spend the time to work out the procedures, an inability or lack of resources for understanding the steps necessary, an unwillingness (intentional or unintentional) to help the community further the progress. None of this really matters other than knowing where we can improve. So, to that end, I humbly recommend that all BGP operators read and implement best practices. Much of this is spelled out clearly in the &lt;a href=&#34;https://www.manrs.org/isps/&#34;&gt;MANRS project&lt;/a&gt;, and it should be used as a shining example of community based action that can produce actual demonstrable results. If you’re interested in tools for troubleshooting BGP or better understanding the scope and scale of the DFZ (Default Free Zone), check out a past post I did on &lt;a href=&#34;https://www.forwardingplane.net/2014/03/bgp-tools-troubleshooting-and-monitoring-external-routing-in-a-nutshell/&#34;&gt;BGP tools,&lt;/a&gt; &lt;a href=&#34;https://www.forwardingplane.net/2016/05/bgp-rpki-why-arent-we-using-it/&#34;&gt;RPKI&lt;/a&gt;, and &lt;a href=&#34;https://www.forwardingplane.net/2018/02/strategy-series-view-outside-network/&#34;&gt;visibility outside of your network.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As a follow on to the last global BGP blunder, &lt;a href=&#34;https://twitter.com/bcjordo?lang=en&#34;&gt;Jordan Martin&lt;/a&gt; and I talk about the how and the what of the event in this quick &lt;a href=&#34;https://thenetworkcollective.com/2019/06/bgp-blunder/&#34;&gt;Network Collective short take&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a dynamic security infrastructure [in a box - with SDN]</title>
      <link>https://forwardingplane.net/post/building-a-dynamic-security-infrastructure-in-a-box-with-sdn/</link>
      <pubDate>Wed, 29 May 2019 18:17:13 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-a-dynamic-security-infrastructure-in-a-box-with-sdn/</guid>
      <description>&lt;p&gt;Years ago I wrote about building a &lt;a href=&#34;https://www.forwardingplane.net/2013/07/building-a-secured-network-in-a-box/&#34;&gt;secure network in a box&lt;/a&gt;. Over a weekend I decided to revisit this concept thanks to a colleague at work wanting to do something similar. It got me thinking “a lot has changed since I last did this” and it felt like time to revisit it. Well, disappointment wasn’t in the cards because it’s easier, smarter, and more flexible now that it was back then. As I noted back in 2013 when I wrote that last post, OVS was a lot less well traveled and, frankly, there was not a reasonable controller that I could use in production for OpenFlow integration. I’ve since standardized on &lt;a href=&#34;https://www.proxmox.com/en/&#34;&gt;ProxMox&lt;/a&gt; for my lab and production virtualization and have espoused on every available occasion the usefulness of the &lt;a href=&#34;https://www.faucet.nz&#34;&gt;Faucet SDN controller&lt;/a&gt;. Both play fundamental roles in this project. This is significantly easier than I expected - primarily due to the use of faucet for controlling the OVS switch. It’s fairly straightforward, so I won’t go into the step by step details here since the projects have good install and support docs. Proxmox has support for OVS, so just install it using apt and create an OVS switch in the GUI interface. Faucet has &lt;a href=&#34;https://docs.faucet.nz/en/latest/&#34;&gt;amazingly complete documentation&lt;/a&gt; and even a &lt;a href=&#34;https://docs.faucet.nz/en/latest/installation.html#installing-on-raspberry-pi&#34;&gt;raspberry pi image&lt;/a&gt; (if you’re still thinking “OpenFlow is dead, isn’t it?”, have a listen to &lt;a href=&#34;https://blog.ipspace.net/2019/04/using-faucet-to-build-sc18-network-with.html&#34;&gt;this podcast&lt;/a&gt; I did with Ivan Pepelnjak). From there, install a &lt;a href=&#34;https://securityonion.net/&#34;&gt;security option VM&lt;/a&gt; (or any other tool you want to capture data with). Once you have the OVS switch, the controller, and the VM up and running getting data to it is as simple as issuing the comments to configure a controller. I my case the command was:```
sudo ovs-vsctl set-controller vmbr4 tcp:10.16.9.12:6653 tcp:10.16.9.12:6654&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-In my lab design the architecture was as such ![Faucet OVS Proxmox Security](https://www.forwardingplane.net/wp-content/uploads/2019/05/Faucet-OVS-Proxmox-Security.jpg &#34;Faucet OVS Proxmox Security.jpg&#34;) The two switches on the right are physical and span all uplink data via two physical ports into my proxmox host. Everything else is done virtually in OVS. Once you have the controller setup, the data coming in, and the host listening, you can validate you have the correct controller, interfaces and ports in ovs.```&#34; data-lang=&#34;In my lab design the architecture was as such ![Faucet OVS Proxmox Security](https://www.forwardingplane.net/wp-content/uploads/2019/05/Faucet-OVS-Proxmox-Security.jpg &#34;Faucet OVS Proxmox Security.jpg&#34;) The two switches on the right are physical and span all uplink data via two physical ports into my proxmox host. Everything else is done virtually in OVS. Once you have the controller setup, the data coming in, and the host listening, you can validate you have the correct controller, interfaces and ports in ovs.```&#34;&gt;root@pve1:~# ovs-vsctl show
75b4bc7f-4e00-45c2-8919-b043cbaf509d
Bridge &amp;#34;vmbr4&amp;#34;
Controller &amp;#34;tcp:10.16.9.12:6654&amp;#34;
Controller &amp;#34;tcp:10.16.9.12:6653&amp;#34;
is\_connected: true
Port &amp;#34;enx00051ba65ece&amp;#34;
Interface &amp;#34;enx00051ba65ece&amp;#34;
Port &amp;#34;tap115i1&amp;#34;
Interface &amp;#34;tap115i1&amp;#34;
Port &amp;#34;vmbr4&amp;#34;
Interface &amp;#34;vmbr4&amp;#34;
type: internal
Port &amp;#34;eno2&amp;#34;
Interface &amp;#34;eno2&amp;#34;
ovs\_version: “2.7.0&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Listing interfaces in OVS can be a helpful way to aid in building the faucet configuration```
root@pve1:~# ovs-vsctl &amp;ndash;columns=ofport,name list interface
ofport : 65534
name : &amp;ldquo;vmbr4&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 1
name : &amp;ldquo;eno2&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 4
name : &amp;ldquo;tap115i1&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 2
name : &amp;ldquo;enx00051ba65ece&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-For spanning the data into the VM, the basic configuration within faucet looks like this and should reside in /etc/faucet/faucet.yaml. The real meat here is the mirror statement on port 4.```&#34; data-lang=&#34;For spanning the data into the VM, the basic configuration within faucet looks like this and should reside in /etc/faucet/faucet.yaml. The real meat here is the mirror statement on port 4.```&#34;&gt;dps:
    proxovs1:
        dp\_id: 0x51ba65ece
        hardware: &amp;#34;Open vSwitch&amp;#34;
        interfaces:
            65534:
                name: &amp;#34;vmbr4&amp;#34;
                description: &amp;#34;ProxMox OVS vmbr4&amp;#34;
                native\_vlan: servernet
            1:
                name: &amp;#34;eno2&amp;#34;
                description: &amp;#34;Span from sw1&amp;#34;
                native\_vlan: servernet
            2:
                name: &amp;#34;enx00051ba65ece&amp;#34;
                description: &amp;#34;Span from sw2&amp;#34;
                native\_vlan: servernet
            4:
                name: &amp;#34;tap115i1&amp;#34;
                description: &amp;#34;ProxMox OVS vmbr4&amp;#34;
                output\_only: True
                mirror: \[1,2\]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be fairly easily adjusted to mirror all internal, east-west traffic in a virtualization farm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Renaming interfaces under linux</title>
      <link>https://forwardingplane.net/post/renaming-interfaces-under-linux/</link>
      <pubDate>Tue, 28 May 2019 13:23:50 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/renaming-interfaces-under-linux/</guid>
      <description>&lt;p&gt;There are many of us that learned Linux in the very early days, and with that history comes habits. One habit I have is to look for spec interface names. In particular, I prefer to have my interfaces named eth* (with some notables exceptions here). Modern linux systems seem to have adopted the BSD methodology of naming the interfaces based on what it is - and while I did do a fair amount of work in BSD, I still prefer the eth naming scheme. &lt;a href=&#34;https://www.zerotier.com/&#34;&gt;ZeroTier&lt;/a&gt; has the inconsistency of using zt* on some platforms and ztublkahlah on others. I am sure there is a reason, but I prefer consistency. Here are two ways to rename the interfaces. This is on a Debuntu system. Temporarily rename an interface:```
ifconfig ztukuxzo4f down
ip link set ztukuxzo4f name zt0
ifconfig zt0 up&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Rename an interface persistently:```&#34; data-lang=&#34;Rename an interface persistently:```&#34;&gt;vi /etc/udev/rules.d/70-persistent-net.rules&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Append:&lt;code&gt;
SUBSYSTEM==&amp;quot;net&amp;quot;, ACTION==&amp;quot;add&amp;quot;, ATTR{address}==&amp;quot;96:3c:ee:c0:ff:ee&amp;quot;, NAME=&amp;quot;zt0&amp;quot;
&lt;/code&gt;Reboot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rant: toolexplodeaphobia</title>
      <link>https://forwardingplane.net/post/1672/</link>
      <pubDate>Fri, 03 May 2019 13:58:55 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/1672/</guid>
      <description>&lt;p&gt;It’s kinda like having RouteExplorer and Arbor Peakflow. They have a decent overlap but *just* enough difference to want both&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The value of measurements: Network Latency</title>
      <link>https://forwardingplane.net/post/the-value-of-measurements-network-latency/</link>
      <pubDate>Mon, 29 Apr 2019 10:23:32 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/the-value-of-measurements-network-latency/</guid>
      <description>&lt;p&gt;There is no shortage of network telemetry data that can be collected, recorded, graphed, and stored for cross reference and triage. Not one to be underestimated, latency at a can be incredibly powerful when leveraged for baseline and deviation notification. As I have &lt;a href=&#34;https://www.forwardingplane.net/2018/02/strategy-series-view-outside-network/&#34;&gt;eluded to in the past,&lt;/a&gt; there are many tools in this space. &lt;a href=&#34;https://netbeez.net/blog/how-to-leverage-latency-testing-and-long-term-trend-collection/&#34;&gt;I have written about a few of them in detail&lt;/a&gt; and touched on others in passing. Regardless of the tool, the data is powerful and the instrumentation they provide will only serve to make your network more robust and easier to work on. One tool that is particularly easy to set up and utilize is &lt;a href=&#34;https://oss.oetiker.ch/smokeping/&#34;&gt;smokeping&lt;/a&gt;. From the authors site: &lt;em&gt;SmokePing keeps track of your network latency:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Best of breed latency visualisation.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Interactive graph explorer.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Wide range of latency measurement plugins.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Master/Slave System for distributed measurement.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Highly configurable alerting system.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Live Latency Charts with the most &amp;lsquo;interesting&amp;rsquo; graphs.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Free and OpenSource Software written in Perl written by Tobi Oetiker, the creator of MRTG and RRDtool &lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://www.forwardingplane.net/wp-content/uploads/2019/04/download_Comcast_Chicago_last_864000.png&#34; alt=&#34;Download Comcast Chicago last 864000&#34; title=&#34;download_Comcast_Chicago_last_864000.png&#34; /&gt; &lt;em&gt;Comcast SpeedTest.net graph for home network&lt;/em&gt; Now, you may be asking _“why do I need to track latency?_”, well, the data is incredibly powerful and can be indicators of anything from a failing optic to a network compromise. This is especially useful in small to medium sized ISPs (and especially WISPs), where cost of software and operational overhead is at a premium, and customer satisfaction is the currency that is dealt. In fact, I was able to use smokeqping to help diagnose a functional denial of service of a commonly deployed cable CPE as detailed &lt;a href=&#34;https://forums.businesshelp.comcast.com/t5/IPV6/Reproducible-denial-of-service-of-Netgear-CPE-running-native/m-p/31597#M787&#34;&gt;here&lt;/a&gt;. &lt;strong&gt;I can’t emphasize enough how useful long term trend data is.&lt;/strong&gt; Smokeping can be used to monitor more than just ping RTT, it supports a myriad of plugins allowing for application latency of protocols such as DNS queries, http get, ssh daemon response, speed test results, the list of plugins - or as smokeping calls them, probes - goes on and can be found &lt;a href=&#34;https://oss.oetiker.ch/smokeping/probe/index.en.html&#34;&gt;here&lt;/a&gt;. Where this is particularly useful is in simulating customer experience.  As with most things in life, perspective is paramount. To address this, smokeping can also be deployed as a distributed model. Deploying it with installations more local to a customer or in a far flung site, say on a raspberry pi, located in remote POP sides or pedestal locations will provide a closer perspective to what the customer actually sees. In the past I have deployed remote raspberry pi devices in an actual FTTH pedestal connected to an ONT to provide the exact customer point of view and it provided a wealth of information I would not otherwise be able to see. There are a myriad of different instal guides for Smokeping, my recommended starting point is by &lt;a href=&#34;https://github.com/magicdude4eva&#34;&gt;Gerd Naschenweng&lt;/a&gt; and can be found &lt;a href=&#34;https://github.com/magicdude4eva/docker-smokeping&#34;&gt;here&lt;/a&gt;. It provides a docker instance but also has a very good set of configuration files to build examples from. Don’t discount latency data - it’s a powerful set of information for any working network. For anyone interested in seeing a working smokeping installation, mine is public and available to view. It provides a few things such as DNS latency, RTT for v4 and v6, RTT for ZeroTier hosts and RIPE ATLAS probes, etc. It’s a powerful toolkit. My public cloud instance is hosted at &lt;a href=&#34;http://www.prgmr.com&#34;&gt;prgmr.com&lt;/a&gt; and can be found &lt;a href=&#34;https://watcher.forwardingplane.net/smokeping/smokeping.cgi&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Soap Box: Mikrotik &#34;IPv6 Apocalypse&#34;, or maybe not.</title>
      <link>https://forwardingplane.net/post/soap-box-mikrotik-ipv6-apocalypse-or-maybe-not/</link>
      <pubDate>Sun, 31 Mar 2019 17:35:10 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/soap-box-mikrotik-ipv6-apocalypse-or-maybe-not/</guid>
      <description>

&lt;p&gt;Over the last few days there has been a &lt;em&gt;&lt;strong&gt;huge&lt;/strong&gt;&lt;/em&gt; amount of FUD and panic surrounding two as-yet-to-be-published CVEs (found &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19298&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19299&#34;&gt;here&lt;/a&gt;) related to Mikrotik&amp;rsquo;s IPv6 implementation.It is my opinion that this entire process has been poorly handled, and that the community involved tends to be fairly sensitive to issues such as, and the cloak and dagger nature of the two issues has only exacerbated it. Mikrotik, as a company, is well known for being terse in their responses and tight lipped with their internal workings and dealings with these kinds of issues. I take that as a given, that’s their business and realistically we’re entitled to know exactly none of that information, even if it would be nice to have it. The history behind this is discouraging, the original discovery was quite some time ago with reports dating back to 2013, and the person who originally uncovered the issues did so upwards of a year ago, bringing them to Mikrotik at that time, as can be seen in this &lt;a href=&#34;https://forum.mikrotik.com/viewtopic.php?f=2&amp;amp;t=125841&amp;amp;p=654116&amp;amp;hilit=ndpexhaust26#p654116&#34;&gt;thread&lt;/a&gt;. Now, anyone with a passing knowledge of pen testing or IPv6 device load testing can trivially put together the information needed to decipher the problem and replicate it, neither are exactly complicated or &lt;a href=&#34;https://insinuator.net/2013/03/ipv6-neighbor-cache-exhaustion-attacks-risk-assessment-mitigation-strategies-part-1/&#34;&gt;new&lt;/a&gt;. Both can be done in literally one line of &lt;a href=&#34;https://tools.kali.org/information-gathering/thc-ipv6&#34;&gt;common, open source toolkits.&lt;/a&gt; The issues are not magical and are not even esoteric or cryptic. They are very straightforward, and by reading the threads and understanding how things like route caches and &lt;a href=&#34;https://en.wikipedia.org/wiki/Neighbor_Discovery_Protocol&#34;&gt;neighbor discovery&lt;/a&gt; work, they become very clear. Since this is IPv6 related I am very interested in it because I feel that WISPs and emerging markets are an excellent environment for moving IPv6 forward, and the equipment and mindset involved makes that fairly straightforward. Reverse engineering these given the information available is pretty straightforward, and &lt;a href=&#34;https://www.iparchitechs.com/&#34;&gt;folks other than me have done it&lt;/a&gt; too. I personally do not consider either of these a security vulnerability or a bug, per se. They’re both the result of a short sighted protocol implementation resulting in a very acute, unfortunate event. With the benefit of hindsight, and as an outsider, I can only wonder if this had been handled differently (i.e. not framed as a critical security vulnerability but rather a broken protocol), if the hysteria that resulted could have been quelled. On a &lt;a href=&#34;https://forum.mikrotik.com/viewtopic.php?f=2&amp;amp;t=147048&amp;amp;start=50&#34;&gt;particular forum thread,&lt;/a&gt; this was likened to the discovery of the “ping of death”, and that feels like a good analogy to me.  It probably should have been handled that way. So, I will post my .02 as to how this kind of even can be handled in the future, in case there is no better process to work with: 1. Involve the vendor early. 2. Involve a trusted third party to validate the result. It’s very easy to miss trees when you’re stuck in a forest. 3rd party validation is pretty important either way as it proves a problem can be repeated independently. 3. Disclose the environment hardware, in detail, that was used to test and confirm the the issue in. 4. Have both validated it with said trusted, embargoed outside source(s). Again, ideally one is the vendor. 5. If unable to define and at least indicate that there is a remediation, leverage outside trusted source to &lt;strong&gt;make sure that’s not possible&lt;/strong&gt;. In this case, that seems to be kept between the person who discovered it and the vendor, which as discussed above has a track record of being pretty closed off. For this particular issue and platform, one can monitor the IPv6 route-cacheing near real-time, here is the command to do it at 1 second intervals```
[buraglio@gw] &amp;gt; /ipv6 route cache print interval=1
cache-size: 190max-cache-size: 1024000&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-The ND issue can be mitigated with the following command (obviously adjusted for your own environment).```&#34; data-lang=&#34;The ND issue can be mitigated with the following command (obviously adjusted for your own environment).```&#34;&gt;/ipv6 firewall filter
add action=drop chain=forward connection-mark=drop connection-state=new
/ipv6 firewall mangle
add action=accept chain=prerouting connection-state=new dst-address=\\
2001:db8:3::/64 limit=2,5:packet
add action=mark-connection chain=prerouting connection-state=new dst-address=\\
2001:db8:3::/64 new-connection-mark=drop passthrough=yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And for those more interested in the actual process, here is a video demonstrating the basic route-cache issue (commands, although very easy to figure out are obfuscated)&lt;/p&gt;

&lt;p&gt;Mikrotik has released a fix as of this morning (4/1/2019), although it is currently beta. ROS 6.45 addresses both the route cache and the neighbor table issue. More details on the discovery will be &lt;a href=&#34;https://indico.uknof.org.uk/event/46/contributions/speakers&#34;&gt;disclosed at the UKNOF conference&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;my-take&#34;&gt;My take:&lt;/h4&gt;

&lt;p&gt;A problem like this that is as egregious as described needs to be independently validated and ideally a remediation found before disclosure. If a mitigation strategy does not exist, the $vendor takes responsibility by default and realistically, nothing can be done until they fix it. It may also be disclosed as a zero-day-style, weaponized tactic. Obviously that is the worst case. The real point is that we’re a community, and we need to build the trust frameworks to work together on issues such as this without pointing fingers or running around with our hands waving. This behavior is, sadly, pretty easy to re-create. There is an old thread that implies some of this was triggered by &amp;ldquo;real traffic&amp;rdquo;, and I have definitely seen an uptick in ipv6 scanning that impacts major vendor router platforms to the point that they get salty about traffic flows and spike CPUs. This feels pretty darned similar, but not the catastrophic event horizon it&amp;rsquo;s being played out to be. It&amp;rsquo;s still bad, it stinks, and it&amp;rsquo;s definitely been handled in a way that is less than optimal. I would also like to point out a few things since there has been a fair amount of hair on fire panic. I realize I am being a tad pedantic, but it&amp;rsquo;s important to identify things correctly in order to handle them in the correct manner. This is not a security vulnerability as I would describe it. There is no remote or local execution of code, no raised privileges, no mechanism of compromise. I don&amp;rsquo;t think this is a software bug, either. It&amp;rsquo;s close, but in reality what this is is a poorly implemented protocol that had what I can only believe was a poverty of testing before release and as such allows for a remotely triggered denial of service. Denial of service isn&amp;rsquo;t necessarily malicious, it just means exactly what it says: service is denied. As mentioned earlier in the thread, this is like the old ping of death issue: a poorly executed stack. I&amp;rsquo;d like to know who has executed this in the wild and how far back this goes in their code train, references go back as far as 2013, but I suspect they go back to the original support.&lt;/p&gt;

&lt;h4 id=&#34;update&#34;&gt;-&amp;mdash; UPDATE&lt;/h4&gt;

&lt;p&gt;Mikrotik has addressed this issue with the release of ROS 6.44.2. The prior methodologies no longer exhaust resources and reload devices, as can be seen here&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ISC dhcp and dhcpv6 relay</title>
      <link>https://forwardingplane.net/post/dhcp-and-dhcpv6-relay/</link>
      <pubDate>Sat, 16 Mar 2019 16:00:52 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/dhcp-and-dhcpv6-relay/</guid>
      <description>&lt;p&gt;When deploying dual stack, dhcpv6 is a crucial piece of the puzzle.  I personally prefer to run the dhcp process on a linux system and relay it for both v4 and v6. &lt;/p&gt;

&lt;p&gt;Assuming you are installing isc-dhcpd, the following configurations can be used to delegate host addresses for both IPv4 and IPv6&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#  
\# Sample configuration file for ISC dhcpd for Debian / Ubuntu  
\# Examples provided without support by buraglio@forwardingplane.net  
\# Use at your own risk  
\# https://www.forwardingplane.net  
#  
\# Attention: If /etc/ltsp/dhcpd.conf exists, that will be used as  
\# configuration file instead of this file.  
#  
#  
  
\# The ddns-updates-style parameter controls whether or not the server will  
\# attempt to do a DNS update when a lease is confirmed. We default to the  
\# behavior of the version 2 packages (&#39;none&#39;, since DHCP v2 didn&#39;t  
\# have support for DDNS.)  
ddns-update-style none;  
  
  
default-lease-time 259200;  
max-lease-time 345600;  
  
\# If this DHCP server is the official DHCP server for the local  
\# network, the authoritative directive should be uncommented.  
authoritative;  
  
\# Use this to send dhcp log messages to a different log file (you also  
\# have to hack syslog.conf to complete the redirection).  
log-facility local7;  
  
\# No service will be given on this subnet, but declaring it helps the   
\# DHCP server to understand the network topology. Errors will occur if not set,   
\# but functionality will remain intact  
  
#subnet 10.152.187.0 netmask 255.255.255.0 {  
#}  
  
\# Primary LAN Scope  
  
subnet 10.254.209.0 netmask 255.255.255.192 {  
range 10.254.209.30 10.254.209.57;  
option routers 10.254.209.1;  
#option domain-name-servers resolver.anycast.my-isp.net, resolver2.dc1.my-isp.net;  
option domain-name-servers resolver.anycast.my-isp.net;  
#option domain-name-servers 10.254.209.14;  
option domain-name &amp;quot;dhcp.my-isp.net&amp;quot;;  
}  
  
\# LAN scope 1  
subnet 10.254.3.0 netmask 255.255.255.224 {  
range 10.254.3.10 10.254.3.25;  
option routers 10.254.3.1;  
option domain-name-servers resolver.anycast.my-isp.net;  
option domain-name &amp;quot;dhcp.my-isp.net&amp;quot;;  
}  
  
\# POP scope 1  
subnet 10.254.5.0 netmask 255.255.255.224 {  
range 10.254.5.10 10.254.5.25;  
option routers 10.254.5.1;  
option domain-name-servers resolver.anycast.my-isp.net;  
option domain-name &amp;quot;dhcp.my-isp.net&amp;quot;;  
}  
  
\# POP Scope 2  
subnet 10.254.6.0 netmask 255.255.255.224 {  
range 10.254.6.5 10.254.6.27;  
option routers 10.254.6.1;  
option domain-name-servers resolver.anycast.my-isp.net;  
option domain-name &amp;quot;dhcp.my-isp.net&amp;quot;;  
}  
  
\# POP Scope 3  
subnet 10.254.7.0 netmask 255.255.255.224 {  
range 10.254.7.10 10.254.7.25;  
option routers 10.254.7.1;  
#option domain-name-servers resolver1.opendns.com, resolver1.ipv6-sandbox.opendns.com;  
option domain-name-servers resolver.anycast.my-isp.net;  
option domain-name &amp;quot;dhcp.my-isp.net&amp;quot;;  
}  
  
\# POP Scope 4  
subnet 10.254.4.0 netmask 255.255.255.224 {  
range 10.254.4.10 10.254.4.25;  
option routers 10.254.4.1;  
option domain-name-servers resolver.anycast.my-isp.net;  
option domain-name &amp;quot;dhcp.my-isp.net&amp;quot;;  
}  
  
\# POP Scope 5  
subnet 10.254.8.0 netmask 255.255.255.224 {  
range 10.254.8.3 10.254.8.30;  
option routers 10.254.8.1;  
option domain-name-servers resolver.anycast.my-isp.net;  
option domain-name &amp;quot;dhcp.my-isp.net&amp;quot;;  
}  
  
\# POP Scope 6  
subnet 10.254.9.0 netmask 255.255.255.224 {  
range 10.254.9.10 10.254.9.25;  
option routers 10.254.9.1;  
option domain-name-servers resolver.anycast.my-isp.net;  
option domain-name &amp;quot;dhcp.my-isp.net&amp;quot;;  
}  
  
\# Static IPv4 addresses  
  
host business-customer1 {  
hardware ethernet ff:ff:ff:f3:3d:9f;  
fixed-address 10.254.4.9;  
}  
  
host business-customer2 {  
hardware ethernet ff:ff:ff:f3:3d:90;  
fixed-address 10.254.4.11;  
}  
  
host business-customer3 {  
hardware ethernet ff:ff:ff:f3:3d:9a;  
fixed-address 10.254.209.5;  
}  
  
host wap1 {  
hardware ethernet ff:ff:ff:40:d6:b0;  
fixed-address 10.254.209.4;  
}  
  
host wap2 {  
hardware ethernet ff:ff:ff:46:76:DC;  
fixed-address 10.254.209.7;  
}  
  
host wap3 {  
hardware ethernet ff:ff:ff:1d:d1:6a;  
fixed-address 10.254.209.3;  
}  
  
  

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For IPv6, this configuration will provide host addresses to any devices requesting them&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  
#  
\# Sample configuration file for ISC dhcpd for Debian / Ubuntu  
\# Examples provided without support by buraglio@forwardingplane.net  
\# Use at your own risk  
\# https://www.forwardingplane.net  
#  
  
default-lease-time 600;  
max-lease-time 7200;   
log-facility local7;   
authoritative;  
  
  
\# Primary LAN IPv6 Scope  
  
option dhcp6.name-servers 2001:db8:f00d::e9::a;  
option dhcp6.domain-search &amp;quot;dhcp.my-isp.net&amp;quot;;  
  
option dhcp6.info-refresh-time 21600;  
  
\# The subnet where the server is attached  
subnet6 2001:db8:f00d::e9::/64 {  
range6 2001:db8:f00d::e9:d::2 2001:db8:f00d::e9:d::ffff;  
}  
  
\# Other Nets  
  
\# Primary LAN Scope  
option dhcp6.name-servers 2001:db8:f00d::e9::a;  
option dhcp6.domain-search &amp;quot;dhcp.my-isp.net&amp;quot;;  
option dhcp6.info-refresh-time 21600;  
  
subnet6 2001:db8:f00d::e0::/64 {  
range6 2001:db8:f00d::e0:d::2 2001:db8:f00d::e0:d::ffff;  
}  
  
\# Pop scope 4  
option dhcp6.name-servers 2001:db8:f00d::e9::a;  
option dhcp6.domain-search &amp;quot;dhcp.my-isp.net&amp;quot;;  
option dhcp6.info-refresh-time 21600;  
  
subnet6 2001:db8:f00d::e4::/64 {  
range6 2001:db8:f00d::e4:d::2 2001:db8:f00d::e4:d::ffff;  
}  
  
\# Pop Scope 5  
  
option dhcp6.name-servers 2001:db8:f00d::e9::a;  
option dhcp6.domain-search &amp;quot;dhcp.my-isp.net&amp;quot;;  
option dhcp6.info-refresh-time 21600;  
subnet6 2001:db8:f00d::e8::/64 {  
range6 2001:db8:f00d::e8:d::2 2001:db8:f00d::e8:d::ffff;  
}  
  
\# Pop Scope 2  
option dhcp6.name-servers 2001:db8:f00d::e9::a;  
option dhcp6.domain-search &amp;quot;dhcp.my-isp.net&amp;quot;;  
option dhcp6.info-refresh-time 21600;  
subnet6 2001:db8:f00d::e6::/64 {  
range6 2001:db8:f00d::e6:d::2 2001:db8:f00d::e6:d::ffff;  
}  
  
\# Pop scope 3  
option dhcp6.name-servers 2001:db8:f00d::e9::a;  
option dhcp6.domain-search &amp;quot;dhcp.my-isp.net&amp;quot;;  
option dhcp6.info-refresh-time 21600;  
subnet6 2001:db8:f00d::e7::/64 {  
range6 2001:db8:f00d::e7:d::2 2001:db8:f00d::e7:d::ffff;  
}  
  
\# Fixed host section  
  
\# this needs fixed  
#host host1 {  
\# #host-identifier option dhcp6.client-id &amp;quot;\\000\\000\\000\\000\\000\\001\\000\\001 ;\\232\\351h\[5\\204\\270\\024&amp;quot;;  
\# host-identifier option dhcp6.client-id &amp;quot;00010001 203b9ae9 685b3584 b814&amp;quot;;  
\# fixed-address6 2001:db8:f00d::e0:0:d::9;  
\# }  
  
#}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;# For most ISPs, you&amp;rsquo;ll want to delegate prefixes. ARIN recommends a /48 but in most cases the de facto standard is a /59 or /56. These are significantly more sane # # prefixes. A single /64 is not sufficient, and basic IPv6 connectivity should *never* be a revenue generating option.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\# dhcpv6-pd - this needs to match the ipv6 scope of the interface, given here as a poor example that needs adjusted  
\# delegate /56&#39;s from this /40 block (65K /56&#39;s, a /56 is 256 /64&#39;s)  
prefix6 2001:db8:f00d::  2001:db8:ff00:: /56;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This linux configuration can be leveraged by any modern router, below is the Mikrotik configuration.&lt;/p&gt;

&lt;p&gt;For IPv6, please note that the managed flag must be set for relay, and that you may not want to set that flag for all interfaces depending on your environment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ipv6 dhcp-relay  
add dhcp-server=2001:db8:f00d:e9::a interface=sfpplus1.4 name=vlan4-dhcpv6  
add dhcp-server=2001:db8:f00d:e9::a interface=sfpplus1 name=vlan0-dhcpv6  
add dhcp-server=2001:db8:f00d:e9::a interface=sfpplus1.6 name=vlan6-dhcpv6  
add dhcp-server=2001:db8:f00d:e9::a interface=sfpplus1.5 name=vlan5-dhcpv6  
add dhcp-server=2001:db8:f00d:e9::a interface=sfpplus1.7 name=vlan7-dhcpv6  
add dhcp-server=2001:db8:f00d:e9::a interface=sfpplus1.9 name=vlan9-dhcpv6  
add dhcp-server=2001:db8:f00d:e9::a interface=sfpplus1.8 name=vlan8-dhcpv6  
  
/ipv6 nd  
set \[ find default=yes \] managed-address-configuration=yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For IPv4:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ip dhcp-relay  
add dhcp-server=10.254.9.10 disabled=no interface=sfpplus1.9 local-address=10.254.9.1 name=dhcp-vlan9  
add dhcp-server=10.254.9.10 disabled=no interface=sfpplus1.8 local-address=10.254.8.1 name=dhcp-vlan8  
add dhcp-server=10.254.9.10 disabled=no interface=sfpplus1.6 local-address=10.254.6.1 name=dhcp-vlan6  
add dhcp-server=10.254.9.10 disabled=no interface=sfpplus1.4 local-address=10.254.4.1 name=dhcp-vlan4  
add dhcp-server=10.254.9.10 disabled=no interface=sfpplus1.7 local-address=10.254.7.1 name=dhcp-vlan7  
add dhcp-server=10.254.9.10 disabled=no interface=sfpplus1 local-address=10.254.209.1 name=dhcp-vlan209
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Enabling LLDP</title>
      <link>https://forwardingplane.net/post/enabling-lldp/</link>
      <pubDate>Thu, 07 Mar 2019 02:00:11 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/enabling-lldp/</guid>
      <description>&lt;p&gt;Enabling LLDP can aid in understanding network and system topologies, I am very much in favor of running it and largely dismiss the perceived security issues surrounding it, when done correctly and with full knowledge of what it is being enabled.&lt;/p&gt;

&lt;p&gt;Enable LLDP on a SROS based Nokia (formerly Alcatel-Lucent). It is per physical port, so replace 1/1/1 with your physical port and replicate on every port you want it to run on&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/configure port 1/1/1 ethernet lldp dest-mac nearest-bridge tx-mgmt-address system   
/configure port 1/1/1 ethernet lldp dest-mac nearest-bridge tx-tlvs port-desc sys-name sys-cap sys-desc   
/configure port 1/1/1 ethernet lldp dest-mac nearest-bridge admin-status tx-rx 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable LLDP on a Juniper is by interface or global&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set protocols lldp advertisement-interval 30   
set protocols lldp interface all   

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mikrotik switch to LLDP as the discovery protocol in 6.something. MNDP/LLDP is on by default but can be changed by configuring the discover-interface-list&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ip neighbor discover-interface-list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Brocade VDX. This is a little dated but I suspect it&amp;rsquo;s still correct.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conf t   
protocol lldp   
 hello 180   
 advertise dcbx-tlv   
 advertise optional-tlv management-address   
 advertise optional-tlv port-description   
 advertise optional-tlv system-capabilities   
 advertise optional-tlv system-description   
 advertise optional-tlv system-name   
 system-name dnoc960-sw1-mgmt   
 system-description Brocade VDX switch   
exit  
copy running-config startup-config 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ubuntu / Debian Linux&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt install lldpd  
service lldpd start
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>FreeRouter as a test environment</title>
      <link>https://forwardingplane.net/post/freertr-as-a-lab-environment/</link>
      <pubDate>Sat, 02 Mar 2019 17:03:18 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/freertr-as-a-lab-environment/</guid>
      <description>&lt;p&gt;A few months ago &lt;a href=&#34;https://www.stubarea51.net/about-me/&#34;&gt;Kevin Myers&lt;/a&gt; of &lt;a href=&#34;https://www.iparchitechs.com/&#34;&gt;IP Architechs&lt;/a&gt; introduced me to a really interesting project called &lt;a href=&#34;http://freerouter.nop.hu/&#34;&gt;FreeRouter&lt;/a&gt;. Being that I absolutely love alternative routing platforms and feature complete simulation environments, this really got me going. I tend to define &amp;ldquo;feature complete&amp;rdquo; in a routing platform as something that can do both IS-IS and MPLS. Given that there aren&amp;rsquo;t many platforms that do both correctly or within a reasonable budget, and offer simulation options, I was pretty excited. I spent a fair amount of time pounding through it. I recommend spending some time with this if you have even remote interest in any of the above technologies. It costs nothing but your time. The project was written and is maintained by a Cisco CCIE and was built (according to his site) as a mechanism to learn. However, the feature list is incredibly complete, and extremely impressive, as seen below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;forwarding: ipv4, ipv6, ipx, mpls, nsh, layer2, irb, atom, eompls, vpls, evpn  
routing protocols: ospf, isis, bgp, rip, eigrp, babel, olsr, pim, msdp  
lsp support: p2p, p2mp, mp2mp built by ldp, rsvp-te, sr, sr-te, bier  
crypto: macsec, ipsec, ikev1, ikev2, tls, dtls, ssh, openvpn  
tunnel: gre, ipip, l2tp, pptp, lisp, geneve, nvgre, vxlan, etherip  
encapsulation: ethernet, vlan, nsh, ppp, framerelay, pwether, virtppp, hairpin  
misc: acl, hqos, nat, pbr, srv6, vrrp, hsrp, transproxy, 6to4, rpl, tunnel, vpdn 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.forwardingplane.net/configuration-archive/freertr-basic-configurations/&#34;&gt;My configurations&lt;/a&gt; can be found in the &lt;a href=&#34;https://www.forwardingplane.net/configuration-archive/&#34;&gt;Configuration Archive&lt;/a&gt; section of this site. It is definitely worth your time to check out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeRTR basic configurations</title>
      <link>https://forwardingplane.net/post/freertr-basic-configurations/</link>
      <pubDate>Sat, 02 Mar 2019 17:00:49 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/freertr-basic-configurations/</guid>
      <description>&lt;p&gt;From the &lt;a href=&#34;http://freerouter.nop.hu/&#34;&gt;freertr&lt;/a&gt; website:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;freeRouter is a free, open source router os process  
it speaks routing protocols, and (re)encapsulates packets on interfaces (a huge list of encapsulation and routing test cases can be found under self-test page)since it handles packets itself, it is independent of underlaying os capabilities(optionally, it can export forwarding tables through openflow to external switch)since it is an unprivilegized process, it receives and sends packets through socketsthere are external, privileged processes that place traffic to these sockets(it means that internet can be used as backplane for router processes) the command line tries to mimic the industry standards with one exception: no global routing table: every routedinterface must be in a virtual routing table positive side effect: there are no vrf-awareness questions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As notes in my &lt;a href=&#34;https://www.forwardingplane.net/2019/03/freertr-as-a-lab-environment/&#34;&gt;FreeRTR post&lt;/a&gt;, FreeRTR is a wonderful alternative to labbing up protocols and provides an incredible array of protocol support. Below are my three router test configurations from a basic setup. They should be enough to get you started.&lt;/p&gt;

&lt;p&gt;RTR1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  
   
hostname rtr1   
buggy   
!   
!   
vrf definition host   
exit   
!   
vrf definition vrf1   
rd 1:1   
exit   
!   
router isis4 1   
vrf vrf1   
net-id 48.1111.0000.1111.00   
traffeng-id ::   
is-type both   
redistribute connected   
exit   
!   
router isis6 1   
vrf vrf1   
net-id 48.1111.0000.1111.00   
traffeng-id ::   
is-type both   
segrout 10   
level2 segrout   
level1 segrout   
redistribute connected   
exit   
!   
!   
interface loopback0   
no description   
vrf forwarding vrf1   
ipv4 address 10.99.99.1 255.255.255.255   
ipv6 address 2001:db8:1111::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff   
router isis6 1 enable   
router isis6 1 circuit both   
router isis6 1 segrout index 1   
router isis6 1 segrout node   
no shutdown   
no log-link-change   
exit   
!   
interface loopback1   
no description   
no shutdown   
no log-link-change   
exit   
!   
interface ethernet1   
no description   
lldp enable   
vrf forwarding vrf1   
ipv4 address 10.1.1.1 255.255.255.252   
ipv6 address 2001:db8:1111::2 ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe   
mpls enable   
router isis6 1 enable   
router isis6 1 circuit both   
no shutdown   
no log-link-change   
exit   
!   
interface ethernet2   
no to\_rt2\_ether2   
lldp enable   
vrf forwarding vrf1   
ipv4 address 10.1.4.1 255.255.255.252   
ipv6 address 2001:db8:1114::2 ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe   
mpls enable   
router isis6 1 enable   
router isis6 1 circuit both   
no shutdown   
no log-link-change   
exit   
!   
interface ethernet20001   
no description   
vrf forwarding host   
ipv4 address 10.255.255.254 255.255.255.0   
no shutdown   
no log-link-change   
exit   
!   
line tty1   
no login authentication   
exit   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
alias test bash command attach shell1 socat - exec:sh,ctty,pty,stderr   
alias test bash description   
alias test bash parameter optional   
!   
server telnet host   
security protocol telnet   
no login authentication   
vrf host   
exit   
!   
!   
end 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RTR2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hostname rtr2   
buggy   
!   
!   
vrf definition host   
exit   
!   
vrf definition vrf1   
rd 1:1   
exit   
!   
router isis4 1   
no vrf   
exit   
!   
router isis6 1   
vrf vrf1   
net-id 48.2222.0000.2222.00   
traffeng-id ::   
is-type both   
segrout 10   
level2 segrout   
level1 segrout   
redistribute connected   
exit   
!   
  
  
interface loopback0   
no description   
vrf forwarding vrf1   
ipv4 address 10.99.99.2 255.255.255.255   
ipv6 address 2001:db8:2222::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff   
router isis6 1 enable   
router isis6 1 circuit both   
router isis6 1 segrout index 1   
router isis6 1 segrout node   
no shutdown   
no log-link-change   
exit   
!   
interface ethernet1   
description to\_rtr3\_ether2   
lldp enable   
vrf forwarding vrf1   
ipv4 address 10.1.3.2 255.255.255.252   
ipv6 address 2001:db8:1112::2 ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe   
mpls enable   
router isis6 1 enable   
router isis6 1 circuit both   
no shutdown   
no log-link-change   
exit   
!   
interface ethernet2   
no to\_rt1\_ether2   
lldp enable   
vrf forwarding vrf1   
ipv4 address 10.1.4.2 255.255.255.252   
ipv6 address 2001:db8:1114::3 ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe   
mpls enable   
router isis6 1 enable   
router isis6 1 circuit both   
no shutdown   
no log-link-change   
exit   
  
  
!   
interface ethernet20001   
no description   
vrf forwarding host   
ipv4 address 10.255.255.254 255.255.255.0   
no shutdown   
no log-link-change   
exit   
!   
line tty1   
no login authentication   
exit   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
alias test bash command attach shell1 socat - exec:sh,ctty,pty,stderr   
alias test bash description   
alias test bash parameter optional   
!   
server telnet host   
security protocol telnet   
no login authentication   
vrf host   
exit   
!   
!   
end 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RTR3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hostname rtr3   
buggy   
!   
!   
vrf definition host   
exit   
!   
vrf definition vrf1   
rd 1:1   
exit   
!   
router isis4 1   
vrf vrf1   
net-id 48.3333.0000.3333.00   
traffeng-id ::   
is-type both   
redistribute connected   
exit   
!   
router isis6 1   
vrf vrf1   
net-id 48.3333.0000.3333.00   
traffeng-id ::   
is-type both   
segrout 10   
level2 segrout   
level1 segrout   
redistribute connected   
exit   
!   
interface loopback0   
no description   
vrf forwarding vrf1   
ipv4 address 10.99.99.3 255.255.255.255   
ipv6 address 2001:db8:3333::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff   
router isis6 1 enable   
router isis6 1 circuit both   
router isis6 1 segrout index 1   
router isis6 1 segrout node   
no shutdown   
no log-link-change   
exit   
!   
interface loopback1   
no description   
no shutdown   
no log-link-change   
exit   
!   
!   
interface ethernet1   
description to\_rtr2\_ether1   
lldp enable   
vrf forwarding vrf1   
ipv4 address 10.1.3.1 255.255.255.252   
ipv6 address 2001:db8:1112::3 ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe   
mpls enable   
router isis6 1 enable   
router isis6 1 circuit both   
no shutdown   
no log-link-change   
exit   
!   
interface ethernet2   
description to\_rtr1\_ether1   
lldp enable   
vrf forwarding vrf1   
ipv4 address 10.1.1.2 255.255.255.252   
ipv6 address 2001:db8:1111::3 ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe   
mpls enable   
router isis6 1 enable   
router isis6 1 circuit both   
no shutdown   
no log-link-change   
exit   
!   
interface ethernet20001   
no description   
vrf forwarding host   
ipv4 address 10.255.255.254 255.255.255.0   
no shutdown   
no log-link-change   
exit   
!   
line tty1   
no login authentication   
exit   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
!   
alias test bash command attach shell1 socat - exec:sh,ctty,pty,stderr   
alias test bash description   
alias test bash parameter optional   
!   
server telnet host   
security protocol telnet   
no login authentication   
vrf host   
exit   
!   
!   
end 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Helpful show commands for this basic setup&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; sh ipv4 route vrf1  
 sh ipv6 route vrf1 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Enable Telnet access on MacOS High Sierra</title>
      <link>https://forwardingplane.net/post/enable-telnet-access-on-macos-high-sierra/</link>
      <pubDate>Sat, 02 Mar 2019 16:11:38 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/enable-telnet-access-on-macos-high-sierra/</guid>
      <description>&lt;p&gt;Lots of things changed under the hood in MacOS high sierra. One of those was to enable a sandbox like environment and to remove insecure communication protocols. This breaks things like console communication to the network modeling and virtualization platform &lt;a href=&#34;https://www.eve-ng.net/&#34;&gt;Eve-NG&lt;/a&gt;. It&amp;rsquo;s fairly trivial to re-enable it, however. This can be accomplished by doing the following steps.&lt;/p&gt;

&lt;p&gt;Install &lt;a href=&#34;http://www.homebrew.sh&#34;&gt;Homebrew&lt;/a&gt;. Open your favorite terminal application (I like to use &lt;a href=&#34;https://www.iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; (also installable via homebrew), but Terminal works fine.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1\. Reboot your Mac and hold the CMD + R keys   
2\. When presented with the recovery options, click Utilities at the top and choose Terminal   
3\. Type; csrutil disable   
4\. Reboot as normal   
6\. terminal and type;   
brew install telnet   
sudo ln -s /usr/local/bin/telnet /usr/bin/telnet   
7\. Again, Reboot your Mac and hold the CMD + R keys   
8\. When presented with the recovery options, click Utilities at the top and choose Terminal   
9\. Type; csrutil enable   
10\. Reboot as normal 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;re done. You can have telnet for your internal communication to Eve-NG consoles. &lt;strong&gt;Don&amp;rsquo;t use it to talk to production network gear, because it&amp;rsquo;s not 1998.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic IOS-XR command cheat sheet</title>
      <link>https://forwardingplane.net/post/basic-ios-xr-command-cheat-sheet/</link>
      <pubDate>Wed, 20 Feb 2019 20:05:58 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/basic-ios-xr-command-cheat-sheet/</guid>
      <description>&lt;p&gt;Some basic commands that I have found useful in managing an ASR9K / IOS-XR device. This page is likely to grow and change over time.&lt;/p&gt;

&lt;p&gt;Clear ARP&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clear arp-cache &amp;lt;interface&amp;gt; &amp;lt;IPv4 addr&amp;gt; location all 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BGP&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;show bgp all unicast summary 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BGP Routes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  
show bgp ipv\[4/6\] unicast neighbors &amp;lt;neighbor&amp;gt; received route  
show bgp ipv\[4/6\] unicast advertised neighbor &amp;lt;neighbor&amp;gt;   
show bgp ipv\[4/6\] unicast summary  
show bgp ipv\[4/6\] unicast summary  
clear bgp ipv\[4/6\] unicast &amp;lt;neighbor&amp;gt; soft in  
show bgp all unicast summary  
show bgp ipv\[4/6\] unicast bestpath-compare
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NetFlow&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;show flow exporter _&amp;lt;exporter&amp;gt;_ location 0/RSP0/CPU0 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show all hardware linecards&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;show hw-module fpd location all
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
