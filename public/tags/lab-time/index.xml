<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lab Time on ForwardingPlane.net</title>
    <link>https://forwardingplane.net/tags/lab-time/</link>
    <description>Recent content in Lab Time on ForwardingPlane.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2019, all rights reserved.</copyright>
    <lastBuildDate>Sun, 08 Sep 2019 18:11:58 +0000</lastBuildDate>
    
        <atom:link href="https://forwardingplane.net/tags/lab-time/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ElastiFlow Template VM</title>
      <link>https://forwardingplane.net/post/elastiflow-template-vm/</link>
      <pubDate>Sun, 08 Sep 2019 18:11:58 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/elastiflow-template-vm/</guid>
      <description>&lt;p&gt;Flow data is a critical piece of understanding how your network works what what it is actively doing. It also provides a great baseline and capacity planning tool. However, some of the more feature rich NetFlow and/or sFlow collectors can be quite daunting in their cost and/or complexity to install. &lt;a href=&#34;https://github.com/robcowart/elastiflow&#34;&gt;ElastiFlow&lt;/a&gt; is a great alternative for flow analytics and is built on the well traveled and robust &lt;a href=&#34;https://www.elastic.co/start?ultron=[EL]-[B]-[AMER]-US+CA-Exact&amp;amp;blade=adwords-s&amp;amp;Device=c&amp;amp;thor=elastic%20stack&amp;amp;gclid=EAIaIQobChMIuKC5xefB5AIVCYnICh0wEg5lEAAYASAAEgIp_fD_BwE&#34;&gt;ElasticStack&lt;/a&gt;, meaning, its back end is well documented, well supported, and scales exceptionally well. For those that would like to play around with this but don&amp;rsquo;t want to take the time to install it (see below for the instruction set I used), I have provided a simple VM to toy around with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2019/09/Screen-Shot-2019-09-07-at-11.00.35-PM-1024x704.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Included here is a vanilla Ubuntu 18 LTS VM with a basic &lt;a href=&#34;https://github.com/robcowart/elastiflow&#34;&gt;Elastiflow&lt;/a&gt; install. This includes all of the components of an ElasticStack plus the front end pieces of the ElastiFlow project. Most of the install is based on &lt;a href=&#34;https://www.catapultsystems.com/blogs/install-elastiflow-on-ubuntu-18-04-part-1/&#34;&gt;this&lt;/a&gt; how-to. &lt;/p&gt;

&lt;p&gt;Included in the image is also a base install of NGINX and certbot so that you can reverse proxy the access and have a valid SSL certificate. There are a plethora of guides on how to accomplish that task on the internet.&lt;/p&gt;

&lt;p&gt;This was build and validated on Proxmox 6.0.6 but should be able to run on VMWare as well with a bit of qemu-img conversion. As expected, ElastiFlow (and ElasticStack) are fairly resource hungry. 16G of Memory and a handful of CPU cores is the bare minimum to run this with any real efficiency. Additionally, Ubuntu 18 has changed how the networking is setup - it is all located in /etc/netplan/ now.   &lt;/p&gt;

&lt;p&gt;Login Information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User Name: root
Password: elastiflow
Privileged user: elastiflow
Password: elastiflow  

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Default IP addresses:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10.255.255.5/27
2001:db8:ffff:2::5/64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the image &lt;a href=&#34;https://drive.google.com/open?id=1ga_Pj2j6h1ce9rcT7jQjncpVjLIC4X4t&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic automation for WISPs and small to medium ISPs</title>
      <link>https://forwardingplane.net/post/basic-automation-for-wisps-and-small-to-medium-isps/</link>
      <pubDate>Mon, 29 Jul 2019 09:39:35 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/basic-automation-for-wisps-and-small-to-medium-isps/</guid>
      <description>&lt;p&gt;Small to medium ISPs are an interesting phenomenon. Early in my career I was pretty heavily involved in that space, so much of my current thought processes and methodologies are heavily informed by that experience. Something that never ceases to amaze me today is that the practice of scripting and “automating” things seems to have become somewhat of a lost art, or at the very least it is not part of an initial deployment plan. As I learned to operate a network at scale and with efficiency, we used a significant amount of perl to automate repetitive tasks such as user creation for ppp profiles, provisioning DSL CPE, checking status of PRI and ATM VPCs, etc. In the many years that have passed since my introduction to ISP architecture and operation, the internet has gone from a luxury item to a required utility. In this lapsed time, specialization in networking has become far more prevalent and the generalist role has been significantly diminished. With that specialization and commoditization of IT, the prevalence of the network engineer that could write code became more and more uncommon. Then came “automation”. As we realized that the ubiquitous nature of IT systems and services was only going to increase, automation platforms and companies operating those platforms started to spring up. No longer was there a need to learn hardcore perl, python, shell programming. There were frameworks such as &lt;a href=&#34;https://cfengine.com/&#34;&gt;cfengine&lt;/a&gt;, &lt;a href=&#34;https://puppet.com/&#34;&gt;puppet&lt;/a&gt;, &lt;a href=&#34;https://www.saltstack.com/&#34;&gt;salt&lt;/a&gt;, and &lt;a href=&#34;https://www.ansible.com/&#34;&gt;ansible&lt;/a&gt; that could abstract some of that away and provide significant functionality in addition. I did extensive work with cfengine and did production deployments of salt. In addition, I was around for production deployments of puppet, but it wasn’t until I played with Ansible a few years ago that I got really interested in the automation space - but not really automation, per se. It was far more interesting to me to work on orchestrating workflows. Ansible was perfect for this due to its extreme flexibility and its ability to natively talk to network hardware. So I wrote some Ansible. Then I was informed that my ansible was poor form (which it definitely was). At that point I spent some time learning and playing. Then other things came along and I set it aside for a few years. Well, this past month my interest has ben re-ignited (mainly due to the inclusion of a &lt;a href=&#34;https://docs.ansible.com/ansible/latest/network/user_guide/platform_routeros.html&#34;&gt;mikrotik routeos ansible module&lt;/a&gt;). I spent some time with my &lt;a href=&#34;https://twitter.com/samoehlert&#34;&gt;local ansible guru&lt;/a&gt; and he taught me the best practices and from there I was off to the races. After a bit of re-education, I have compiled a few very simple ansible roles and playbooks focused mostly on the WISP world (because I have a lot of this type of gear in my lab), but I fully expect to expand on them greatly as they are all part of a larger bunch of orchestration parts that I have been writing at night and in my free time. Until then, please feel free to use, modify, or provide patches / input for what I have published thus far. &lt;img src=&#34;https://www.forwardingplane.net/wp-content/uploads/2019/07/transparent-ansible-logo.png&#34; alt=&#34;Transparent ansible logo&#34; title=&#34;transparent-ansible-logo.png&#34; /&gt; &lt;a href=&#34;https://github.com/buraglio/mikrotik-armor&#34;&gt;mikrotik-armor&lt;/a&gt; Simple Ansible role and playbook to harden a Mikrotik RouterOS device &lt;a href=&#34;https://github.com/buraglio/upgrade-mikrotik-routeros&#34;&gt;upgrade-mikrotik-routeros&lt;/a&gt; Simple Ansible playbook and role for setting a software channel and upgrading RouterOS on mikrotik devices &lt;a href=&#34;https://github.com/buraglio/ubnt-airos-tshaper&#34;&gt;ubnt-airos-tshaper&lt;/a&gt; Ansible playbooks to enable and configure the traffic shaper on Ubiquity AirOS CPE&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a dynamic security infrastructure [in a box - with SDN]</title>
      <link>https://forwardingplane.net/post/building-a-dynamic-security-infrastructure-in-a-box-with-sdn/</link>
      <pubDate>Wed, 29 May 2019 18:17:13 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-a-dynamic-security-infrastructure-in-a-box-with-sdn/</guid>
      <description>&lt;p&gt;Years ago I wrote about building a &lt;a href=&#34;https://www.forwardingplane.net/2013/07/building-a-secured-network-in-a-box/&#34;&gt;secure network in a box&lt;/a&gt;. Over a weekend I decided to revisit this concept thanks to a colleague at work wanting to do something similar. It got me thinking “a lot has changed since I last did this” and it felt like time to revisit it. Well, disappointment wasn’t in the cards because it’s easier, smarter, and more flexible now that it was back then. As I noted back in 2013 when I wrote that last post, OVS was a lot less well traveled and, frankly, there was not a reasonable controller that I could use in production for OpenFlow integration. I’ve since standardized on &lt;a href=&#34;https://www.proxmox.com/en/&#34;&gt;ProxMox&lt;/a&gt; for my lab and production virtualization and have espoused on every available occasion the usefulness of the &lt;a href=&#34;https://www.faucet.nz&#34;&gt;Faucet SDN controller&lt;/a&gt;. Both play fundamental roles in this project. This is significantly easier than I expected - primarily due to the use of faucet for controlling the OVS switch. It’s fairly straightforward, so I won’t go into the step by step details here since the projects have good install and support docs. Proxmox has support for OVS, so just install it using apt and create an OVS switch in the GUI interface. Faucet has &lt;a href=&#34;https://docs.faucet.nz/en/latest/&#34;&gt;amazingly complete documentation&lt;/a&gt; and even a &lt;a href=&#34;https://docs.faucet.nz/en/latest/installation.html#installing-on-raspberry-pi&#34;&gt;raspberry pi image&lt;/a&gt; (if you’re still thinking “OpenFlow is dead, isn’t it?”, have a listen to &lt;a href=&#34;https://blog.ipspace.net/2019/04/using-faucet-to-build-sc18-network-with.html&#34;&gt;this podcast&lt;/a&gt; I did with Ivan Pepelnjak). From there, install a &lt;a href=&#34;https://securityonion.net/&#34;&gt;security option VM&lt;/a&gt; (or any other tool you want to capture data with). Once you have the OVS switch, the controller, and the VM up and running getting data to it is as simple as issuing the comments to configure a controller. I my case the command was:```
sudo ovs-vsctl set-controller vmbr4 tcp:10.16.9.12:6653 tcp:10.16.9.12:6654&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-In my lab design the architecture was as such ![Faucet OVS Proxmox Security](https://www.forwardingplane.net/wp-content/uploads/2019/05/Faucet-OVS-Proxmox-Security.jpg &#34;Faucet OVS Proxmox Security.jpg&#34;) The two switches on the right are physical and span all uplink data via two physical ports into my proxmox host. Everything else is done virtually in OVS. Once you have the controller setup, the data coming in, and the host listening, you can validate you have the correct controller, interfaces and ports in ovs.```&#34; data-lang=&#34;In my lab design the architecture was as such ![Faucet OVS Proxmox Security](https://www.forwardingplane.net/wp-content/uploads/2019/05/Faucet-OVS-Proxmox-Security.jpg &#34;Faucet OVS Proxmox Security.jpg&#34;) The two switches on the right are physical and span all uplink data via two physical ports into my proxmox host. Everything else is done virtually in OVS. Once you have the controller setup, the data coming in, and the host listening, you can validate you have the correct controller, interfaces and ports in ovs.```&#34;&gt;root@pve1:~# ovs-vsctl show
75b4bc7f-4e00-45c2-8919-b043cbaf509d
Bridge &amp;#34;vmbr4&amp;#34;
Controller &amp;#34;tcp:10.16.9.12:6654&amp;#34;
Controller &amp;#34;tcp:10.16.9.12:6653&amp;#34;
is\_connected: true
Port &amp;#34;enx00051ba65ece&amp;#34;
Interface &amp;#34;enx00051ba65ece&amp;#34;
Port &amp;#34;tap115i1&amp;#34;
Interface &amp;#34;tap115i1&amp;#34;
Port &amp;#34;vmbr4&amp;#34;
Interface &amp;#34;vmbr4&amp;#34;
type: internal
Port &amp;#34;eno2&amp;#34;
Interface &amp;#34;eno2&amp;#34;
ovs\_version: “2.7.0&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Listing interfaces in OVS can be a helpful way to aid in building the faucet configuration```
root@pve1:~# ovs-vsctl &amp;ndash;columns=ofport,name list interface
ofport : 65534
name : &amp;ldquo;vmbr4&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 1
name : &amp;ldquo;eno2&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 4
name : &amp;ldquo;tap115i1&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 2
name : &amp;ldquo;enx00051ba65ece&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-For spanning the data into the VM, the basic configuration within faucet looks like this and should reside in /etc/faucet/faucet.yaml. The real meat here is the mirror statement on port 4.```&#34; data-lang=&#34;For spanning the data into the VM, the basic configuration within faucet looks like this and should reside in /etc/faucet/faucet.yaml. The real meat here is the mirror statement on port 4.```&#34;&gt;dps:
    proxovs1:
        dp\_id: 0x51ba65ece
        hardware: &amp;#34;Open vSwitch&amp;#34;
        interfaces:
            65534:
                name: &amp;#34;vmbr4&amp;#34;
                description: &amp;#34;ProxMox OVS vmbr4&amp;#34;
                native\_vlan: servernet
            1:
                name: &amp;#34;eno2&amp;#34;
                description: &amp;#34;Span from sw1&amp;#34;
                native\_vlan: servernet
            2:
                name: &amp;#34;enx00051ba65ece&amp;#34;
                description: &amp;#34;Span from sw2&amp;#34;
                native\_vlan: servernet
            4:
                name: &amp;#34;tap115i1&amp;#34;
                description: &amp;#34;ProxMox OVS vmbr4&amp;#34;
                output\_only: True
                mirror: \[1,2\]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be fairly easily adjusted to mirror all internal, east-west traffic in a virtualization farm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeRouter as a test environment</title>
      <link>https://forwardingplane.net/post/freertr-as-a-lab-environment/</link>
      <pubDate>Sat, 02 Mar 2019 17:03:18 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/freertr-as-a-lab-environment/</guid>
      <description>&lt;p&gt;A few months ago &lt;a href=&#34;https://www.stubarea51.net/about-me/&#34;&gt;Kevin Myers&lt;/a&gt; of &lt;a href=&#34;https://www.iparchitechs.com/&#34;&gt;IP Architechs&lt;/a&gt; introduced me to a really interesting project called &lt;a href=&#34;http://freerouter.nop.hu/&#34;&gt;FreeRouter&lt;/a&gt;. Being that I absolutely love alternative routing platforms and feature complete simulation environments, this really got me going. I tend to define &amp;ldquo;feature complete&amp;rdquo; in a routing platform as something that can do both IS-IS and MPLS. Given that there aren&amp;rsquo;t many platforms that do both correctly or within a reasonable budget, and offer simulation options, I was pretty excited. I spent a fair amount of time pounding through it. I recommend spending some time with this if you have even remote interest in any of the above technologies. It costs nothing but your time. The project was written and is maintained by a Cisco CCIE and was built (according to his site) as a mechanism to learn. However, the feature list is incredibly complete, and extremely impressive, as seen below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;forwarding: ipv4, ipv6, ipx, mpls, nsh, layer2, irb, atom, eompls, vpls, evpn  
routing protocols: ospf, isis, bgp, rip, eigrp, babel, olsr, pim, msdp  
lsp support: p2p, p2mp, mp2mp built by ldp, rsvp-te, sr, sr-te, bier  
crypto: macsec, ipsec, ikev1, ikev2, tls, dtls, ssh, openvpn  
tunnel: gre, ipip, l2tp, pptp, lisp, geneve, nvgre, vxlan, etherip  
encapsulation: ethernet, vlan, nsh, ppp, framerelay, pwether, virtppp, hairpin  
misc: acl, hqos, nat, pbr, srv6, vrrp, hsrp, transproxy, 6to4, rpl, tunnel, vpdn 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.forwardingplane.net/configuration-archive/freertr-basic-configurations/&#34;&gt;My configurations&lt;/a&gt; can be found in the &lt;a href=&#34;https://www.forwardingplane.net/configuration-archive/&#34;&gt;Configuration Archive&lt;/a&gt; section of this site. It is definitely worth your time to check out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brocade Vyatta Install and OpenFlow 1.3 on ICX 7450</title>
      <link>https://forwardingplane.net/post/brocade-vyatta-install-and-openflow-1-3-on-icx-7450/</link>
      <pubDate>Sat, 20 Jun 2015 16:06:03 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/brocade-vyatta-install-and-openflow-1-3-on-icx-7450/</guid>
      <description>

&lt;p&gt;I recently had a need to test OpenFlow on the brocade ICX 7450 for a fairly good sized, high visibility &lt;a href=&#34;http://scinet.supercomputing.org&#34;&gt;project&lt;/a&gt;. The basic goal is pretty simple, Layer2 path provisioning. Straightforward and fairly well supported in OpenFlow, even from the early days. To do this, the idea was to use a turnkey platform, that way there is one throat to choke if there are issues. I landed on the &lt;a href=&#34;http://www1.brocade.com/forms/jsp/vyatta-controller/download.jsp&#34;&gt;Brocade Vyatta controller&lt;/a&gt; (which is essentially ODL), and the ICX. Below is a rough account of getting this up and working to the point of testing. For the purposes of this I used BVC 1.3 and an ICX 7450. The docs for the BVC are actually pretty good if you read them. I found the google searching for the docs led to &lt;sup&gt;9&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt; links to brocade being 404 errors. My guess is that they restructured their site and did not alias anything. Minor frustration since my guess is that most folks search using a search engine rather than going to the site and searching from there. The link to the configuration guide I used for the ICX is &lt;a href=&#34;http://www.brocade.com/content/brocade/en/backend-content/pdf-page.html?/content/dam/common/documents/content-types/configuration-guide/fastiron-08030-sdnguide.pdf&#34;&gt;here&lt;/a&gt;. Once I grabbed the software, which requires registration, I went on to try to build this on CentOS 6.6. After some hurdles that I didn&amp;rsquo;t expect, I went and actually read the doc for BVC and found that ubuntu is a requirement. Another minor annoyance, but surmountable pretty easily. Enterprise customers are probably not going to want to have a one-off from RHEL/CentOS even if I don&amp;rsquo;t have a strong preference either way. Now that the VM is up and running with just over the minimum requirements, time to log in and get to work. This is assuming you have the code actually on the server already.```
apt-get install -y unzip curl wget python-pip&lt;br /&gt;
curl -sL &lt;a href=&#34;https://deb.nodesource.com/setup&#34;&gt;https://deb.nodesource.com/setup&lt;/a&gt; | sudo bash -
sudo apt-get install -y nodejs
unzip -o bvc-1.3.0.zip -d /opt
unzip -o bvc-dependencies-1.3.0.zip -d /opt
unzip -o bvc-app-pathexplorer-packaging-1.2.0.zip -d /opt
cd /opt/bvc
./install&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-The output should look something like this```&#34; data-lang=&#34;The output should look something like this```&#34;&gt; root@bvc:/opt/bvc# ./install
 Brocade Vyatta Controller Installation

 Starting @ : 2015-06-17 15:31:15.564202

 Performing prerequisite check ...
 JDK Check ................................ \[ OK \]
 CPU Count Check: ......................... \[ OK \]
 Memory Size Check: ....................... \[ OK \]

 Running pre-install scripts ...

 Unpacking archives ....................... \[ OK \]

 Setting up karaf container ............... \[ OK \]

 Running controller pre-install scripts ...

 Configuring base features ................ \[ OK \]
 Start controller ......................... \[ OK \]
 Waiting for base initialization .......... \[ OK \]

 Configuring all features ................. \[ OK \]
 Adding Repositories ...................... \[ OK \]
 Adding Features .......................... \[ OK \]

 Running controller post install scripts ...

 Running install scripts ...


 Stopping NODEJS server 9000 .............. \[ OK \]
 Starting NODEJS server  .................. \[ OK \]
   Server @ http://10.42.44.20:9000/

 Install completed @ :  2015-06-17 15:32:26.464365&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monitoring the connection to the controller from the controller can be accomplished by using the included tool: /opt/bvc/bin/taillog which operates just like you think, by tailing a log file. Checking for capability can be pretty easily accomplished by looking at the restconf modules:```
http://&lt;IP address&gt;:8181/restconf/modules&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Now, for the ICX, I was under the impression that OpenFlow was in the base code. This is a true statement, however, I made a bad assumption that it was in _all_ code for that platform. Not so. After banging around and reading release notes as well as contacting my SE, I found that the code that it shipped with did _not_ support openflow, so I would need to upgrade it. _The ICX 7450 (and probably others) requires at least Version 08.0.30aa for OpenFlow support. Earlier versions will be lacking in the entire command hierarchy, even for older versions of OpenFlow._ **Brocade ICX 7450 configuration** From the console:```&#34; data-lang=&#34;Now, for the ICX, I was under the impression that OpenFlow was in the base code. This is a true statement, however, I made a bad assumption that it was in _all_ code for that platform. Not so. After banging around and reading release notes as well as contacting my SE, I found that the code that it shipped with did _not_ support openflow, so I would need to upgrade it. _The ICX 7450 (and probably others) requires at least Version 08.0.30aa for OpenFlow support. Earlier versions will be lacking in the entire command hierarchy, even for older versions of OpenFlow._ **Brocade ICX 7450 configuration** From the console:```&#34;&gt;ip address 10.42.44.30 255.255.255.224
no ip dhcp-client enable
ip default-gateway 10.42.44.1
ip dns server-address 10.42.2.2
clock timezone us central
clock summer-time
logging host 10.42.44.7
logging enable user-login
logging enable config-changed
ntp 
server 10.42.2.2

interface ethernet 1/1/1 
port-name port1

crypto key generate rsa modulus 2048
ip ssh  authentication-retries 5
ip ssh timeout 120 
ip ssh key-authentication yes
username buraglio enable
username buraglio privilege 0
username buraglio password brocade

openflow enable ofv130 
openflow controller 10.42.44.20
system-max openflow-flow-entries 3072&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thoughts: OpenFlow wants to use SSL by default. When configuring this it failed in a way that is not intuitive &lt;em&gt;at all&lt;/em&gt;. To get it running quickly, you need to disable SSL, which I absolutely &lt;em&gt;do not&lt;/em&gt; recommended for anything production). If you see anything other than this, the OpenFlow connection isn&amp;rsquo;t working```
SSH@icx-of-test#sh openflow controller
Openflow controller information&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controller-mode-tcp-ssl-ip-address-port-status&#34;&gt;Controller   Mode      TCP/SSL   IP-address        Port   Status&lt;/h2&gt;

&lt;p&gt;1  (Equal)   active    TCP       10.42.44.20     6653   OPENFLOW_ESTABLISHED&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-This command will make it talk to the BVC over unencrypted TCP:```&#34; data-lang=&#34;This command will make it talk to the BVC over unencrypted TCP:```&#34;&gt;openflow controller ip-address 10.42.44.20 no-ssl port 6653 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make this work over SSL requires pulling the certificates into the device from the controller. I am still working on this for consideration in a production environment. Path explorer has most of the interesting bits in it. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-4.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-4.png&#34; alt=&#34;BVC-4&#34; /&gt;&lt;/a&gt; Other handy commands:```
SSH@icx-of-test#sh openflow inter
  interface     Show interfaces where OpenFlow is enabled
  &lt;cr&gt;
SSH@icx-of-test#sh openflow interface&lt;/p&gt;

&lt;p&gt;Total number of Openflow interfaces: 2&lt;/p&gt;

&lt;p&gt;Port   Link   Speed Tag MAC            OF-portid   Name           Mode
1/1/1  Up     1G    No  cc4e.248b.4570 1           port1          Hybrid-Layer23
1/1/48 Down   None  No  cc4e.248b.459f 48          port48         Hybrid-Layer23&lt;/p&gt;

&lt;p&gt;```The topology explorer is pretty cool, lots of eye candy. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-1.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-1.png&#34; alt=&#34;BVC-1&#34; /&gt;&lt;/a&gt; Random Thoughts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Restarting the BVC causes the topology to need to rebuild, as one would expect. The ICX took longer to show up in the controller than I expected. In fact, it never recovered until I intervened manually.&lt;/li&gt;
&lt;li&gt;The Brocade ICX randomly rebooted while attempting to scp the bootloader code. I never figured out why.&lt;/li&gt;
&lt;li&gt;The ICX stopped responding to SSH for some reason. The only way I could recover it was to reboot. Concerning from a management standpoint, but I suspect it was an anomaly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next post I&amp;rsquo;ll explore the actual provisioning and the SSL configuration.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BigSwitch Networks BigCloud Fabric 2.5</title>
      <link>https://forwardingplane.net/post/bigswitch-networks-bigcloud-fabric-2-5/</link>
      <pubDate>Thu, 29 Jan 2015 01:04:46 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/bigswitch-networks-bigcloud-fabric-2-5/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.bigswitch.com&#34;&gt;BigSwitch&lt;/a&gt; is &lt;a href=&#34;http://www.bigswitch.com/press-releases/2015/01/28/big-switch-networks-unveils-big-cloud-fabric-2_5?mkt_tok=3RkMMJWWfF9wsRonvqTIZKXonjHpfsX56eQrUKS2lMI%2F0ER3fOvrPUfGjI4ASMtrI%2BSLDwEYGJlv6SgFQ7fBMbd4yLgIXRA%3D&#34;&gt;making waves again&lt;/a&gt;, this time with its Big Cloud Fabric product update. I was lucky enough to get a bit of a preview of what was coming and was pleasantly surprised by the new features, finding them functionally useful for both operators, security folks and management alike.&lt;/p&gt;

&lt;p&gt;Not only is the fabric fit to operate at hyper scale proportions, they&amp;rsquo;ve paid  close attention to making such operations even easier. With release 2.5 they&amp;rsquo;re focusing more on white box switches and abstracting the control plane further, which is important to note because decoupling those things can prove to be confusing and complicated and doing so can make operation and service clunky if not done well. From what &lt;a href=&#34;http://www.forwardingplane.net/2014/09/bigswitch-labs-for-sdn-learning-a-sneak-peek/&#34; title=&#34;BigSwitch Labs for SDN learning: a sneak peek!&#34;&gt;I&amp;rsquo;ve seen and experienced in their fabric cloud training&lt;/a&gt; and in this update, it appears smooth and easy to use.&lt;/p&gt;

&lt;p&gt;Something mentioned during this briefing that I found particularly cool was the notion of a starter kits. BigSwitch is making available a &amp;ldquo;kickstarter&amp;rdquo; of their big cloud fabric with available software, hardware, cables and optics; a turnkey SDN platform in a box. Where I could see this being convenient is for those looking to build out a lab, dip their toe into the SDN / data center fabric world or to build out a dedicated project. A nice option for sure.&lt;/p&gt;

&lt;p&gt;BigSwitch is also adding support for VMWare VCenter and they&amp;rsquo;re also adding support for the &lt;a href=&#34;http://www.dell.com/us/business/p/open-networking-switches/pd&#34;&gt;dell open network switch&lt;/a&gt; series to boot.&lt;/p&gt;

&lt;p&gt;What really caught my eye, though, was the existence of a very robust looking set of analytics. An eye catching assortment of graphs, logs and functional data that is, get this, driven by an &lt;a href=&#34;http://www.elasticsearch.com&#34;&gt;elasticsearch&lt;/a&gt; back end.   What is included is useful not only for Network and SDN engineers, but also for security &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/bsw-eyecandy.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/bsw-eyecandy.png&#34; alt=&#34;bsw-eyecandy&#34; /&gt;&lt;/a&gt;professionals. Including things like event logs, fine grained search, canned reports for the execs and presenting everything via a REST API and a subset available via syslog for good measure I could see this being a very handy set of data for tracking down any number of things from incident response to problem resolution.&lt;/p&gt;

&lt;p&gt;I look forward to seeing more from &lt;a href=&#34;http://www.bigswitch.com&#34;&gt;BigSwitch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring VMware ESXi with SNMP and Cacti</title>
      <link>https://forwardingplane.net/post/monitoring-vmware-esxi-with-snmp-and-cacti/</link>
      <pubDate>Mon, 19 Jan 2015 10:02:10 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/monitoring-vmware-esxi-with-snmp-and-cacti/</guid>
      <description>&lt;p&gt;VMWare is a powerful tool, and monitoring is a critical service. How does one monitor such an integral piece of infrastructure, and what do they monitor it with? There are powerful commercial ways of monitoring &lt;a href=&#34;http://www.vmware.com/&#34;&gt;VMware&lt;/a&gt;, however, for those with existing &lt;a href=&#34;http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol&#34;&gt;SNMP&lt;/a&gt; based systems in place, specifically &lt;a href=&#34;http://www.cacti.net/&#34;&gt;cacti&lt;/a&gt;, there are options. To that end, I&amp;rsquo;ll set aside my strong distaste for SNMP [yet again], because those are for a larger, less useful series of posts.&lt;/p&gt;

&lt;p&gt;Luckily for those of us that need it there exists in that vast wilderness we call the internet, a user contributed &lt;a href=&#34;http://www.cacti.net/&#34;&gt;cacti&lt;/a&gt; template for monitoring basic functionality with SNMP and cacti and it is available &lt;a href=&#34;http://forums.cacti.net/download/file.php?id=29171&amp;amp;sid=888e5451bc68b1c05a5b7dec6667afd2&#34;&gt;here&lt;/a&gt;, and with the full thread being worth a read &lt;a href=&#34;http://forums.cacti.net/viewtopic.php?f=12&amp;amp;t=52122&#34;&gt;here&lt;/a&gt;. Since VMWare ESXi doesn&amp;rsquo;t have SNMP enabled (or really exposed from what I can tell), you have to do some CLI jockeying to make it work. Full disclosure, I&amp;rsquo;m not a vmware expert by any stretch of the imagination, but I have been hacking at it for a few years because it is low overhead to use comparatively speaking, offers a free version for my lab, makes a nice contrast to my KVM system and is widely deployed, so I want to understand it. Your mileage may vary with what I&amp;rsquo;ve got here.&lt;/p&gt;

&lt;p&gt;Enabling ssh is beyond the scope of this post but details can be found &lt;a href=&#34;http://www.thomasmaurer.ch/2014/01/enable-ssh-on-vmware-esxi-5-5/&#34;&gt;here&lt;/a&gt;. It&amp;rsquo;s fairly straightforward.&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png&#34; alt=&#34;vmware-snmp-device&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Details of enabling SNMP for vmware 5.5 can be found &lt;a href=&#34;https://pubs.vmware.com/vsphere-51/index.jsp#com.vmware.vsphere.monitoring.doc/GUID-0EB48A32-34B0-4003-B2D0-ADE3BAFD29F0.html&#34;&gt;here&lt;/a&gt;, essentially one simply needs to run the following commands from within an ssh session:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;esxcli  system snmp set --communities &amp;lt;community&amp;gt;
esxcli system snmp set --port 161
esxcli system snmp set --enable true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Getting the cacti scripts in place is a little more involved, but it&amp;rsquo;s still pretty simple. Using the importer just add the new template. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.09.09.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.09.09.png&#34; alt=&#34;Screenshot 2015-01-10 10.09.09&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Once that is imported you&amp;rsquo;ll need to move some scripts into place within the cacti system as below (adjust your paths as needed; I moved them directly from my workstation into place)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp ss\_esxi\_vhosts.php netmon:/var/lib/cacti/scripts/
scp cacte\_esxi\_template/resource/snmp\_queries/\* netmon:/usr/share/cacti/resource/snmp\_queries/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[](&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.10.43.png)[![](http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png)](http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png&#34;&gt;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.10.43.png)[![](http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png)](http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;[](&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.13.33.png&#34;&gt;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.13.33.png&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Then adjust the template being used for your ESXi server or add it as a new host if it was not there already. The new template should show up in the list.&lt;/p&gt;

&lt;p&gt;Once complete the cacti server should start graphing and checking uptime, etc. IF it does not, make sure the scripts are in place and have the correct permissions. It&amp;rsquo;s also useful (although not required) to add the additional parameters to the host.&lt;/p&gt;

&lt;p&gt;Once complete, the cacti system should be able to baseline (and alert if so desited, using thresholds) on any of the newly added variables, including number of VMs, number of VMs using vmware tools, number of VMs running, disk space, processes, network traffic, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-create-graphs.png&#34; alt=&#34;vmware-create-graphs&#34; /&gt;  &lt;/p&gt;

&lt;p&gt;I have yet to be able to get successful CPU graphs, but I suspect it is user error on my part and I&amp;rsquo;ve not investigated yet. Overall, I&amp;rsquo;d call it a pretty bigwin for anyone that has an existing cacti installation and wants to include their vmware system(s). It should also be said that the readme that accompanies the template is relatively useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BigSwitch Labs for SDN learning: a sneak peek!</title>
      <link>https://forwardingplane.net/post/bigswitch-labs-for-sdn-learning-a-sneak-peek/</link>
      <pubDate>Mon, 22 Sep 2014 10:24:34 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/bigswitch-labs-for-sdn-learning-a-sneak-peek/</guid>
      <description>&lt;p&gt;I was recently granted access to the beta &lt;a href=&#34;http://www.bigswitch.com/&#34;&gt;BigSwitch Networks&lt;/a&gt; lab site, a purpose built classroom in the cloud focused on teaching the BigSwitch SDN environment.  I had seen some of the BSN offerings in the past and always held them in high regard, but I was thoroughly impressed with both the completeness of the lab and how polished the controller environment was.&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.28.50.png&#34; alt=&#34;Screenshot 2014-09-12 10.28.50&#34; /&gt; At the time of this writing, the lab consists of 3 modules: Building cloud fabric, monitoring fabric and dynamic provisioning of monitoring fabric.  Since there is quite a lot going on with this cloud based SDN classroom, for the scope of this post I&amp;rsquo;ll concentrate on the first, building cloud fabric.  I&amp;rsquo;m a big fan of the CLI*, and one thing that jumped right out to me was that they provide the GUI and the CLI, and that the CLI is familiar to anyone that has worked on an IOS device.  The lab is useful, even for someone that has done some SDN, both on production or in a lab, in that it presents the fundamentals in a way that both demonstrates the purpose and function and lays out the technology and product. From the technology presentation standpoint, the BigSwitch offering is quite impressive. The reality of it is that, in my experience, GUIs don&amp;rsquo;t always have the most intuitive or complete implementations and they&amp;rsquo;re hard to automate.  Now, from what I&amp;rsquo;ve seen to far the bigswitch offing is the exception to that rule.  The setup is very functional and goes through a range of great material. for comparison, below is the tenants display from the web interface: &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.47.37.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.47.37.png&#34; alt=&#34;Screenshot 2014-09-12 10.47.37&#34; /&gt;&lt;/a&gt;   and the corresponding show command: &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.33.49.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.33.49.png&#34; alt=&#34;show tenant&#34; /&gt;&lt;/a&gt; Nevertheless, part of my usual workflow is to use one to define the other when I can.  What I mean by that is that if I don&amp;rsquo;t know exactly how to accomplish my goal in the GUI, I switch to the CLI and see what I can do from there, returning to the GUI to see what has changed and then reverse engineer it from that perspective.  The opposite is also true, I have used the CLI to define the GUI &lt;em&gt;:cough:&lt;/em&gt; &lt;a href=&#34;http://www.juniper.net/us/en/products-services/security/netscreen/&#34;&gt;netscreen&lt;/a&gt; &lt;em&gt;:cough:&lt;/em&gt;. The important thing to note here, though, is that the tools all work as if it is a real environment, because it &lt;em&gt;is&lt;/em&gt; a real environment. The god among men here, really, is the &lt;em&gt;debug rest&lt;/em&gt; command.  This command, when issued in the CLI (displayed below) allows the commands sent to the terminal to automatically pop up with the rest interface commands necessary to utilize them.  Wrap your head around that one for a minute.  Are you thinking automation?  Me too; seeing that made me want to go write code, and I am a horrible developer. &lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.50.19.png&#34; alt=&#34;Screenshot 2014-09-12 10.50.19&#34; /&gt; In the time I&amp;rsquo;ve spent within this system I have been thoroughly impressed with how well it functioned.  I had no issues whatsoever with how the training presented the material, executed the commands or displayed the responses.  My only suggestion would be to add a configuration guide for the CLI =) Below is a quick youtube video of some of the functions.    * Yes, I know SDN is supposed to &amp;ldquo;kill the CLI&amp;rdquo;.  I don&amp;rsquo;t by the sensationalism for the short to medium term.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install nfsen and nfdump on CentOS 6.5 for netflow and or sflow collection</title>
      <link>https://forwardingplane.net/post/install-nfsen-and-nfdump-on-centos-6-5-for-netflow-and-or-sflow-collection/</link>
      <pubDate>Sat, 11 Jan 2014 21:55:24 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/install-nfsen-and-nfdump-on-centos-6-5-for-netflow-and-or-sflow-collection/</guid>
      <description>

&lt;p&gt;I am an absolutely &lt;strong&gt;huge&lt;/strong&gt; fan of statistical and instrumentation data, especially when it comes to traffic analysis, visualization and baselining.  I&amp;rsquo;ve rambled on about the importance of it at &lt;a href=&#34;http://searchnetworking.techtarget.com/news/2240212051/The-Der-Spiegel-NSA-revelations-What-network-engineers-need-to-know&#34;&gt;every opportunity&lt;/a&gt;.  As a result of that, I have been doing work with netflow and netflow-like data for a fairly long time.  My first collector was the &lt;a href=&#34;http://www.splintered.net/sw/flow-tools/&#34;&gt;OSU Flow tools&lt;/a&gt; based stuff  back around 13 years ago.  From there I played with all kinds of netflow tools, both &lt;a href=&#34;http://www.arbornetworks.com/&#34;&gt;commercial&lt;/a&gt; and open source, finally settling most of my focus on &lt;a href=&#34;http://nfdump.sourceforge.net/&#34;&gt;nfdump&lt;/a&gt; and &lt;a href=&#34;http://nfsen.sourceforge.net/&#34;&gt;nfsen&lt;/a&gt;. A bit of history: nfdump was born out of a research network, requiring it to be able to consume huge amounts of flows efficiently.  This makes it very powerful and very useful for nearly anyone, from the small technology tinkerer to to the enterprise network engineer up through the service provider architect.  nfsen is really just a php wrapper for nfdump, however, the really nice thing about it (other then being free, opensource software) is that it is extendable via &lt;a href=&#34;http://sourceforge.net/apps/trac/nfsen-plugins/&#34;&gt;plugins&lt;/a&gt;.  This is really what makes it a serious player from all angles.     From botnet detection to displaying IP geo-data on a map, there is likely a plugin for it.  Not finding what you are looking for?  Write it!  The architecture to use it is already there and documented. For ease of install, I chose CentOS 6.5.  Once you have a system up and running, to get nfsen/nfdump working, here is what you need to do:```
yum install -y httpd php wget gcc make rrdtool-devel &lt;br /&gt;
rrdtool-perl perl-MailTools perl-Socket6 flex byacc&lt;/p&gt;

&lt;p&gt;vi /etc/selinux/config
set SELINUX=disabled
reboot&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-You&#39;ll need to make an iptables rule (I generally make one for ip6tables as well, in case I want to also enable ipv6 transport)```&#34; data-lang=&#34;You&#39;ll need to make an iptables rule (I generally make one for ip6tables as well, in case I want to also enable ipv6 transport)```&#34;&gt;sudo iptables -I INPUT -p udp -m state --state NEW -m udp --dport 9995 -j ACCEPT
sudo ipt6ables -I INPUT -p udp -m state --state NEW -m udp --dport 9995 -j ACCEPT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also allow for access to the web server you just installed.```
sudo ip6tables -I INPUT -p tcp -m state &amp;ndash;state NEW -m tcp &amp;ndash;dport 443 -j ACCEPT
sudo ip6tables -I INPUT -p tcp -m state &amp;ndash;state NEW -m tcp &amp;ndash;dport 80 -j ACCEPT&lt;br /&gt;
sudo iptables -I INPUT -p tcp -m state &amp;ndash;state NEW -m tcp &amp;ndash;dport 443 -j ACCEPT
sudo iptables -I INPUT -p tcp -m state &amp;ndash;state NEW -m tcp &amp;ndash;dport 80 -j ACCEPT&lt;br /&gt;
service iptables save
service ip6tables save&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Once you enable https you can safely remove the table rules for port 80. Start HTTPd```&#34; data-lang=&#34;Once you enable https you can safely remove the table rules for port 80. Start HTTPd```&#34;&gt;sudo service httpd start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enable HTTPd at boot```
chkconfig httpd on&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Now you need the actual code. I like to grab the latest from sourceforge. (nfdump-1.6.11 and nfsen-1.3.6p1 at the time of this writing)```&#34; data-lang=&#34;Now you need the actual code. I like to grab the latest from sourceforge. (nfdump-1.6.11 and nfsen-1.3.6p1 at the time of this writing)```&#34;&gt;wget http://downloads.sourceforge.net/project/nfdump/stable/nfdump-1.6.11/nfdump-1.6.11.tar.gz
wget http://downloads.sourceforge.net/project/nfsen/stable/nfsen-1.3.6p1/nfsen-1.3.6p1.tar.gz
``````
tar -zxvf nfdump-1.6.11.tar.gz 
./configure --enable-nfprofile --enable-nftrack --enable-sflow 
make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default 1.6.11 enables v9 and ipfix =)```
adduser netflow
vi /etc/group&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Add user netflow to group apache```&#34; data-lang=&#34;Add user netflow to group apache```&#34;&gt;vi etc/nfsen.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;change www user to apache Add your host to the file to allow for collection, my %sources looks like this:```
%sources = (
    &amp;lsquo;home&amp;rsquo;    =&amp;gt; { &amp;lsquo;port&amp;rsquo; =&amp;gt; &amp;lsquo;9995&amp;rsquo;, &amp;lsquo;col&amp;rsquo; =&amp;gt; &amp;lsquo;#0000ff&amp;rsquo;, &amp;lsquo;type&amp;rsquo; =&amp;gt; &amp;lsquo;netflow&amp;rsquo; },
    &amp;lsquo;internal&amp;rsquo;    =&amp;gt; { &amp;lsquo;port&amp;rsquo; =&amp;gt; &amp;lsquo;9996&amp;rsquo;, &amp;lsquo;col&amp;rsquo; =&amp;gt; &amp;lsquo;#FF0000&amp;rsquo;, &amp;lsquo;type&amp;rsquo; =&amp;gt; &amp;lsquo;netflow&amp;rsquo; },&lt;/p&gt;

&lt;h1 id=&#34;gw-port-9995-col-0000ff-type-netflow&#34;&gt;&amp;lsquo;gw&amp;rsquo;    =&amp;gt; { &amp;lsquo;port&amp;rsquo; =&amp;gt; &amp;lsquo;9995&amp;rsquo;, &amp;lsquo;col&amp;rsquo; =&amp;gt; &amp;lsquo;#0000ff&amp;rsquo;, &amp;lsquo;type&amp;rsquo; =&amp;gt; &amp;lsquo;netflow&amp;rsquo; },&lt;/h1&gt;

&lt;h1 id=&#34;peer1-port-9996-ip-172-16-17-18&#34;&gt;&amp;lsquo;peer1&amp;rsquo;        =&amp;gt; { &amp;lsquo;port&amp;rsquo; =&amp;gt; &amp;lsquo;9996&amp;rsquo;, &amp;lsquo;IP&amp;rsquo; =&amp;gt; &amp;lsquo;172.16.17.18&amp;rsquo; },&lt;/h1&gt;

&lt;h1 id=&#34;peer2-port-9996-ip-172-16-17-19&#34;&gt;&amp;lsquo;peer2&amp;rsquo;        =&amp;gt; { &amp;lsquo;port&amp;rsquo; =&amp;gt; &amp;lsquo;9996&amp;rsquo;, &amp;lsquo;IP&amp;rsquo; =&amp;gt; &amp;lsquo;172.16.17.19&amp;rsquo; },&lt;/h1&gt;

&lt;p&gt;);&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-As you can see, I have two valid sources with different ports and different colors. You can make all netflow, all sflow, or any combination of protocol. change directory to /home/netflow```&#34; data-lang=&#34;As you can see, I have two valid sources with different ports and different colors. You can make all netflow, all sflow, or any combination of protocol. change directory to /home/netflow```&#34;&gt;./install.pl etc/nfsen.conf
cd /home/netflow/bin/
./nfsen start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make it start at boot (referenced from &lt;a href=&#34;http://sourceforge.net/mailarchive/message.php?msg_id=29434166&#34;&gt;this post&lt;/a&gt;).```
vi /etc/init.d/nfsen&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Add this into the file:```&#34; data-lang=&#34;Add this into the file:```&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;#
&lt;span style=&#34;color:#75715e&#34;&gt;# chkconfig: - 50 50&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# description: nfsen&lt;/span&gt;

DAEMON&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/netflow/bin/nfsen

&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; in
		start&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		$DAEMON start
		;;
		stop&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		$DAEMON stop
		;;
		status&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		$DAEMON status
		;;
		restart&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		$DAEMON stop
		sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		$DAEMON start
		;;
		&lt;span style=&#34;color:#ae81ff&#34;&gt;\*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: &lt;/span&gt;$0&lt;span style=&#34;color:#e6db74&#34;&gt; {start|stop|status|restart}&amp;#34;&lt;/span&gt;
		exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;esac&lt;/span&gt;

exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then chkconfig it on to start it at boot:```
chmod 755 nfsen &amp;amp;&amp;amp; chkconfig &amp;ndash;add nfsen &amp;amp;&amp;amp; chkconfig nfsen on&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-That&#39;s pretty much it. Once you configure your netflow or sflow source, you should start seeing data in ~5-10 minutes. Point your browser at your web server and see: Mine is set as https://netmon/nfsen/nfsen.php (you&#39;ll need to include the &#34;nfsen.php&#34; uness you edit your apache config to recognize &#34;nfsen.php&#34; as in index.&#34; data-lang=&#34;That&#39;s pretty much it. Once you configure your netflow or sflow source, you should start seeing data in ~5-10 minutes. Point your browser at your web server and see: Mine is set as https://netmon/nfsen/nfsen.php (you&#39;ll need to include the &#34;nfsen.php&#34; uness you edit your apache config to recognize &#34;nfsen.php&#34; as in index.&#34;&gt;[![&lt;span style=&#34;color:#a6e22e&#34;&gt;Screen&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Shot&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2014&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.13.53&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PM&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;:&lt;span style=&#34;color:#75715e&#34;&gt;//www.forwardingplane.net/wp-content/uploads/2014/01/Screen-Shot-2014-01-11-at-3.13.53-PM-913x1024.png)](http://www.forwardingplane.net/wp-content/uploads/2014/01/Screen-Shot-2014-01-11-at-3.13.53-PM.png)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Common&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;issues&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;see&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;one&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;every&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: nfsend connect() error: Permission denied!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;It&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;always&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;permissions&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;issue&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;documented&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;here&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;https&lt;/span&gt;:&lt;span style=&#34;color:#75715e&#34;&gt;//code.google.com/p/nfsenplugins/wiki/NFSEN_Installation_Gotchas).  You need to make sure that the nfsen package can read the nfsen.comm socket file. I fixed mine by doing```
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;chmod&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rwx&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;netflow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My nfsen.conf file is using /home/netflow as the $BASEDIR.```
 &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/01/Screenshot-2014-01-11-13.04.17.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/01/Screenshot-2014-01-11-13.04.17.png&#34; alt=&#34;Screenshot 2014-01-11 13.04.17&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-You&#39;ll likely see &#34;Frontend - Backend version mismatch!&#34;, this is a known issue. There is a patch to fix it [here](http://sourceforge.net/p/nfsen/bugs/43/), I never bothered since it did not cause any issues for me. Disk full. Depending on your setup, you may generate a firehose worth of data. I have filled disks in less than a day in the past on a good sized regional WAN. I generally keep a month of data, but you can store as much data as disk you want to buy. I have a script run from cron to prune data, if you want to do the same:```&#34; data-lang=&#34;You&#39;ll likely see &#34;Frontend - Backend version mismatch!&#34;, this is a known issue. There is a patch to fix it [here](http://sourceforge.net/p/nfsen/bugs/43/), I never bothered since it did not cause any issues for me. Disk full. Depending on your setup, you may generate a firehose worth of data. I have filled disks in less than a day in the past on a good sized regional WAN. I generally keep a month of data, but you can store as much data as disk you want to buy. I have a script run from cron to prune data, if you want to do the same:```&#34;&gt;vi /usr/local/etc/rmflowdata.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Paste this in:```
#!/bin/bash&lt;/p&gt;

&lt;h1 id=&#34;prune-flow-data&#34;&gt;prune flow data&lt;/h1&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage:&lt;/h1&gt;

&lt;h1 id=&#34;30-is-the-number-of-days-adjust-accordingly&#34;&gt;+30 is the number of days, adjust accordingly.&lt;/h1&gt;

&lt;p&gt;/bin/find /home/netflow/profiles-data/live -name &amp;ldquo;nfcapd.*&amp;rdquo; -type f -mtime +30 -delete&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Add this to your crontab:```&#34; data-lang=&#34;Add this to your crontab:```&#34;&gt;@daily /usr/local/bin/rmflowdata.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make it executable&lt;code&gt;
chmod 755 /usr/local/bin/rmflowdata.sh
&lt;/code&gt;There are probably more elegant ways to do it but this works just fine, is lightweight and can be run manually if needed. There are a lot of great use cases for this.  If you&amp;rsquo;re looking for an SDN tie-in, guess what, there is one.  &lt;a href=&#34;http://blog.sflow.com/2010/05/configuring-open-vswitch.html&#34;&gt;OpenVSwitch supports sflow export&lt;/a&gt; and low-and-behold, nfsen and nfdump can easily consume and display sflow data. Want flow statistics on your all VM, OVS based SDN lab?  Guess what, you can! There are some other great things you can do with flow data, too, specifically sflow.  It&amp;rsquo;s not just for network statistics, there is a host &lt;a href=&#34;http://host-sflow.sourceforge.net/&#34;&gt;based sflow implementation&lt;/a&gt; that track any number of interesting metrics.  &lt;a href=&#34;http://blog.sflow.com/&#34;&gt;blog.sflow.com&lt;/a&gt; is a great resource for all things sflow (also, it does IPv6 by default, as it should). Ok, now you have &lt;strong&gt;absolutely&lt;/strong&gt; no good reason not to be collecting flow data.   It&amp;rsquo;s easy, it&amp;rsquo;s useful and almost everything (hosts, routers, virtual switches) supports exporting &lt;strong&gt;&lt;em&gt;some&lt;/em&gt;&lt;/strong&gt; kind of flow information.  You can even generate it from an inline linux box or a box off of an optical tap or a span port running &lt;a href=&#34;https://code.google.com/p/softflowd/&#34;&gt;softflowd&lt;/a&gt; or &lt;a href=&#34;http://www.ntop.org/products/nprobe/&#34;&gt;nprobe&lt;/a&gt;.   Both of which I can confirm work wonderfully (the above collector is gathering flows from softflowd running on my &lt;a href=&#34;http://www.forwardingplane.net/2013/07/building-a-secured-network-in-a-box/&#34; title=&#34;Building a secured network in a box&#34;&gt;security onion box&lt;/a&gt; as well as exported flows from pfflowd on a &lt;a href=&#34;http://www.pfsense.org/&#34;&gt;pfsense&lt;/a&gt; router).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing the dreaded &#34;error: could not open configuration database (juniper.data&#43;)&#34; problem.</title>
      <link>https://forwardingplane.net/post/fixing-the-dreaded-error-could-not-open-configuration-database-juniper-data-problem/</link>
      <pubDate>Wed, 07 Aug 2013 16:52:04 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/fixing-the-dreaded-error-could-not-open-configuration-database-juniper-data-problem/</guid>
      <description>&lt;p&gt;Working on some MX series routers recently I encountered a problem I&amp;rsquo;d never seen before, essentially preventing the configuration from being committed:```
buraglio@rtr# commit check
re0:
error: could not open configuration database (juniper.data+)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-This is a very annoying problem and is terribly inconvenient as you can probably imagine. So, my first instinct is to drop down to the shell and starting hacking at it UNIX style.```&#34; data-lang=&#34;This is a very annoying problem and is terribly inconvenient as you can probably imagine. So, my first instinct is to drop down to the shell and starting hacking at it UNIX style.```&#34;&gt;buraglio@rtr&amp;gt;start shell&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there I wanted to see the file system and check out the stats of what it thinks we have.```
buraglio@rtr% df -h
Filesystem     Size    Used   Avail Capacity  Mounted on
/dev/ad0s1a    3.5G    313M    2.9G    10%    /
devfs          1.0K    1.0K      0B   100%    /dev
/dev/md0        63M     63M      0B   100%    /packages/mnt/jbase
/dev/md1        53M     53M      0B   100%    /packages/mnt/jkernel64-12.3R3.4
buraglio@rtr%    82M     82M      0B   100%    /packages/mnt/jpfe-X960-12.3R3.4
/dev/md3       5.0M    5.0M      0B   100%    /packages/mnt/jdocs-12.3R3.4
buraglio@rtr%   104M    104M      0B   100%    /packages/mnt/jroute-12.3R3.4
buraglio@rtr% clearM     28M      0B   100%    /packages/mnt/jcrypto64-12.3R3.4
/dev/md6        38M     38M      0B   100%    /packages/mnt/jpfe-common-12.3R3.4
/dev/md7        92K     92K      0B   100%    /packages/mnt/jplatform-12.3R3.4
/dev/md8       422M    422M      0B   100%    /packages/mnt/jruntime-12.3R3.4
/dev/md9       7.9G     16K    7.2G     0%    /tmp
/dev/md10      7.9G     11M    7.2G     0%    /mfs
/dev/ad0s1e    393M     36K    362M     0%    /config
procfs         4.0K    4.0K      0B   100%    /proc
/dev/ad1s1f     18G    4.2G     12G    26%    /var&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-... and check the mounted partitions.```&#34; data-lang=&#34;... and check the mounted partitions.```&#34;&gt;buraglio@rtr% mount
/dev/ad0s1a on / (ufs, local, noatime)
devfs on /dev (devfs, local, multilabel)
/dev/md0 on /packages/mnt/jbase (cd9660, local, noatime, read-only, verified)
/dev/md1 on /packages/mnt/jkernel64-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md2 on /packages/mnt/jpfe-X960-12.3R3.4 (cd9660, local, noatime, read-only)
/dev/md3 on /packages/mnt/jdocs-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md4 on /packages/mnt/jroute-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md5 on /packages/mnt/jcrypto64-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md6 on /packages/mnt/jpfe-common-12.3R3.4 (cd9660, local, noatime, read-only)
/dev/md7 on /packages/mnt/jplatform-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md8 on /packages/mnt/jruntime-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md9 on /tmp (ufs, asynchronous, local, noatime)
/dev/md10 on /mfs (ufs, asynchronous, local, noatime)
/dev/ad0s1e on /config (ufs, local, noatime)
procfs on /proc (procfs, local, noatime)
/dev/ad1s1f on /var (ufs, local, noatime)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I ran a fsck to get some stats and see what the problem could be since it appears that there is no free space even though the router reports that it has it.```
buraglio@rtr% fsck -y -f /dev/ad1s1f
** /dev/ad1s1f (NO WRITE)
** Last Mounted on /var
** Phase 1 - Check Blocks and Sizes
** Phase 2 - Check Pathnames
** Phase 3 - Check Connectivity
** Phase 4 - Check Reference Counts
** Phase 5 - Check Cyl groups
FREE BLK COUNT(S) WRONG IN SUPERBLK
SALVAGE? no&lt;/p&gt;

&lt;p&gt;605 files, 2202492 used, 7040218 free (786 frags, 879929 blocks, 0.0% fragmentation)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Playing around in the shell presented this error as well```&#34; data-lang=&#34;Playing around in the shell presented this error as well```&#34;&gt;/var: create/symlink failed, no inodes free&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, it appears as if the /var partition is the issue. On my router /var is mounted as /dev/ad1s1f, so lets unmount this partition and try to fix it. In my experience Juniper will shy away from telling you to do anything in the shell, so do this at your own risk. Rebooting the router would also fix this issue, but I&amp;rsquo;m a form believer that rebooting networking equipment to fix issues is a lazy way to fix problems and will only serve to atrophy any troubleshooting skills you may have.```&lt;/p&gt;

&lt;p&gt;buraglio@rtr% umount -f /var&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Now run fsck again to repair the file system```&#34; data-lang=&#34;Now run fsck again to repair the file system```&#34;&gt;buraglio@rtr% fsck -y -f /dev/ad1s1f
\*\* /dev/ad1s1f
\*\* Last Mounted on /var
\*\* Phase 1 - Check Blocks and Sizes
\*\* Phase 2 - Check Pathnames
\*\* Phase 3 - Check Connectivity
\*\* Phase 4 - Check Reference Counts
\*\* Phase 5 - Check Cyl groups
FREE BLK COUNT(S) WRONG IN SUPERBLK
SALVAGE? yes

605 files, 2203376 used, 7039334 free (782 frags, 879819 blocks, 0.0% fragmentation)

\*\*\*\*\* FILE SYSTEM WAS MODIFIED \*\*\*\*\*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that the problematic bits have been repaired, we re-mount the partition```
buraglio@rtr% mount /dev/ad1s1f /var/&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Verify the mount```&#34; data-lang=&#34;Verify the mount```&#34;&gt;buraglio@rtr% mount
/dev/ad0s1a on / (ufs, local, noatime)
devfs on /dev (devfs, local, multilabel)
/dev/md0 on /packages/mnt/jbase (cd9660, local, noatime, read-only, verified)
/dev/md1 on /packages/mnt/jkernel64-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md2 on /packages/mnt/jpfe-X960-12.3R3.4 (cd9660, local, noatime, read-only)
/dev/md3 on /packages/mnt/jdocs-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md4 on /packages/mnt/jroute-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md5 on /packages/mnt/jcrypto64-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md6 on /packages/mnt/jpfe-common-12.3R3.4 (cd9660, local, noatime, read-only)
/dev/md7 on /packages/mnt/jplatform-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md8 on /packages/mnt/jruntime-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md9 on /tmp (ufs, asynchronous, local, noatime)
/dev/md10 on /mfs (ufs, asynchronous, local, noatime)
/dev/ad0s1e on /config (ufs, local, noatime)
procfs on /proc (procfs, local, noatime)
/dev/ad1s1f on /var (ufs, local, noatime)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We should now be able to commit correctly.```
buraglio@rtr% cli
{master}
buraglio@rtr&amp;gt;&lt;/p&gt;

&lt;p&gt;{master}
buraglio@rtr&amp;gt; edit
Entering configuration mode
The configuration has been changed but not committed&lt;/p&gt;

&lt;p&gt;{master}[edit]
buraglio@rtr# commit check
re0:
configuration check succeeds
re1:
configuration check succeeds&lt;/p&gt;

&lt;p&gt;{master}[edit]
buraglio@rtr# commit
re0:
configuration check succeeds
re1:
commit complete
re0:
commit complete&lt;/p&gt;

&lt;p&gt;{master}[edit]
buraglio@rtr#
```And&amp;hellip;.you&amp;rsquo;re done. Hopefully this will help someone fight this problem, I only found a &lt;a href=&#34;http://www.gns3.net/labs/juniper/jncia-junos/operational-monitoring-and-maintenance/&#34;&gt;handful&lt;/a&gt; of &lt;a href=&#34;http://forums.juniper.net/t5/Junos-and-Junosphere/Commit-Errors/td-p/17615&#34;&gt;other references&lt;/a&gt; to it that was useful but it didn&amp;rsquo;t address my exact scenario.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a secured network in a box</title>
      <link>https://forwardingplane.net/post/building-a-secured-network-in-a-box/</link>
      <pubDate>Fri, 26 Jul 2013 05:28:15 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-a-secured-network-in-a-box/</guid>
      <description>&lt;p&gt;In many environments, the move to virtualization is a path well traveled.  My home and lab networks are no exception to this and I&amp;rsquo;m sure nearly everyone who reads these pages has at least been exposed to it in one way or another.  I have played with nearly all of the virtualization platforms and am firmly in the camp that there will be a large segment of networking that will move to a virtualized platform especially in the data center and campus segments.  Virtualization of routing tables has existed for a long time, see &lt;a href=&#34;http://en.wikipedia.org/wiki/Virtual_Routing_and_Forwarding&#34;&gt;VRF-Lite  and MPLS VRF&lt;/a&gt; as well as multi-tenancy technologies like Junipers logical systems so the concept, at some level, has existed in networking for quite some time. &amp;ldquo;How is a small to medium sized environment going to take advantage of this and more interestingly, how can it be secured?&amp;rdquo; &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/Red_onions.jpg&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/Red_onions-1024x763.jpg&#34; alt=&#34;Red_onions&#34; /&gt;&lt;/a&gt;This is a question I inadvertently found at least one answer to when building out my own network and testing a great little project called &lt;a href=&#34;http://securityonion.blogspot.com/&#34;&gt;security onion&lt;/a&gt;.  I&amp;rsquo;d seen and used this platform a bit in the past, but it had been at least a version ago and my exposure was pretty short. The problem now, though, was that everything I have in use other than a gigabit switch and a NAS is virtualized.  My firewall, my router, all of my dev and test boxes and all but one of my non-portable machines.  All VMs.  I&amp;rsquo;d gone back and forth between VMware and KVM, and while I like KVM better, management of edge case or non-standard networking stuff wasn&amp;rsquo;t as well documented and &lt;a href=&#34;http://openvswitch.org/&#34;&gt;OVS&lt;/a&gt; either wasn&amp;rsquo;t in the build of CentOS I was using or I didn&amp;rsquo;t know about its inclusion yet, so I settled on VMware ESXi 5 for this particular box.  I needed to be able to span a port on a vswitch.  My hopes were not high, but I figured there may be an unsupported way. Interestingly enough, the VMWare operating system has a mechanism for makeshift &amp;ldquo;spanning&amp;rdquo; a port.  More correctly, it has a way to see &amp;ldquo;all vlans&amp;rdquo; on a given vswitch, and it&amp;rsquo;s quite simple.  Essentially, you have to create a port group on vlan 4095 on the vswitch then set that port group to promiscuous mode. Add the vm NIC that you are going to use to monitor traffic to that port group.  &lt;a href=&#34;http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;amp;cmd=displayKC&amp;amp;externalId=1004099&#34;&gt;From VMware site&lt;/a&gt;: &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-site.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-site.png&#34; alt=&#34;VMWare-site&#34; /&gt;&lt;/a&gt; I was pleasanty surprised at how easy it was and was at the point of telling security onion to have interfaces on both of the vswitches in less than 15 minutes. Configuration, Networking, Properties, Security. VLAN 4095. Done.Here are a few screenshots of my VMware config following the steps laid out above. It&amp;rsquo;s far more simple than I could have imagined.   &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWAre-config-networking.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWAre-config-networking.png&#34; alt=&#34;VMWAre-config-networking&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-SPAN-WAN1.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-SPAN-WAN1.png&#34; alt=&#34;VMWare-SPAN-WAN1&#34; /&gt;&lt;/a&gt;           &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWARE-Span-WAN2.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWARE-Span-WAN2.png&#34; alt=&#34;VMWARE-Span-WAN2&#34; /&gt;&lt;/a&gt;             At this point Security onion was able to see what was going on.  In my case I allowed for visibility on both sides of my routing firewall, so there was a decent amount of data.     This is the interesting part, I think.  My initial thoughts are that this could be a &amp;ldquo;network in a box&amp;rdquo; for small offices.  No router, no servers (other than the VMware host), essentially a fully functional &amp;ldquo;enterprise&amp;rdquo; network of hosts, including a very high quality IDS device in a single device.  Put whatever firewall / vrouter in there that is supported or familiar, &lt;a href=&#34;http://www.pfsense.org&#34;&gt;pfsense&lt;/a&gt;, &lt;a href=&#34;http://www.juniper.net&#34;&gt;Juniper vSRX&lt;/a&gt;, &lt;a href=&#34;http://www.fortinet.com&#34;&gt;fortinet&lt;/a&gt;, &lt;a href=&#34;http://www.paloaltonetworks.com&#34;&gt;Palo Alto&lt;/a&gt;, they all have virtual devices and they all do a fine job [with the exception of IPv6; the only one I could get DHCPv6-PD to work with was pfsense.  Still need to test the fortinet]. Here is a high level diagram of how mine is put together. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-SPAN.jpg&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-SPAN.jpg&#34; alt=&#34;VMWare SPAN&#34; /&gt;&lt;/a&gt; Is this a viable option?  I have no idea, but it does work pretty darned well.  In fact, ironically enough, the day I got this working (July 13, 2013), a post went up over at &lt;a href=&#34;http://www.geekempire.com/2013/07/virtual-security-onion-via-ubuntu-kvm.html&#34;&gt;GeekEmpire&lt;/a&gt; doing almost exactly the same thing with KVM and OVS.  The setup is shockingly similar, right down to using pfSense. I was actually a bit envious, not only because his post went up first, but because he did what I had actually wanted to do by using KVM and OVS.  It&amp;rsquo;s well done, I recommend reading it. I think this is a sign of what will come.  &amp;ldquo;network in a box&amp;rdquo; is an intriguing concept, and I&amp;rsquo;m absolutely &lt;a href=&#34;https://www.google.com/search?q=network+in+a+box&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;aq=t&amp;amp;rls=org.mozilla:en-US:official&amp;amp;client=firefox-a&amp;amp;channel=fflb&#34;&gt;positive I am not the only one thinking about it&lt;/a&gt;.  I think, however, that the important part is to see the options available and make sure the masses know that there are many ways to do it.  It is not VMware or nothing, and it&amp;rsquo;s certainly not cisco or the highway.  OpenSource tools like OVS and KVM under a free operating system like Linux can compete at the highest levels and there are documents and how-tos out there.  More importantly, it&amp;rsquo;s not hard.  The same goes for security appliances and even vrouters.  Security Onion and pfSense are both viable platforms and they&amp;rsquo;re just the tip of the iceberg.  At the end of the day it all comes down to options. Opensource, commercial, they all have virtualization strategies and the more you know the better off you&amp;rsquo;ll be in the long run because virt is here to stay.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building FlowVisor on Centos 6 - quick and dirty</title>
      <link>https://forwardingplane.net/post/building-flowvisor-on-centos-6-quick-and-dirty/</link>
      <pubDate>Fri, 05 Jul 2013 10:22:23 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-flowvisor-on-centos-6-quick-and-dirty/</guid>
      <description>&lt;p&gt;I had the need to build a FlowVisor instance under CentOS.  Since nearly all of the docs I could find were for debian, I threw this together.  I utilized this &lt;a href=&#34;http://groups.geni.net/geni/wiki/FlowVisor&#34;&gt;GENI doc&lt;/a&gt; and the &lt;a href=&#34;https://github.com/OPENNETWORKINGLAB/flowvisor/wiki/Installation-from-Source&#34;&gt;github docs&lt;/a&gt; as a simple reference.  This is the quick and dirty method I used: Install the prerequisites:```
sudo yum -y install ant eclipse java-1.6.0-openjdk.x86_64 git
sudo yum -y groupinstall &amp;ldquo;Development Tools&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Create my standard directories:```&#34; data-lang=&#34;Create my standard directories:```&#34;&gt;mkdir /services
cd /services
git clone git://github.com/OPENNETWORKINGLAB/flowvisor.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Navigate, add user and install```
cd flowvisor
adduser flowvisor
sudo make fvuser=flowvisor fvgroup=flowvisor install&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Here is the relativde output I saw:```&#34; data-lang=&#34;Here is the relativde output I saw:```&#34;&gt;\[root@collector flowvisor\]# sudo make fvuser=flowvisor fvgroup=flowvisor install
ant
Buildfile: build.xml

init:
\[mkdir\] Created dir: /services/flowvisor/build
\[mkdir\] Created dir: /services/flowvisor/build.tests

compile:
\[javac\] Compiling 239 source files to /services/flowvisor/build
\[javac\] Note: /services/flowvisor/src/org/flowvisor/config/LoadConfig.java uses or overrides a deprecated API.
\[javac\] Note: Recompile with -Xlint:deprecation for details.

dist:
\[mkdir\] Created dir: /services/flowvisor/dist
\[jar\] Building jar: /services/flowvisor/dist/flowvisor.jar
\[jar\] Building jar: /services/flowvisor/dist/flowvisor.jar

BUILD SUCCESSFUL
Total time: 3 seconds
./scripts/install-script.sh
Using source dir: ./scripts/..
Installation prefix (/usr/local):
Install to different root directory ()
Installing FlowVisor into /usr/local with prefix=/usr/local as user/group flowvisor:flowvisor
Updating fvctl-xml.sh to fvctl-xml
Updating fvconfig.sh to fvconfig
Updating flowvisor.sh to flowvisor
Updating envs.sh to envs
Creating directories
Creating /usr/local/bin
Creating /usr/local/sbin
Creating /usr/local/libexec/flowvisor
Creating /usr/local/share/man/man1
Creating /usr/local/share/man/man8
Creating /usr/local/share/doc/flowvisor
Creating /usr/local/share/db/flowvisor
Creating /etc/flowvisor (owned by user=flowvisor  group=flowvisor)
Installing scripts
Installing SYSV startup script (not enabled by default)
Installing jars
Installing flowvisor.jar
Installing manpages
Installing FlowVisorDB
Installing configs
Installing Logrotate config
Installing documentation
Linking fvctl to fvctl-json
ln: creating symbolic link \`fvctl&amp;#39;: File exists
Generating a default config FlowVisor config
Trying to generate SSL Server Key with passwd from scripts/envs.sh
Generating cert with common name == flowvisor
keytool error: java.lang.Exception: Key pair not generated, alias &amp;lt;mykey&amp;gt; already exists
Enter password for account &amp;#39;fvadmin&amp;#39; on the flowvisor:
Generating default config in db
Outputing config file /etc/flowvisor/config.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Start the controller:```
sudo /etc/init.d/flowvisor start&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Output from controller starting:```&#34; data-lang=&#34;Output from controller starting:```&#34;&gt;Starting flowvisor with the configuration stored in DB
If DB unpopulated, load config using &amp;#39;fvconfig load config.json&amp;#39;
\[root@collector flowvisor\]#
Message from syslogd@collector at Jul  3 08:49:51 ...
1&amp;gt;Jul  3 08:49:51 flowvisor: ERROR none : log level enabled: CRIT

Message from syslogd@collector at Jul  3 08:49:51 ...
1&amp;gt;Jul  3 08:49:51 flowvisor: ERROR none : log level enabled: ALERT

Message from syslogd@collector at Jul  3 08:49:51 ...
1&amp;gt;Jul  3 08:49:51 flowvisor: WARN none : log level enabled: WARN
``````
This yields a &amp;#34;working&amp;#34; flow visor.

Lock it down with a password:
``````
yum -y install pwgen
test -f /etc/flowvisor.passwd || sudo sh -c &amp;#39;pwgen -sB 24 &amp;gt; /etc/flowvisor.passwd&amp;#39;
service flowvisor restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Broadcast input with iTerm</title>
      <link>https://forwardingplane.net/post/broadcast-input-with-iterm/</link>
      <pubDate>Sat, 22 Jun 2013 15:56:12 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/broadcast-input-with-iterm/</guid>
      <description>&lt;p&gt;As much as I like to think I automate everything, I&amp;rsquo;m pretty bad at writing code to make my life easier since it tends to take me longer to write the code and it tends to make be a bit grumpy (this is eomthing I&amp;rsquo;m fixing by learning as much code dev as I can during my limited spare time).  However, I like to think I can be fairly smart about working around my limited programming skills (think boba fett rather than jedi) by using the tools available to common folk.  Enter &lt;a href=&#34;http://www.iterm2.com/#/section/home&#34;&gt;iTerm2&lt;/a&gt;. Last I looked at this is was buggy and unstable. &amp;hellip;.that was years and years ago. This has changed.  &lt;a href=&#34;http://www.iterm2.com/#/section/home&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/06/iTerm.png&#34; alt=&#34;iTerm&#34; /&gt;&lt;/a&gt; iTerm has been vastly improved.   In fact, after someone suggested I look at it again, it took all of about 10 minutes for me to go all in as mt primary terminal.  The list of features is good, split pane, tabs and a wealth of customization options.  One of the big weinners for me, though, goes back to my original statement.   Being able to do broadcast input across panes, tabs or windows is fantastically useful.  If you manage systems, need to look at statistics at the same time on routers or switches or just want to do some quick and dirty &amp;ldquo;automation&amp;rdquo;, this is the ticket. I like it so much I did a quick screencast on how to do basic broadcast input.  It&amp;rsquo;s really straightforward.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MPLS PseudoWire (VLL) between JunOS and Brocade MLX/XMR</title>
      <link>https://forwardingplane.net/post/mpls-pseudowire-vll-between-junos-and-brocade-mlxxmr/</link>
      <pubDate>Sun, 19 May 2013 16:24:03 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/mpls-pseudowire-vll-between-junos-and-brocade-mlxxmr/</guid>
      <description>&lt;p&gt;I love to be the &amp;ldquo;uncola&amp;rdquo; of networking sites.  I like interop and I don&amp;rsquo;t do a lot with Cisco because I don&amp;rsquo;t have access to much of their gear anymore.  So, that being the case, I had a need to bring up a l2circuit (in JunOS speak), or VLL (in Brocade speak) between an MX480 and an MLX.  Since they are very different platforms, I had to do some digging and playing around to get it to work. You should have a rudimentary understanding of MPLS (which is about what I have) to do this. l2circuit / pseudowire / vll are all synonymous for the scope of this post. JunOS:```
set protocols l2circuit neighbor interface virtual-circuit-id
set protocols l2circuit neighbor interface encapsulation-type ethernet&lt;/p&gt;

&lt;p&gt;set interfaces xe-3/3/0 description
set interfaces xe-3/3/0 vlan-tagging
set interfaces xe-3/3/0 encapsulation flexible-ethernet-services
set interfaces xe-3/3/0 unit encapsulation vlan-ccc
set interfaces xe-3/3/0 unit vlan-id&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Brocade:```&#34; data-lang=&#34;Brocade:```&#34;&gt;MLX1#show mpls config
router mpls
policy
no propagate-ttl

mpls-interface e1/1
ldp-enable

mpls-interface e1/4
ldp-enable

vll TEST-ICCN-VLL-1 raw-mode
vll-peer
vlan
tagged e 5/2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some commands I found helpful for debugging while testing this out: JunOS: Useful for debugging connections that won&amp;rsquo;t come up:```
set protocols l2circuit traceoptions file l2-VLL
set protocols l2circuit traceoptions file size 20240
set protocols l2circuit traceoptions flag all
show log l2-VLL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Brocade:```&#34; data-lang=&#34;Brocade:```&#34;&gt;logging console
terminal monitor
debug mpls all
debug mpls ldp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show commands that are very useful: JunOS: check end to end l2circuit / VLL connectivity```
ping mpls l2circuit interface  detail&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Show detail of l2circuit / pseudowire / vll show interfaces extensive # or detail Brocade:```&#34; data-lang=&#34;Show detail of l2circuit / pseudowire / vll show interfaces extensive # or detail Brocade:```&#34;&gt;show VLL detail &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Scripting the build of OpenDayight Controller under CentOS</title>
      <link>https://forwardingplane.net/post/scripting-the-build-of-opendayight-controller-under-centos/</link>
      <pubDate>Fri, 03 May 2013 21:45:41 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/scripting-the-build-of-opendayight-controller-under-centos/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://twitter.com/blinken_lichten&#34;&gt;Jon Langemak&lt;/a&gt; has a great write up on &lt;a href=&#34;http://www.dasblinkenlichten.com/installing-opendaylight-on-centos/&#34;&gt;building the OpenDaylight controller under CentOS&lt;/a&gt;. Since I&amp;rsquo;ll have to do this a bunch of times, I though tI&amp;rsquo;d take what he so generously put online and build a very rudimentary script for deploying ODC under CentOS. The prerequisites are that you already have an account and ssh key at the &lt;a href=&#34;https://git.opendaylight.org/&#34;&gt;OpenDaylight GIT repo&lt;/a&gt; and that you &lt;a href=&#34;http://www.revsys.com/writings/quicktips/turn-off-selinux.html&#34;&gt;disable SELinux&lt;/a&gt;. Here is the script:```
#!/bin/bash&lt;/p&gt;

&lt;h1 id=&#34;install-opendaylight-controller-under-centos&#34;&gt;Install Opendaylight controller under CentOS&lt;/h1&gt;

&lt;h1 id=&#34;by-nick-at-buraglio-com-http-www-twitter-com-buraglio&#34;&gt;by nick [at] buraglio.com &lt;a href=&#34;http://www.twitter.com/buraglio&#34;&gt;http://www.twitter.com/buraglio&lt;/a&gt;&lt;/h1&gt;

&lt;h1 id=&#34;http-www-forwardingplane-net&#34;&gt;&lt;a href=&#34;http://www.forwardingplane.net&#34;&gt;http://www.forwardingplane.net&lt;/a&gt;&lt;/h1&gt;

&lt;h1 id=&#34;based-on-post-by-jon-langemak-http-www-twitter-com-blinken-lichten&#34;&gt;Based on post by Jon Langemak (&lt;a href=&#34;http://www.twitter.com/blinken_lichten&#34;&gt;http://www.twitter.com/blinken_lichten&lt;/a&gt;)&lt;/h1&gt;

&lt;h1 id=&#34;http-www-dasblinkenlichten-com-installing-opendaylight-on-centos&#34;&gt;&lt;a href=&#34;http://www.dasblinkenlichten.com/installing-opendaylight-on-centos/&#34;&gt;http://www.dasblinkenlichten.com/installing-opendaylight-on-centos/&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;yum=&amp;ldquo;/usr/bin/yum&amp;rdquo;
servivce=&amp;ldquo;/sbin/service&amp;rdquo;
chkconfig=&amp;ldquo;/sbin/chkconfig&amp;rdquo;&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Disable SELINUX before starting this process&amp;rdquo;
echo &amp;ldquo;Edit the /etc/selinux/config file and restart the server&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Change the username in the GIT section to your own&amp;rdquo;
echo &amp;ldquo;you&amp;rsquo;ll need to create it and upload&amp;rdquo;
echo &amp;ldquo;your ssh key at git.opendaylight.org&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;************************&amp;ldquo;&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Installing Development tools and other deps&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
yum install -y wget vim java ant python eclipse-platform git
yum groupinstall -y “Development tools”A&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Downloading and installing maven&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
wget &lt;a href=&#34;http://www.poolsaboveground.com/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.zip&#34;&gt;http://www.poolsaboveground.com/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.zip&lt;/a&gt;
unzip apache-maven-3.0.5-bin.zip -d /usr/share/
ln -s /usr/share/apache-maven-3.0.5/bin/mvn /usr/bin/mvn&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Downloading GIT code&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;&lt;/p&gt;

&lt;h1 id=&#34;change-the-username-here-to-your-own-you-ll-need-to-create-it-and-upload&#34;&gt;Change the username here to your own, you&amp;rsquo;ll need to create it and upload&lt;/h1&gt;

&lt;h1 id=&#34;your-ssh-key-at-git-opendaylight-org&#34;&gt;your ssh key at git.opendaylight.org&lt;/h1&gt;

&lt;p&gt;mkdir -p /services/opendaylight/
cd /services/opendaylight/
git clone &lt;a href=&#34;https://buraglio@git.opendaylight.org/gerrit/p/controller.git&#34;&gt;https://buraglio@git.opendaylight.org/gerrit/p/controller.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Building OpenDaylight Controller with Maven&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
cd controller/opendaylight/distribution/opendaylight/
mvn clean install&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Configure Java Env variables&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
export JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk.x86_64
echo &amp;ldquo;JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk.x86_64&amp;rdquo; &amp;gt;&amp;gt; /etc/environment&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Load the controller&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
cd /services/opendaylight/controller/opendaylight/distribution/opendaylight/target/distribution.opendaylight-0.1.0-SNAPSHOT-osgipackage/opendaylight&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Start OpenDaylight OF controller&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
./run.sh&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Once up and running, it&#39;s pretty trivial to point something like an HP switch at the controller. For an HP5400, just decide what VLAN(s) you want to use OpenFlow on. I chose 999 as my test VLAN.```&#34; data-lang=&#34;Once up and running, it&#39;s pretty trivial to point something like an HP switch at the controller. For an HP5400, just decide what VLAN(s) you want to use OpenFlow on. I chose 999 as my test VLAN.```&#34;&gt;sw-5400-of# conf t
sw-5400-of(config)# vlan 999 name test-openflow999
sw-5400-of(vlan-999)# untagged A3-A4 
sw-5400-of(vlan-999)# exit
sw-5400-of(config)# openflow vlan 999
sw-5400-of(openFlow vlan-999)# enable
sw-5400-of(openFlow vlan-999)# controller &amp;#34;tcp:10.17.4.22:6633&amp;#34;
sw-5400-of(openFlow vlan-999)# exit       
sw-5400-of(openFlow)# exit
sw-5400-of(config)# 
w-5400-of(config)# exit
sw-5400-of# show openflow 

sw-5400-of# show openflow 

 Openflow Configuration

  Openflow aggregate VLANs \[Disabled\] :           
  Openflow aggregate management VlanId \[0\] : 0     
  Openflow second aggregate management VlanId \[0\] : 0     
  Openflow aggregate configuration VlanId \[0\] : 0     

  VID  State HW  Active controller Pseudo-URL                       Conn
  ---- ----- --- -------------------------------------------------- ----
  666  Off   On                                                     No  
  999  On    On  tcp:10.17.4.22:6633                                Yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From here we can see the box in the openflow controller.    &lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/05/Screen-Shot-2013-05-03-at-4.20.03-PM.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/05/Screen-Shot-2013-05-03-at-4.20.03-PM.png&#34; alt=&#34;Screen Shot 2013-05-03 at 4.20.03 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  I&amp;rsquo;m still having some issues pushing flows, I&amp;rsquo;m sure I can work it out but here is a quick screencast of me trying to push a flow.  More posts will be added as soon as I can get the flows to push correctly. I suspect it is user error and I just need to read the docs.  More to come for sure.  This controller is very, very slick.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VNC Console on VMware ESXi</title>
      <link>https://forwardingplane.net/post/vnc-console-on-vmware-esxi/</link>
      <pubDate>Sun, 28 Apr 2013 03:39:54 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/vnc-console-on-vmware-esxi/</guid>
      <description>&lt;p&gt;Let me preface this post by saying that I am absolutely not an enterprise IT or systems guy, take everything that I write here on out with that as a side dish.  I&amp;rsquo;m also very, very cheap. That said, one of the things I really like about KVM is the ability to easily view the console of a guest system using free, non-windows software like VNC. However, much like everything in life, there are reasons to do one thing or another. I love VMware as well. It&amp;rsquo;s refined, well documented, incredibly feature rich and works phenomenally well. It&amp;rsquo;s also an enterprise app and to get a lot of the elegant features you either need a windows machine or the expensive paid version. Or both. I generally have neither money to spend on lab stuff or software licenses, which is why I generally use OSS. VMware, does, however, allow for free limited use of ESXi in such a way that is more than I need for my lab environments.  This is a great compliment to the XEN, KVM and other virtualization stuff I use for entertaining myself, learning new tech and labbing things up. So, when I wanted to see if I could get to the console of a few VMs I have without the paid app or a windows machine running vsphere, &lt;a href=&#34;http://t3chnot3s.blogspot.com/2012/03/how-to-enable-vnc-access-to-vms-on.html&#34;&gt;the internets took care of me&lt;/a&gt;.  This is actually really straight forward and takes very little time.  I made a quick screen cast of adding it to one of my template VMs. There are, of course, a few caveats.  Knowing how to &lt;a href=&#34;http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;amp;cmd=displayKC&amp;amp;externalId=1714&#34;&gt;properly edit the VMX file&lt;/a&gt; is important.  Knowing that VNC is insecure is also very important. In my lab, this is all behind my security perimeter and it&amp;rsquo;s fairly safe to open it up. In a nutshell, Here is what you need to do:```
chmod 777 /etc/vmware/firewall/service.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Edit the firewall file:```&#34; data-lang=&#34;Edit the firewall file:```&#34;&gt;vi /etc/vmware/firewall/service.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add this to the bottom before the last line:```
 VNC
    outbound
        tcp
        dst
        5800
           5999
     inbound
        tcp
        dst
        5800
           5999
     true
     false&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Make sure the ports are configured at you want them to be. I chose 5900 - 5999 since it made sense to me. Then:```&#34; data-lang=&#34;Make sure the ports are configured at you want them to be. I chose 5900 - 5999 since it made sense to me. Then:```&#34;&gt;esxcli network firewall refresh
esxcli network firewall ruleset list&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Should now see:```
VNC true&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-at the very bottom. In the .vmx file of each VM:```&#34; data-lang=&#34;at the very bottom. In the .vmx file of each VM:```&#34;&gt;RemoteDisplay.vnc.enabled = &amp;#34;TRUE&amp;#34;
RemoteDisplay.vnc.port = 5910
RemoteDisplay.vnc.password = &amp;#34;VNCPassword&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Directly from the VMware site: Any manual additions to the .vmx file from ESX/ESXi are overwritten by the entries stored in the vCenter Server database. If you need to edit a virtual machine&amp;rsquo;s .vmx file, first remove it from vCenter Server&amp;rsquo;s inventory (right-click it and choose Remove from Inventory). After you edit it, register the virtual machine again from the ESX command line.```
vmware-cmd -s register /vmfs/volumes/datastore/virtual machine directory/virtual machine name.vmx&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Where datastore is the datastore name, virtual machine directory is the directory containing the virtual machine files, and virtual machine name is the name of the virtual machine files. This needs to be the full path, it gave me a weird error trying to do it in the directory without the full path. For example:```&#34; data-lang=&#34;Where datastore is the datastore name, virtual machine directory is the directory containing the virtual machine files, and virtual machine name is the name of the virtual machine files. This needs to be the full path, it gave me a weird error trying to do it in the directory without the full path. For example:```&#34;&gt;vim-cmd solo/registervm /vmfs/volumes/Storage1/vm1/vm1.vmx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Start the VM and connect to the VNC console configured.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic reference openflow controller VMs running in CentOS 6 for KVM.</title>
      <link>https://forwardingplane.net/post/basic-reference-openflow-controller-vms-running-in-centos-6-for-kvm/</link>
      <pubDate>Fri, 26 Apr 2013 04:56:07 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/basic-reference-openflow-controller-vms-running-in-centos-6-for-kvm/</guid>
      <description>&lt;p&gt;I had been working, off and on, on a how-to for building the &lt;a href=&#34;http://www.opendaylight.org/&#34;&gt;daylight openflow controller&lt;/a&gt; under CentOS.  Most openflow docs and dev are done under ubuntu or debian, and while those are both fantastic alternatives, there are a huge number of folks that will want or need to use RHEL or CentOS. So, seeing as that is the case, having someone be mindful of that is important.  When I saw the &lt;a href=&#34;http://www.dasblinkenlichten.com/installing-opendaylight-on-centos/&#34;&gt;write up&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/blinken_lichten&#34;&gt;Jon Langemak&lt;/a&gt;, I scrapped my attempt at a how-to since his was so much better. If you&amp;rsquo;re not following Jon and reading his blog, you should be.  He&amp;rsquo;s a sharp guy with interesting things to say. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/04/projectfloodlight-logo-header.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/04/projectfloodlight-logo-header.png&#34; alt=&#34;projectfloodlight-logo-header&#34; /&gt;&lt;/a&gt; That got me thinking about references and resources, and I decided that I would take a few of the things I had been working on on my home lab and make them available to the masses.  I&amp;rsquo;m a fan of importable base VMs.  So, seeing that I am working on testing openflow controllers, it made sense in my [constantly racing] mind to make the reference, base level VMs available.  If anyone is interested in the &lt;a href=&#34;http://www.projectfloodlight.org/floodlight/&#34;&gt;floodlight controller&lt;/a&gt; running under CentOS 6.3 built using the method documented &lt;a href=&#34;http://www.forwardingplane.net/2013/02/building-a-floodlight-openflow-controller-on-centos-6/&#34; title=&#34;Building a Floodlight OpenFlow controller on CentOS 6&#34;&gt;here&lt;/a&gt;, a KVM image is now available to download from &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/vm-images/centos-floodlight-template.tbz&#34;&gt;here&lt;/a&gt;.  It is, as stated, a KVM image, created by using the method I documented in &lt;a href=&#34;http://www.forwardingplane.net/2013/03/centos-kvm-install-quick-start-to-a-vm/&#34; title=&#34;CentOS KVM Install – Quick Start to a VM&#34;&gt;this post&lt;/a&gt; a few months ago.    There is a readme file in the archive wth basic instructions.  You&amp;rsquo;ll need a basic understanding of &lt;a href=&#34;http://www.linux-kvm.org/page/Main_Page&#34;&gt;KVM&lt;/a&gt; to make it work, or you can try to convert it to something else like vmware, XEN or virtualbox. I&amp;rsquo;ll be adding one of these soon for &lt;a href=&#34;http://www.opendaylight.org/&#34;&gt;daylight&lt;/a&gt; as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Bridge Domain on MX series JunOS</title>
      <link>https://forwardingplane.net/post/building-a-bridge-domain-on-mx-series-junos/</link>
      <pubDate>Sat, 09 Mar 2013 16:48:48 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-a-bridge-domain-on-mx-series-junos/</guid>
      <description>&lt;p&gt;I started working on Juniper equipment around 2002. At my employer, we had an M40 with the serial number 256.  We did Layer3 only.  I had no idea if the Juniper even did layer2.  It certainly wasn&amp;rsquo;t a layer3 switch like a 6500 like I was used to.  It was like a deliciously robust version of any Layer 3 router I&amp;rsquo;d worked on previously.  Over the years &lt;a href=&#34;http://www.juniper.net/us/en/&#34;&gt;Juniper&lt;/a&gt; has added a &lt;a href=&#34;http://www.juniper.net/us/en/products-services/switching/ex-series/&#34;&gt;switching line&lt;/a&gt; utilizing their FreeBSD based OS, &lt;a href=&#34;http://www.juniper.net/us/en/products-services/nos/junos/&#34;&gt;JunOS&lt;/a&gt;. All that being said, I&amp;rsquo;d never really messed with doing a layer2 transit VLAN on a JunOS routing platform.  Lets say we want to make 2 VLANs and transit them up through the WAN.  Here is how to make it work on an MX: Create the bridge domains:```
set bridge-domains vlan-123 domain-type bridge
set bridge-domains vlan-123 vlan-id 123
set bridge-domains vlan-124 domain-type bridge
set bridge-domains vlan-123 vlan-id 124&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Configure the interfaces facing south (LAN) to nbe members of the VLAN:```&#34; data-lang=&#34;Configure the interfaces facing south (LAN) to nbe members of the VLAN:```&#34;&gt;set interfaces xe-1/0/0 description &amp;#34;SW1 xe-1/1/0&amp;#34;
set interfaces xe-1/0/0 mtu 9192
set interfaces xe-1/0/0 unit 0 description &amp;#34;Untagged VLAN 123&amp;#34;
set interfaces xe-1/0/0 unit 0 family bridge interface-mode access
set interfaces xe-1/0/0 unit 0 family bridge vlan-id 123

set interfaces xe-1/0/1 description &amp;#34;SW1 xe-1/1/1&amp;#34;
set interfaces xe-1/0/1 mtu 9192
set interfaces xe-1/0/1 unit 0 description &amp;#34;Untagged VLAN 123&amp;#34;
set interfaces xe-1/0/1 unit 0 family bridge interface-mode access
set interfaces xe-1/0/1 unit 0 family bridge vlan-id 123

set interfaces xe-1/0/2 description &amp;#34;SW2 xe-1/1/2&amp;#34;
set interfaces xe-1/0/2 mtu 9192
set interfaces xe-1/0/2 unit 0 description &amp;#34;Untagged VLAN 124&amp;#34;
set interfaces xe-1/0/2 unit 0 family bridge interface-mode access
set interfaces xe-1/0/2 unit 0 family bridge vlan-id 124

set interfaces xe-1/0/3 description &amp;#34;SW2 xe-1/1/3&amp;#34;
set interfaces xe-1/0/3 mtu 9192
set interfaces xe-1/0/3 unit 0 description &amp;#34;Untagged VLAN 124&amp;#34;
set interfaces xe-1/0/3 unit 0 family bridge interface-mode access
set interfaces xe-1/0/3 unit 0 family bridge vlan-id 124&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now add it to the uplink (that in this case has a layer3 instance on it as well):```
set interfaces et-5/0/0 description &amp;ldquo;100G North&amp;rdquo;
set interfaces et-5/0/0 vlan-tagging
set interfaces et-5/0/0 mtu 9192
set interfaces et-5/0/0 unit 123 description &amp;ldquo;L3 testing vlan 123&amp;rdquo;
set interfaces et-5/0/0 unit 123 family bridge interface-mode trunk
set interfaces et-5/0/0 unit 123 family bridge vlan-id-list 123
set interfaces et-5/0/0 unit 124 description &amp;ldquo;L3 testing vlan 124&amp;rdquo;
set interfaces et-5/0/0 unit 124 family bridge interface-mode trunk
set interfaces et-5/0/0 unit 124 family bridge vlan-id-list 124
set interfaces et-5/0/0 unit 100 description &amp;ldquo;VLAN100 Layer3 Peering&amp;rdquo;
set interfaces et-5/0/0 unit 100 vlan-id 100
set interfaces et-5/0/0 unit 100 family inet mtu 9000
set interfaces et-5/0/0 unit 100 family inet address 10.100.100.&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;30&lt;/sub&gt;
set interfaces et-5/0/0 unit 100 family inet6 mtu 9000
set interfaces et-5/0/0 unit 10 family inet6 address 2001:fd8:a100:100::&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;64&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Now check your bridge table:```&#34; data-lang=&#34;Now check your bridge table:```&#34;&gt;buraglio@mx480&amp;gt; show bridge domain    

Routing instance        Bridge domain            VLAN ID     Interfaces
default-switch          vlan-123                 123      
                                                             et-5/0/0.123
                                                             xe-1/0/0.0
                                                             xe-1/0/1.0
                                                            
default-switch          vlan-124                 124      
                                                             et-5/0/0.124
                                                             xe-1/0/2.0
                                                             xe-1/0/3.0
                                                        &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it. Pretty straightforward.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOS KVM Install - Quick Start to a VM</title>
      <link>https://forwardingplane.net/post/centos-kvm-install-quick-start-to-a-vm/</link>
      <pubDate>Sat, 02 Mar 2013 01:12:02 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/centos-kvm-install-quick-start-to-a-vm/</guid>
      <description>&lt;p&gt;I am a network engineer by profession, but with the proliferation of SDN and OpenFlow, I have had to spend a lot of time re-learning a lot of system admin skills that I&amp;rsquo;d shelved years ago.  Now, I&amp;rsquo;ve been a virtualization user forever. From &lt;a href=&#34;http://www.vmware.com&#34;&gt;VMware&lt;/a&gt; (Fusion, ESX), &lt;a href=&#34;https://www.virtualbox.org&#34;&gt;VirtualBox&lt;/a&gt;, to &lt;a href=&#34;www.parallels.com&#34;&gt;Parallels&lt;/a&gt;, I&amp;rsquo;ve used them at least in testing if not in production environments.  I&amp;rsquo;d not really spent any mentionable amount of time with &lt;a href=&#34;http://www.xen.org&#34;&gt;XEN&lt;/a&gt;, &lt;a href=&#34;http://www.qemu.org&#34;&gt;qEMU&lt;/a&gt; or &lt;a href=&#34;www.linux-kvm.org&#34;&gt;KVM&lt;/a&gt;, but some projects I was working on suggested it for the virtualization mechanism, so I figured I&amp;rsquo;d try to pick it up.  I think the hosting provider  of this blog is using it to provide the VPS that this site runs on, so it is clearly production quality.  In looking around for a straightforward how-to, a few things became obvious pretty quickly: KVM is very robust. KVM and qEMU have got a lot of documentation, but not all of it is straightforward. They have a lot of pieces needed to make it work efficiently. It wasn&amp;rsquo;t a plug and run experience, by any means.  I wanted a headless, remotely manageable system that ran on a bare minimum install (i.e. no GUI).  After a late evening of hacking at it,  here is what I finally had to do to get it running and build a functional VM on a fresh install of CentOS 6.3. Install all the dependancies.  And there were many.  Coming from using the VirtualBox CLI, little things that I expected didn&amp;rsquo;t work if I didn&amp;rsquo;t have this or that installed.```
yum install -y qemu-kvm.x86_64 qemu-kvm-tools.x86_64 &lt;br /&gt;
kvm libvirt bridge-utils tunctl python-virtinst.noarch avahi&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Restart the deamons```&#34; data-lang=&#34;Restart the deamons```&#34;&gt;/etc/init.d/messagebus restart
/etc/init.d/avahi-daemon restart
/etc/init.d/libvirtd restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make the new daemons start at boot:```
/sbin/chkconfig messagebus on
/sbin/chkconfig avahi-daemon on&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
I want to bridge rather than NAT.  My VMs need to have a public (or same LAN segment) address as the rest of the hosts for external management and availability of inbound services.  For this, we need to adjust the interfaces.  I want to run the bridge on a second interface and keep the host system management on a dedicated interface.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vi /etc/sysconfig/network-scripts/ifcfg-eth1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Your file should look something like this when done:```&#34; data-lang=&#34;Your file should look something like this when done:```&#34;&gt;DEVICE=&amp;#34;eth1&amp;#34;
HWADDR=&amp;#34;c0:ff:ee:c0:ff:ee&amp;#34; # (leave this as your MAC address)
NM\_CONTROLLED=&amp;#34;yes&amp;#34;
 BRIDGE=br0
 ONBOOT=&amp;#34;yes&amp;#34;
UUID=&amp;#34;a9c26927-7650-42e9-a86a-1ae1227eac4b&amp;#34; #leave this as your UUID)
``````
vi /etc/sysconfig/network-scripts/ifcfg-br0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your file should look something like this when done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEVICE=&amp;quot;br0&amp;quot;
TYPE=&amp;quot;Bridge&amp;quot;
BOOTPROTO=&amp;quot;static&amp;quot;
IPADDR=&amp;quot;10.10.10.50&amp;quot; # Use your own IP address
NETMASK=&amp;quot;255.255.255.128&amp;quot;
GATEWAY=&amp;quot;10.10.10.1&amp;quot;  # Provide your gateway
IPV6INIT=&amp;quot;yes&amp;quot;
IPV6\_AUTOCONF=&amp;quot;yes&amp;quot;
NM\_CONTROLLED=&amp;quot;yes&amp;quot;
ONBOOT=&amp;quot;yes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart the network to make it active.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service network restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;re going to use virt tools and virsh to manipulate the guests.  I tried it a few other ways and this seems far more supportable.  I wanted to install a CentOS 6.3 guest, I grabbed the install media from a &lt;a href=&#34;http://cosmos.cites.illinois.edu/pub/centos/6.3/isos/x86_64/&#34;&gt;local mirror&lt;/a&gt;.  I have a volume mounted as /services that I keep stuff in.```
mkdir /services/vm/template-host
cd /services/vm/template-host
wget &lt;a href=&#34;http://cosmos.cites.illinois.edu/pub/centos/6.3/isos/x86_64/CentOS-6.3-x86_64-bin-DVD1.iso&#34;&gt;http://cosmos.cites.illinois.edu/pub/centos/6.3/isos/x86_64/CentOS-6.3-x86_64-bin-DVD1.iso&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Now use the virt-install command to boot the system with the following parameters: 2G of RAM 50G disk named disk.img Console redirected to a VNC instance on port 5901 Network interface attached to br0 4 CPUs CDROM points to install image```&#34; data-lang=&#34;Now use the virt-install command to boot the system with the following parameters: 2G of RAM 50G disk named disk.img Console redirected to a VNC instance on port 5901 Network interface attached to br0 4 CPUs CDROM points to install image```&#34;&gt;virt-install --name template-host --ram 2048 --disk /home/vm/template-host/disk.img,size=50 \\
--graphics vnc,port=5901 --network bridge=br0 --vcpus=4 --os-type=linux \\
--cdrom=/home/vm/Install\_Media/CentOS-6.3-x86\_64-bin-DVD1.iso&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, to connect to the console, you&amp;rsquo;ll need to tunnel VNC over ssh.  This can be adjusted, but that&amp;rsquo;s outside of the scope of this. I like to redirect real port numbers for my own sanity.```
ssh -N -p 22 -c 3des buraglio@vmhost -L 5901/localhost/5901&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-The above command will redirect localhost port 5901 to port 5901 on the host vmhost Connect to the VNC server:&#34; data-lang=&#34;The above command will redirect localhost port 5901 to port 5901 on the host vmhost Connect to the VNC server:&#34;&gt;[![Screen Shot 2013-03-01 at 2.00.37 PM](http://www.forwardingplane.net/wp-content/uploads/2013/03/Screen-Shot-2013-03-01-at-2.00.37-PM.png)](http://www.forwardingplane.net/wp-content/uploads/2013/03/Screen-Shot-2013-03-01-at-2.00.37-PM.png)

Once connected you should drop right into the console of the KVM instance. Install as a normal system at that point.

Once installed It&amp;#39;ll appear as a normal host console.

[![Screen Shot 2013-03-01 at 2.01.21 PM](http://www.forwardingplane.net/wp-content/uploads/2013/03/Screen-Shot-2013-03-01-at-2.01.21-PM.png)](http://www.forwardingplane.net/wp-content/uploads/2013/03/Screen-Shot-2013-03-01-at-2.01.21-PM.png)

I found virsh to be the most useful for manipulating the virtual machine.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;[root@behemoth Install_Media]# virsh list
Id            Name                                      State&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;9              template-host                         running
```Helpful commands I found after 30 minutes of poking around and playing with virsh: virsh list &amp;ndash;show the list of virtual machines virsh destroy &lt;vm name&gt; &amp;ndash;hard shut down a host (I believe) virsh undefine &lt;vm name&gt; &amp;ndash;remove the VM from registration &amp;ndash;this one was hard for me to find.   &lt;a href=&#34;http://www.forwardingplane.net/unix/kvm-virsh-command-referenc/&#34; title=&#34;KVM virsh command reference&#34;&gt;Here&lt;/a&gt; is a complete list of the commands.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IPv6 Toolkit 1.3 fun - scan6</title>
      <link>https://forwardingplane.net/post/ipv6-toolkit-1-3-fun-scan6/</link>
      <pubDate>Wed, 20 Feb 2013 10:53:38 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/ipv6-toolkit-1-3-fun-scan6/</guid>
      <description>&lt;p&gt;Recently &lt;a href=&#34;http://www.si6networks.com/tools/ipv6toolkit/&#34;&gt;SI6 released the IPv6 Toolkit 1.3 &lt;/a&gt;  This release is on the heels of this &lt;a href=&#34;http://tools.ietf.org/html/draft-ietf-opsec-ipv6-host-scanning-00&#34;&gt;IETF draft &lt;/a&gt; on IPv6 host scanning.  It was long thought that scanning an IPv6 network was impossible.  The address space was too large and reliably ascertaining the hosts from it would be too time consuming to even attempt.  However, as &lt;a href=&#34;http://en.wikipedia.org/wiki/Hans_Zarkov&#34;&gt;Dr. Hans Zarkov&lt;/a&gt; says in the 1980 classic cult film of my youth, &lt;a href=&#34;http://en.wikipedia.org/wiki/Flash_Gordon_(film)&#34;&gt;Flash Gordon&lt;/a&gt;, &amp;ldquo;You can&amp;rsquo;t beat the human spirit!&amp;ldquo;  That fine community out there has thought outside the box and found a way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.thiel-a-vision.com/wp-content/uploads/2010/07/flash68sm.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a network engineer by profession, but I&amp;rsquo;ve been a security guy more than once during my ~15 years doing IT work; I think there is definite value in studying &amp;ldquo;the dark side&amp;rdquo; and learning it&amp;rsquo;s power.  Couple that with my zealotry of IPv6&amp;hellip;.and I&amp;rsquo;ve found a time vortex. Scanning IPv6 is not like scanning IPv4.   It can&amp;rsquo;t be.  A /64 network has 18,446,744,073,709,551,616 (18 quintillion) unique addresses and a /64 is the default allocation for an end user subnet.  Have fun scanning that one by one.  The methodology used by scan6 is pretty innovative, but first you have to build it. The &lt;a href=&#34;http://www.si6networks.com/tools/ipv6toolkit/&#34;&gt;IPv6 toolkit&lt;/a&gt; is available via download &lt;a href=&#34;http://www.si6networks.com/tools/ipv6toolkit/ipv6-toolkit-v1.3.1.tar.gz&#34;&gt;here&lt;/a&gt;.  It is current;y supported under FreeBSD, NetBSD, OpenBSD, Linux, and Mac OS X.  I&amp;rsquo;ve chosen to build mine on my laptop, a macbook pro running OS 10.8. It&amp;rsquo;s pretty straightforward to build assuming you have the Developers Tools and CLI support added. &lt;em&gt;(~/Downloads/ipv6-toolkit-v1.3) Tardis $ make&lt;/em&gt; &lt;em&gt;gcc -Wall -o flow6 tools/flow6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o frag6 tools/frag6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o icmp6 tools/icmp6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o jumbo6 tools/jumbo6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o na6 tools/na6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o ni6 tools/ni6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o ns6 tools/ns6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o ra6 tools/ra6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o rd6 tools/rd6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o rs6 tools/rs6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o scan6 tools/scan6.c -lpcap -lm&lt;/em&gt; &lt;em&gt;gcc -Wall -o tcp6 tools/tcp6.c -lpcap -lm&lt;/em&gt;   That&amp;rsquo;s it.  If you want to install it in the global environment, to a &amp;ldquo;&lt;em&gt;make install&lt;/em&gt;&amp;rdquo; Now for the good stuff.  The docs are well written for this tool. Here is an example of scanning a local segment in verbose mode and the output: &lt;em&gt;(~/Downloads/ipv6-toolkit-v6.8) tardis $ sudo ./scan6 -i en6 -l -e -v&lt;/em&gt; &lt;em&gt;Link-local addresses:&lt;/em&gt; &lt;em&gt;fe80::20d:b9ff:fe68:8ca6 @ 00:0d:b9:68:8c:a6&lt;/em&gt; &lt;em&gt;fe80::264:d6ff:fe25:9704 @ 00:64:d6:25:97:04&lt;/em&gt; &lt;em&gt;fe80::26f:f8ff:fe06:dcb4 @ 00:6f:f8:06:dc:b4&lt;/em&gt; &lt;em&gt;fe80::22cf:80ff:fea8:ec26 @ 20:cf:80:a8:ec:26&lt;/em&gt; &lt;em&gt;fe80::224:86ff:fe9f:c628 @ 00:24:86:9f:c6:28&lt;/em&gt; &lt;em&gt;fe80::267:f2ff:fe52:8574 @ 00:67:f2:52:85:74&lt;/em&gt; &lt;em&gt;fe80::8ed0:f8ff:fe8a:4d29 @ 8c:d0:f8:8a:4d:29&lt;/em&gt; &lt;em&gt;fe80::62fa:cdff:fe86:62bd @ 60:fa:cd:86:62:bd&lt;/em&gt; &lt;em&gt;fe80::629a:ddff:fe45:6c08 @ 60:9a:dd:45:6c:08&lt;/em&gt; &lt;em&gt;Global addresses:&lt;/em&gt; &lt;em&gt;2001:db8:86c0:24::6 @ 00:0d:b9:68:8c:a6&lt;/em&gt; &lt;em&gt;2001:db8:86c0:24:224:86ff:fe9f:c628 @ 00:24:86:9f:c6:28&lt;/em&gt; &lt;em&gt;2001:db8:86c0:24:22cf:80ff:fea8:ec26 @ 20:cf:80:a8:ec:26&lt;/em&gt; &lt;em&gt;2001:db8:86c0:24:26f:f8ff:fe06:dcb4 @ 00:6f:f8:06:dc:b4&lt;/em&gt; &lt;em&gt;2001:db8:86c0:24:267:f2ff:fe52:8574 @ 00:67:f2:52:85:74&lt;/em&gt; &lt;em&gt;2001:db8:86c0:24:62fa:cdff:fe86:62bd @ 60:fa:cd:86:62:bd&lt;/em&gt; &lt;em&gt;2001:db8:86c0:24:8ed0:f8ff:fe8a:4d29 @ 8c:d0:f8:8a:4d:29&lt;/em&gt; &lt;em&gt;2001:db8:86c0:24:629a:ddff:fe45:6c08 @ 60:9a:dd:45:6c:08&lt;/em&gt; This example,  taken straight from the documentation and run on my local network (with MAC and v6 addresses changed to protect the innocent), will &amp;ldquo;Perform host scanning on the local network (“-l” option) using interface “eth0” (“-i” option). Use both ICMPv6 echo requests and unrecognized IPv6 options of type 10xxxxxx (default). Print link- link layer addresses along with IPv6 addresses (“-e” option). Be verbose (“-v” option).&amp;rdquo; One of the interesting things I saw available in this scan6 tool was the ability to narrow down a search based on a known OUI.  If someone wanted to search for virtual machines hosted by VMWare host and the IPv4 address of the VMWare host is known, this command would be useful for scanning from a host off net, scanning a network in the lab area:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sudo ./scan6 -i en0 -d 2001:db8:e00:4000::/64 –tgt-virtual-machines vmware –tgt-ipv4-embedded 10.17.4.&lt;sup&gt;195&lt;/sup&gt;&amp;frasl;&lt;sub&gt;32&lt;/sub&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; What this does is target the /64 but narrow down the search to vmwre specific virtual machines hosted on the vmware host at IPv4 address 10.17.4.&lt;sup&gt;195&lt;/sup&gt;&amp;frasl;&lt;sub&gt;32&lt;/sub&gt;. It is able to accomplish this because it can make assumptions about vmware (or virtual box) based on their OUI and how they build their The OUI will always be set to  00:05:59 for VMWare.  Additionally, The next 16-bits of the MAC address are set to the same value as the last 16 bits of the console operating system&amp;rsquo;s primary IPv4 address. If that were not enough, the final eight bits of the MAC address are set to a hash value based on the name of the virtual machine&amp;rsquo;s configuration file. That, according to the IETF draft and math, means that if you know the VMWare host IPv4 address you can reduce a scan of 64 bits down to just 8 bits.  This is a powerful set of tools that this post does not even scratch the surface of. Be careful using this scan tool, there are a number of devices that will have their neighbor table exhausted and potentially cause a DoS by running the networking gear out of resources, which in and of itself is another potential use of this tool.  There is a HUGE amount of work to be done and learned about IPv6, it&amp;rsquo;s not going away and, in fact, I&amp;rsquo;ve been using it in one form or another for 10 years or so.  If you&amp;rsquo;re a network engineer or a security professional you&amp;rsquo;re doing yourself a disservice by not learning it. In addition to the scan6 binary, the toolkit includes: flow6 frag6 icmp6 jumbo6 na6 ni6 ns6 ra6 rd6 rs6 scan6 tcp6 With the content providers and consumer ISPs providing native IPv6 more and more every day (my comcast service has a DHCPv6-PD /64 and a DHCPv6 /128 provisioned by default) the world at large is doing more v6.  If you&amp;rsquo;ve got MS windows on your network and it&amp;rsquo;s even relatively new, you&amp;rsquo;ve got v6 unless you policy it as disabled.  It&amp;rsquo;s tunneling it. Make these part of your arsenal for testing gear, pen testing, whatever. I promise it&amp;rsquo;s worth your time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Watch out, Gigamon (and others), Arista is bringing their A game</title>
      <link>https://forwardingplane.net/post/watch-out-gigamon-and-others-arista-is-bringing-their-a-game/</link>
      <pubDate>Sat, 16 Feb 2013 03:11:20 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/watch-out-gigamon-and-others-arista-is-bringing-their-a-game/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s no secret that I&amp;rsquo;m a fan of the model &lt;a href=&#34;http://www.aristanetworks.com&#34;&gt;Arista Networks&lt;/a&gt; is using to make gear and provide innovative services and products. In my opinion, they&amp;rsquo;re changing the landscape of campus and data center networking gear. I&amp;rsquo;m always a fan of the little guy trying to change the world and this falls under that category. For those that don&amp;rsquo;t know, Arista Networks is a &amp;ldquo;hardware&amp;rdquo; networking company that is using merchant silicon wrapped in their custom linux based operating system (which is very much like IOS).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/02/ARISTA-TAP.jpg&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/02/ARISTA-TAP-1024x768.jpg&#34; alt=&#34;ARISTA-TAP&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This model does a few things. It takes the time it would normally take a vendor to engineer and spin an ASIC, typically 1-3 years) and completely removes it. Instead, they rely on silicon manufacturers like Intel and &lt;a href=&#34;http://www.fulcrummicro.com&#34;&gt;Fulcrum&lt;/a&gt; for their already engineered and tested chips. Arista is generally touted as an extremely low latency box and has been widely deployed in the financial industry because of this. However, they&amp;rsquo;re not a one trick pony, not by any means. Their open architecture and OS allows for &lt;strong&gt;heavy&lt;/strong&gt; customization. In fact, unlike most others, it&amp;rsquo;s encouraged. Arista has put together an &lt;a href=&#34;https://eos.aristanetworks.com/home.php&#34;&gt;ecosystem for extending and expanding&lt;/a&gt; their &lt;a href=&#34;https://eos.aristanetworks.com/2011/03/eos-so-what-is-it/&#34;&gt;EOS&lt;/a&gt; networking operating system. Want something added to the CLI? Easy, it&amp;rsquo;s all python and can be changed on-box and submitted back to the community. They also have a very, very slick internal mechanism called the sysdb, but that&amp;rsquo;s another blog post altogether.   None of this is really new. Folks have been using merchant silicon forever. What is new and refreshing is the open nature of it. Additionally, the exclusive use of merchant silicon is something [I believe] is now in this class of hardware. With the open nature of this platform, it also lends itself well to the OpenFlow movement in that it&amp;rsquo;s essentially a linux box on well documented hardware of which the vendor is encouraging modification. In addition, it is a well tested data center product. I&amp;rsquo;m calling it now, this platform is going to go places in it&amp;rsquo;s market. For the newest addition to the capabilities portfolio, this is where it really gets interesting. As of 2/13/2013 Arista has added some very &lt;a href=&#34;http://www.aristanetworks.com/en/news/pressrelease/532-pr-20130212-01&#34;&gt;compelling tap aggregation options&lt;/a&gt;. What this means, is that you can now aggregate Nx1 or 10G at 40G, then symmetrically hash that across another 10G array to an IDS cluster. Why is this important? Monitoring fat links. Have some 100G? Good luck finding a security mechanism to watch that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/02/ARISTA-TAP.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/02/ARISTA-TAP.png&#34; alt=&#34;ARISTA TAP&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until now the only options for this are players like &lt;a href=&#34;http://www.gigamon.com&#34;&gt;Gigamon&lt;/a&gt;, &lt;a href=&#34;http://www.cpacket.com&#34;&gt;cPacket&lt;/a&gt; and maybe &lt;a href=&#34;http://www.mrv.com&#34;&gt;MRV&lt;/a&gt;. All are very expensive and one-off solutions. Arista offers a standard ethernet switch that can be managed by an existing networking team, integrated into existing network tools and maintained like any other router or switch. OpEx is a wash. Capital expenditure is standard [probably cheaper] than a normal Layer2 switch. It looks JUST like IOS, so the old networking guy that hates change will only complain a little that it&amp;rsquo;s not a blue box with a bridge on it. This may seem like a small deal, but the implications for passive security monitoring are huge. This feature alone will have a trickle down effect over the next few years since it&amp;rsquo;s something that is only recently being exercised in enterprise worlds. I suspect this will also have a very large impact to gigamon, who is really the current industry leader in this corner of the market, but is priced well beyond what many can afford. Arista can now do the symmetric hashing on layer2, layer3 or layer4 parameters. ACL support is also coming, although I&amp;rsquo;ve not seen it work like I have the hashing.   Oh, you want to know how to do it? =) It currently doesn&amp;rsquo;t exist in the CLI, but here is basically how it&amp;rsquo;s done. Thanks to an awesome Arista rep, the heavy lifting of parsing through the Acons interface is all condensed to a simple script. from the CLI: Log in and enable.```
7150-Source#bash
Arista Networks EOS shell
[arista@7150-Source ~]$ cd /mnt/flash&lt;/p&gt;

&lt;p&gt;[arista@7150-Source ~]$vi set_hash.sh
#!/bin/ti
rm /mnt/flash/set_hash_log.txt
cat &amp;lt;&amp;lt; EOF | Acons FocalPointV2 &amp;gt;&amp;gt; /mnt/flash/set_hash_log.txt 2&amp;gt;&amp;amp;1
from FmApi import *
fmDbgWriteRegisterField(0,0,0,0,&amp;ldquo;FM6000_HASH_LAYER3_PROFILE&amp;rdquo;,&amp;ldquo;SymmetrizeL3&amp;rdquo;,1)
fmDbgWriteRegisterField(0,0,0,0,&amp;ldquo;FM6000_HASH_LAYER3_PROFILE&amp;rdquo;,&amp;ldquo;SymmetrizeL4&amp;rdquo;,1)
fmDbgWriteRegisterField(0,0,0,0,&amp;ldquo;FM6000_HASH_LAYER2_KEY_PROFILE&amp;rdquo;,&amp;ldquo;SymmetrizeMAC&amp;rdquo;,1)
EOF
exit 0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Done. This, of course, doesn&#39;t include any of the port channel and monitor interface configuration, but if you&#39;re this deep, you probably know how to do that already. If you&#39;d like to dump this to a log, add the following lines to the end of the script before the &#34;EOF&#34;```&#34; data-lang=&#34;Done. This, of course, doesn&#39;t include any of the port channel and monitor interface configuration, but if you&#39;re this deep, you probably know how to do that already. If you&#39;d like to dump this to a log, add the following lines to the end of the script before the &#34;EOF&#34;```&#34;&gt;fmDbgDumpRegisterV2(0,0,0,&amp;#34;FM6000\_HASH\_LAYER2\_KEY\_PROFILE&amp;#34;)
fmDbgDumpRegisterV2(0,0,0,&amp;#34;FM6000\_HASH\_LAYER3\_PROFILE&amp;#34;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;*As the CLI bits become available in EOS 4.12, this post will be amended to the more supportable way of managing this awesome new feature.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Floodlight OpenFlow controller on CentOS 6</title>
      <link>https://forwardingplane.net/post/building-a-floodlight-openflow-controller-on-centos-6/</link>
      <pubDate>Mon, 04 Feb 2013 13:10:24 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-a-floodlight-openflow-controller-on-centos-6/</guid>
      <description>&lt;p&gt;A bit of back history: I came from BSD land. I was a FreeBSD user from way back in the 1990s. BSD land is a land of secure boxes and very high uptimes. It&amp;rsquo;s also a land of arguably clunky package support, a lot of compiling by hand and these days, not nearly as encompassing package and network tuning support. &lt;a href=&#34;http://www.forwardingplane.net/2011/06/better-support-for-linux-and-annoyed-about-it/ &amp;quot;Better support for Linux (and annoyed about it&#34;&gt;I decided to move to Linux&lt;/a&gt;&amp;rdquo;) a while ago, reluctantly, and chose Debian as my flavor of choice. I do love debian, however, I very quiuckly realized that even debian is a bit of a fringe OS build of Linux. Commercial support is nearly all based on RHEL. Folks that run RHEL also run CentOS. We run both in my day job. About a year ago to I, once again, decided I needed to learn CentOS. There are a lot of posts about building floodlight as an openflow controller. I used this tutorial &lt;a href=&#34;http://networkstatic.net/floodlight-openflow-controller-gui-applet/&#34;&gt;Brent Salisbury did&lt;/a&gt; to build mine. There is a good one on the &lt;a href=&#34;http://floodlight.openflowhub.org/getting-started/&#34;&gt;openflow hub&lt;/a&gt; site as well. I&amp;rsquo;ve found that many are based on Debian or Ubuntu, which can be subtly different than a CentOS / RHEL experience.   In CentOS, log in and sudo -s or su to root. Install the prereqs: &lt;em&gt;yum -y install build-essential default-jdk ant python-dev eclipse git&lt;/em&gt; &lt;em&gt;mkdir /services/floodlight&lt;/em&gt; &lt;em&gt;cd /services/floodlight/&lt;/em&gt; &lt;em&gt;git clone git://github.com/floodlight/floodlight.git ant&lt;/em&gt; Start floodlight in the background. &lt;em&gt;./floodlight.sh &amp;amp;&lt;/em&gt; Because I&amp;rsquo;m terrible at looking at directions, I went to the base URL. This will yield an error that looks something like this: &lt;em&gt;{&amp;ldquo;name&amp;rdquo;:&amp;ldquo;Not Found&amp;rdquo;,&amp;ldquo;error&amp;rdquo;:true,&amp;ldquo;throwable&amp;rdquo;:null,&amp;ldquo;description&amp;rdquo;:&amp;ldquo;The server has not found anything matching the request URI&amp;rdquo;,&amp;ldquo;success&amp;rdquo;:false,&amp;ldquo;informational&amp;rdquo;:false,&amp;ldquo;code&amp;rdquo;:404,&amp;ldquo;reasonPhrase&amp;rdquo;:&amp;ldquo;Not Found&amp;rdquo;,&amp;ldquo;uri&amp;rdquo;:&amp;ldquo;&lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5&amp;quot;,&amp;quot;serverError&amp;quot;:false,&amp;quot;connectorError&amp;quot;:false,&amp;quot;clientError&amp;quot;:true,&amp;quot;globalError&amp;quot;:false,&amp;quot;redirection&amp;quot;:false,&amp;quot;recoverableError&amp;quot;:false&#34;&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5&amp;quot;,&amp;quot;serverError&amp;quot;:false,&amp;quot;connectorError&amp;quot;:false,&amp;quot;clientError&amp;quot;:true,&amp;quot;globalError&amp;quot;:false,&amp;quot;redirection&amp;quot;:false,&amp;quot;recoverableError&amp;quot;:false&lt;/a&gt;}&lt;/em&gt; The right way to access floodlight is to use the entire URL: http://&lt;address&gt;:8080/ui/index.html Learn from my stupidity.   Here is a script to build it for you:```
#!/bin/bash&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;Installing prerequisits:&amp;rdquo;
yum -y install build-essential default-jdk ant python-dev eclipse git&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;Installing floodlight to /services/floodight/&amp;rdquo;
mkdir /services/floodlight
cd /services/floodlight/
git clone git://github.com/floodlight/floodlight.git
ant&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;Starting floodlight:&amp;rdquo;&lt;/p&gt;

&lt;p&gt;./floodlight.sh&amp;amp;
echo &amp;ldquo;Floodlight started, point your beowser at http://&lt;address&gt;:8080/ui/index.html&amp;rdquo;
```&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Headless VirtualBox host on CentOS</title>
      <link>https://forwardingplane.net/post/headless-virtualbox-host-on-centos/</link>
      <pubDate>Thu, 31 Jan 2013 21:48:47 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/headless-virtualbox-host-on-centos/</guid>
      <description>&lt;p&gt;Starting from a base CentOS system with nothing configured, and referencing the &lt;a href=&#34;http://wiki.centos.org/HowTos/Virtualization/VirtualBox&#34;&gt;CentOS wiki&lt;/a&gt;, here is how I like to set up a headless virtualbox environment: Disable selinux. It&amp;rsquo;s overly cumbersome and is enabled by default in CentOS.  I like to permanently disable it even though the default is permissive.  I ride the edge, I know.```
vi /etc/selinux/config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
 and change

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SELINUX=enabled&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
to

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SELINUX=disabled&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Then reboot.

Using the methodology I originally found found [here](http://stackoverflow.com/questions/14016286/how-to-programmatically-install-the-latest-epel-release-rpm-without-knowing-its), I like to install the epel repo using this method:```
cat &amp;lt;&amp;lt;EOM &amp;gt;/etc/yum.repos.d/epel-bootstrap.repo
 \[epel\]
 name=Bootstrap EPEL
 mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=epel-\\$releasever&amp;amp;arch=\\$basearch
 failovermethod=priority
 enabled=0
 gpgcheck=0
 EOM
``````
yum --enablerepo=epel -y install epel-release
 rm -f /etc/yum.repos.d/epel-bootstrap.repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install rpmforge repo```
rpm &amp;ndash;import &lt;a href=&#34;http://apt.sw.be/RPM-GPG-KEY.dag.txt&#34;&gt;http://apt.sw.be/RPM-GPG-KEY.dag.txt&lt;/a&gt;
 rpm -Uvh &lt;a href=&#34;http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm&#34;&gt;http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm&lt;/a&gt;
 yum clean all&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Install the virtualbox repo```&#34; data-lang=&#34;Install the virtualbox repo```&#34;&gt;yum install -y wget
cd /etc/yum.repos.d
wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo
yum update&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the interesting bits, lets get to the vbox install.  Although we have enabled dkms, I like to also install as if we didn&amp;rsquo;t.  It populates the system with the pieces we need in a way that I&amp;rsquo;m used to.  I&amp;rsquo;m not a sysadmin by day, so this may be redundant.  YMMV, etc.   First, install the Development Tools. There are a lot here, it may take a bit depending on machine specs and connectivity speed in relation to mirrors. ```
yum groupinstall &amp;ldquo;Development Tools&amp;rdquo;
yum install VirtualBox-4.2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Then start up the service and you should see something like this:```&#34; data-lang=&#34;Then start up the service and you should see something like this:```&#34;&gt;service vboxdrv setup
Stopping VirtualBox kernel modules \[ OK \]
Uninstalling old VirtualBox DKMS kernel modulesError! There are no instances of module: vboxhost
4.2.6 located in the DKMS tree.
 \[ OK \]
Trying to register the VirtualBox kernel modules using DKMS
 \[ OK \]
Starting VirtualBox kernel modules \[ OK \]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point you&amp;rsquo;ve got virtualbox done and installed. Now, the &lt;em&gt;real&lt;/em&gt; interesting part begins: VMs. I have a centos template that I built on my laptop.  It&amp;rsquo;s got the settings I like and I can just import it.  You can also build a new one, but that&amp;rsquo;s for a different post.  I moved the template via scp over to the newly anointed VM host. Now, I just need to import it and I can start cloning.  &lt;a href=&#34;http://www.virtualbox.org/manual/ch08.html&#34;&gt;vboxmanage&lt;/a&gt; is the command we&amp;rsquo;re going to be utilizing heavily and it&amp;rsquo;s really powerful.  ```
vboxmanage import /home/buraglio/centos-63-template.ova&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
Interpreting /home/buraglio/centos-63-template.ova...
OK.
Disks: vmdisk1 150 1359413248 http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized centos-63-template-disk1.vmdk 512919552 -1 
Virtual system 0:
 0: Suggested OS type: &amp;quot;Linux26\_64&amp;quot;
 (change with &amp;quot;--vsys 0 --ostype &amp;lt;type&amp;gt;&amp;quot;; use &amp;quot;list ostypes&amp;quot; to list all possible values)
 1: Suggested VM name &amp;quot;centos-63-template&amp;quot;
 (change with &amp;quot;--vsys 0 --vmname &amp;lt;name&amp;gt;&amp;quot;)
 2: Number of CPUs: 2
 (change with &amp;quot;--vsys 0 --cpus &amp;lt;n&amp;gt;&amp;quot;)
 3: Guest memory: 4096 MB
 (change with &amp;quot;--vsys 0 --memory &amp;lt;MB&amp;gt;&amp;quot;)
 4: Network adapter: orig ur1-vm1 72.36.126.200/29, config 5, extra type=Bridged
 5: CD-ROM
 (disable with &amp;quot;--vsys 0 --unit 5 --ignore&amp;quot;)
 6: SCSI controller, type LsiLogic
 (change with &amp;quot;--vsys 0 --unit 6 --scsitype {BusLogic|LsiLogic}&amp;quot;;
 disable with &amp;quot;--vsys 0 --unit 6 --ignore&amp;quot;)
 7: IDE controller, type PIIX4
 (disable with &amp;quot;--vsys 0 --unit 7 --ignore&amp;quot;)
 8: IDE controller, type PIIX4
 (disable with &amp;quot;--vsys 0 --unit 8 --ignore&amp;quot;)
 9: Hard disk image: source image=centos-63-template-disk1.vmdk, target path=/home/buraglio/VirtualBox VMs/centos-63-template/centos-63-template-disk1.vmdk, controller=6;channel=0
 (change target path with &amp;quot;--vsys 0 --unit 9 --disk path&amp;quot;;
 disable with &amp;quot;--vsys 0 --unit 9 --ignore&amp;quot;)
0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
Successfully imported the appliance.
```

It&#39;s there. you should now have a folder in your home directory that has the VM in it. 

```
ls -la VirtualBox\\ VMs/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;total 12
drwx&amp;mdash;&amp;mdash; 3 buraglio buraglio 4096 Jan 29 20:23 .
drwx&amp;mdash;&amp;mdash;. 4 buraglio buraglio 4096 Jan 29 20:23 ..
drwx&amp;mdash;&amp;mdash; 2 buraglio buraglio 4096 Jan 29 20:23 centos-63-template&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-to really make this useful, I clone all the VMs to the names I want and don&#39;t use the template at all. Now list the vms to verify what you have:```&#34; data-lang=&#34;to really make this useful, I clone all the VMs to the names I want and don&#39;t use the template at all. Now list the vms to verify what you have:```&#34;&gt;vboxmanage list vms
&amp;#34;centos-63-template&amp;#34; {4875b540-5514-4d0b-bba8-ce255b7f44a2}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have one VM named &amp;ldquo;centos-63-template&amp;rdquo;, which is exactly what I wanted. Now clone this VM to the first usable VM, I&amp;rsquo;m building a floodlight OpenFlow controller, so I&amp;rsquo;ll name it accordingly.```
vboxmanage clonevm centos-63-template &amp;ndash;name floodlight1 &amp;ndash;register
0%&amp;hellip;10%&amp;hellip;20%&amp;hellip;30%&amp;hellip;40%&amp;hellip;50%&amp;hellip;60%&amp;hellip;70%&amp;hellip;80%&amp;hellip;90%&amp;hellip;100%
Machine has been successfully cloned as &amp;ldquo;floodlight1&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Now list the vms to make sure it is listed:```&#34; data-lang=&#34;Now list the vms to make sure it is listed:```&#34;&gt;vboxmanage list vms
``````
&amp;#34;centos-63-template&amp;#34; {4875b540-5514-4d0b-bba8-ce255b7f44a2}
``````
&amp;#34;floodlight1&amp;#34; {8fb4f03d-d117-43d5-b4bf-24cdcc481686}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now here is the part I really like about virtualbox headless mode (and yes, I know others like qemu and xen can do this), when a virtual machine is started in headless mode, the console of that host can be redirected to an RDP instance. This makes it very convenient to manage systems on an out of band network like an isolated vlan or other non-routed or non-publically available network. It also makes it very convenient for spinning up a new VM that doesn&amp;rsquo;t have an IP stack configured. Its also very handy if you have a bad day and typo a host firewall rule or network config file. This has saved me a trip more than one time. To do this, you&amp;rsquo;ll need the vrdp extension pack.  To list the installed extension packs, once again, use the vboxmanage command  ```
VBoxManage list extpacks
Extension Packs: 0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-The extension pack for my version is available [here](http://download.virtualbox.org/virtualbox/4.2.6/Oracle_VM_VirtualBox_Extension_Pack-4.2.6-82870.vbox-extpack).```&#34; data-lang=&#34;The extension pack for my version is available [here](http://download.virtualbox.org/virtualbox/4.2.6/Oracle_VM_VirtualBox_Extension_Pack-4.2.6-82870.vbox-extpack).```&#34;&gt;sudo VBoxManage extpack install Oracle\_VM\_VirtualBox\_Extension\_Pack-4.2.6-82870.vbox-extpack 
0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
Successfully installed &amp;#34;Oracle VM VirtualBox Extension Pack&amp;#34;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point we&amp;rsquo;re ready to fire up the VM and connect to the console.```
vboxheadless -startvm floodlight1 -vrde on -vrdeproperty &amp;ldquo;TCP/Ports&amp;rdquo;=3390&amp;amp;
Oracle VM VirtualBox Headless Interface 4.2.6
&amp;copy; 2008-2012 Oracle Corporation
All rights reserved.&lt;/p&gt;

&lt;p&gt;VRDE server is listening on port 3390.
```The above command will start the VM &amp;ldquo;floodlight1&amp;rdquo;, enable vrde and set the vrde port to 3390. You should now be able to connect to the console of the host using any free or included RDP compatible client. I use the microsoft office for mac provided rdp client. &lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/01/RDC.png&#34; alt=&#34;RDC&#34; /&gt; You&amp;rsquo;ll see an error when connecting since the server can&amp;rsquo;t be verified.  This is expected.     &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/01/RDC-Verify.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/01/RDC-Verify.png&#34; alt=&#34;RDC Verify&#34; /&gt;&lt;/a&gt;   Hit connect and ta-da! Console on your VM.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/01/Console.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/01/Console-1024x658.png&#34; alt=&#34;Console&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  The best part about this is that it allows for really flexible management of virtual machines from a geographically different location.  Other than the initial install of CentOS 6, this was done 100% remotely, without a windows host and without an expensive hypervisor license. This is perfect for labs and learning virtualization, I&amp;rsquo;d even consider this totally fine for production.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diff RANCID router configs with SVN</title>
      <link>https://forwardingplane.net/post/diff-rancid-router-configs-with-svn/</link>
      <pubDate>Fri, 25 Jan 2013 00:27:09 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/diff-rancid-router-configs-with-svn/</guid>
      <description>

&lt;p&gt;If you are running a network and aren&amp;rsquo;t using &lt;a href=&#34;http://shrubbery.net/rancid/&#34;&gt;RANCID&lt;/a&gt;, you should give it a serious look.  RANCID is a cross platform configuration management toolkit for backing up router configurations and certain environmental and hardware information into version control.  It&amp;rsquo;s been around for as long as I can remember and supports nearly every platform I can think of, including a &lt;a href=&#34;http://www.forwardingplane.net/2012/11/vdxrancid-contrib-scripts/&#34; title=&#34;VDXrancid contrib scripts&#34;&gt;few&lt;/a&gt; &lt;a href=&#34;http://www.forwardingplane.net/2011/06/alurancid-and-pfrancid/&#34; title=&#34;alurancid and pfrancid&#34;&gt;modules&lt;/a&gt; that I cobbled together myself.  There is are a few nice web based front ends for CVS and SVN, I prefer to use &lt;a href=&#34;http://www.viewvc.org&#34;&gt;ViewVC&lt;/a&gt; because I have a lot of experience with it, however, there may be cases where a web server isn&amp;rsquo;t a good option, unavailable or just too much work.  In this case, you&amp;rsquo;ll want to know how to diff those configs from the CLI using the existing tools.  I find myself always forgetting the exact syntax of how to do this, so here it is. I prefer to use SVN, so we&amp;rsquo;ll talk about that one here.   svn list will give a list of current devices in version control:&lt;code&gt;
svn list
&lt;/code&gt;```
rtr1.company.com
rtr2.company.com
rtr3.company.com
sw1.company.com
sw2.company.com&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-To look at a router config:```&#34; data-lang=&#34;To look at a router config:```&#34;&gt;svn cat &amp;lt;router&amp;gt;
svn cat rtr1.company.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See all revisions: svn log &lt;router&gt;```&lt;/p&gt;

&lt;h2 id=&#34;svn-log-rtr1-company-com&#34;&gt;svn log rtr1.company.com&lt;/h2&gt;

&lt;p&gt;r863 | _rancid | 2013-01-18 12:51:59 -0600 (Fri, 18 Jan 2013) | 1 line&lt;/p&gt;

&lt;h2 id=&#34;updates-change-made-by-buraglio&#34;&gt;updates - Change made by: buraglio&lt;/h2&gt;

&lt;p&gt;r848 | _rancid | 2013-01-09 14:00:27 -0600 (Wed, 09 Jan 2013) | 1 line&lt;/p&gt;

&lt;h2 id=&#34;updates&#34;&gt;updates&lt;/h2&gt;

&lt;p&gt;r847 | _rancid | 2013-01-09 02:07:42 -0600 (Wed, 09 Jan 2013) | 1 line&lt;/p&gt;

&lt;h2 id=&#34;updates-1&#34;&gt;updates&lt;/h2&gt;

&lt;p&gt;r832 | _rancid | 2012-12-12 09:42:33 -0600 (Wed, 12 Dec 2012) | 1 line&lt;/p&gt;

&lt;h2 id=&#34;updates-change-made-by-buraglio-1&#34;&gt;updates - Change made by: buraglio&lt;/h2&gt;

&lt;p&gt;r804 | _rancid | 2012-11-27 14:00:28 -0600 (Tue, 27 Nov 2012) | 1 line
updates&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Diff revisions: svn diff -r &lt;version1&gt;:&lt;version2&gt; &lt;router&gt;```&#34; data-lang=&#34;Diff revisions: svn diff -r &lt;version1&gt;:&lt;version2&gt; &lt;router&gt;```&#34;&gt;svn diff -r r863:r847 rtr1.company.com

Index: 710rtr.ui-iccn.org
===================================================================
--- rtr1.company.com	(revision 863)
+++ rtr1.company.com	(revision 847)
@@ -497,7 +497,6 @@
 !
 interface ethernet 1/1
  port-name rtr2 (1-1-11-2:e1/2)
- enable
  ip ospf area 0
  ip ospf cost 8
  ip address 10.209.143.1/30&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s basically it. Anything you can do from svn, you can do with your RANCID gathered SVN data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install and use the Airport utility under Mountain Lion</title>
      <link>https://forwardingplane.net/post/how-to-install-and-use-the-airport-utility-under-mountain-lion/</link>
      <pubDate>Wed, 09 Jan 2013 09:58:47 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/how-to-install-and-use-the-airport-utility-under-mountain-lion/</guid>
      <description>&lt;p&gt;I have a bunch of Apple wireless gear  at my house.  It&amp;rsquo;s inexpensive, feature rich and easy to maintain.  However, with the update to mountain lion a while ago, the ability to install  the older Airport Utility stopped.  This is annoying since I have what apple now considers &amp;ldquo;advanced&amp;rdquo; features like IPv6 at my home and essentially all my gear here is a lab (except for the plex server =) I&amp;rsquo;ve been spending a lot of time on &lt;a href=&#34;http://www.cacti.net&#34;&gt;cacti&lt;/a&gt; lately, and I wanted to test out the syslog plugin&amp;hellip;.ok, easy.  It&amp;rsquo;s all set up.  Then I got to thinking &amp;ldquo;why not just let this run and syslog all my gear like the good &amp;lsquo;ol days?&amp;rdquo;  Nerdy?  Yes, but hey, I collect flow data at home and have a &lt;a href=&#34;http://www.forwardingplane.net/homenet/&#34;&gt;weathermap&lt;/a&gt; of my home network.  It keeps me eating my own dog food with the netflow exporter plugin on &lt;a href=&#34;http://www.pfsense.org&#34;&gt;pfSense&lt;/a&gt; and it&amp;rsquo;s fun. Uh, oh.  No ability to set syslog receiver on the airport gear anymore.  Not cool.  [Guess what, no way to change IPv6 settings anymore either] No way to do a standard install of the old utility. Lame, Apple, Lame.  After poking around a bit I found a pretty easy way to do it as long as you&amp;rsquo;re not afraid of the command line. Since at least a few other folks will want to do this, here it is: &lt;a href=&#34;http://support.apple.com/kb/DL1536&#34;&gt;Download the App&lt;/a&gt; from Apple. Mount the Downloaded disk. Open Terminal. Type:&lt;code&gt;
pkgutil --expand /Volumes/AirPortUtility/AirPortUtility56.pkg
cd ~/Desktop/AirPortTemp~/Desktop/AirPortTemp/AirPortUtility56Lion.pkg/
open Payload
cd &amp;quot;Payload 2 2/Applications/Utilities/&amp;quot;
open .
&lt;/code&gt;&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/01/Screen-Shot-2013-01-08-at-11.32.08-PM.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/01/Screen-Shot-2013-01-08-at-11.32.08-PM.png&#34; alt=&#34;&#34; title=&#34;Screen Shot 2013-01-08 at 11.32.08 PM&#34; /&gt;&lt;/a&gt; Done.  That should open a finder window with the App in it.  You can copy it to you /Applications/Utilities folder and use it alongside the newer one.  You&amp;rsquo;ll need to authenticate to copy into the /Applications/Utilities directory. Edits made and Poof!  Now I can see my syslogs from within cacti.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DNS utilities on CentOS</title>
      <link>https://forwardingplane.net/post/dns-utilities-on-centos/</link>
      <pubDate>Fri, 04 Jan 2013 10:13:28 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/dns-utilities-on-centos/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s always annoying to me, being a convert from *BSD to Linux, that tools lke dig and host aren&amp;rsquo;t in the minimal base install.  I realise that this makes me somewhat of a hypocrite, as I prefer an additive system rather than a subtractive base OS.  Nevertheless, I&amp;rsquo;m continually surprised that &amp;ldquo;host&amp;rdquo; isn&amp;rsquo;t available after installing a minimal CentOS system without adding an additional package.  So, since I always forget, here is a quick blog post to remind me and any other converts how to install those tools:```
 yum -y install bind-utils&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-That&#39;s it.  Tragedy avoided.  Now I can make sure my AAAA records are working.```&#34; data-lang=&#34;That&#39;s it.  Tragedy avoided.  Now I can make sure my AAAA records are working.```&#34;&gt;\[buraglio@cupcake httpd\]# dig www.forwardingplane.net -t AAAA
; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.8.2rc1-RedHat-9.8.2-0.10.rc1.el6\_3.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; www.forwardingplane.net -t AAAA
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 47725
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
;; QUESTION SECTION:
;www.forwardingplane.net. IN AAAA
;; ANSWER SECTION:
www.forwardingplane.net. 86364 IN AAAA 2607:f2f8:4980::2
;; Query time: 1 msec
;; SERVER: 10.209.209.1#53(10.209.209.1)
;; WHEN: Thu Jan 3 22:49:35 2013
;; MSG SIZE rcvd: 69&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>CentOS sshguard install for limiting ssh scans</title>
      <link>https://forwardingplane.net/post/centos-sshguard-install-for-limiting-ssh-scans/</link>
      <pubDate>Sun, 16 Dec 2012 03:18:27 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/centos-sshguard-install-for-limiting-ssh-scans/</guid>
      <description>

&lt;p&gt;Securing SSH is a form or art.  It&amp;rsquo;s often debated, much like blocking all ICMP packets (which I normally disagree with).  If you need good proof, read &lt;a href=&#34;http://lonesysadmin.net/2012/11/20/changing-sshd-port-numbers-continues-to-be-a-bad-idea/&#34;&gt;these&lt;/a&gt; &lt;a href=&#34;http://lonesysadmin.net/2012/10/19/on-using-alternate-ports-for-ssh/&#34;&gt;posts&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/plankers&#34;&gt;Bob Plankers&lt;/a&gt;.  There is a camp that likes to promote moving to a non-standard port.  There is a faction that likes to block it completely except from a handful of hosts.  Then there are those that like to leave it open all together.  Running naked in the digital jungle. I tend to err on the side of blocking except for jump hosts.  This is a pretty time proven methodology.  However, what about the hosts that &lt;strong&gt;need&lt;/strong&gt; to be open? A hardened jump host or public shell box comes to mind. Enter &lt;a href=&#34;http://www.sshguard.net&#34;&gt;sshguard&lt;/a&gt;. SSH Guard is an amazing little piece of software that takes the heavy lifting out of blocking all of those scans and automates removal of blocks.  It works across a myriad of popular unix platforms. From &lt;a href=&#34;http://www.sshguard.net&#34;&gt;http://www.sshguard.net&lt;/a&gt;: &lt;em&gt;Sshguard monitors servers from their logging activity. When logs convey that someone is doing a Bad Thing, sshguard reacts by blocking he/she/it for a bit. Sshguard has a touchy personality: when a naughty tyke insists disturbing your host, it reacts firmer and firmer.&lt;/em&gt; &lt;em&gt;Sshguard supports many services out of the box, recognizes severallog formats, and can operate many firewall systems. Many users appreciate its ease of use, compatibility and feature richness.&lt;/em&gt; I like it because they have not left out some of the less common distros, but sinceI&amp;rsquo;ve mostly converted over to CentOS, this focus is how to set it up on Centos 6.3.   We&amp;rsquo;ll assume you have epel repo and rpmforge repo installed. I prefer &lt;a href=&#34;http://www.balabit.com/network-security/syslog-ng&#34;&gt;syslog-ng&lt;/a&gt; so lets install that.```
sudo yum -y install syslog-ng&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chkconfig syslog-ng on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chkconfig rsyslog off&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-This isn&#39;t necessary, but I&#39;d recommend it. Next, I lke to disable selinux.  It&#39;s on be default in CentOS and I really don&#39;t need what it offers.  I find it annoying and far too restrictive and this won&#39;t build correctly without it disabled in my experience.```&#34; data-lang=&#34;This isn&#39;t necessary, but I&#39;d recommend it. Next, I lke to disable selinux.  It&#39;s on be default in CentOS and I really don&#39;t need what it offers.  I find it annoying and far too restrictive and this won&#39;t build correctly without it disabled in my experience.```&#34;&gt;sudo vi /etc/selinux/config&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the line that reads```
SELINUX=enabled&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-to```&#34; data-lang=&#34;to```&#34;&gt;SELINUX=disabled&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;rsquo;ll need to reboot to make this take effect. Note that this will disable selinux completely and permanently.  &lt;a href=&#34;http://www.revsys.com/writings/quicktips/turn-off-selinux.html&#34;&gt;There are ways to temporarily disable it&lt;/a&gt; if you would prefer.```
sudo reboot&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Download sshguard.  I didn&#39;t find it in any repos for Centos 6.x.  I may be mistaken, but I went this route.```&#34; data-lang=&#34;Download sshguard.  I didn&#39;t find it in any repos for Centos 6.x.  I may be mistaken, but I went this route.```&#34;&gt;wget http://sourceforge.net/projects/sshguard/files/sshguard/sshguard-1.5/sshguard-1.5.tar.bz2/download&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unpack it.```
bunzip2 sshguard-1.5.tar.bz2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar -xvf sshguard-1.5.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cd sshguard-1.5&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-I like to do minimal installs of Linux, so I need to add gcc before I can compile.  This will likely install some dependancies if it&#39;s a new minimal install.  Same goes for make```&#34; data-lang=&#34;I like to do minimal installs of Linux, so I need to add gcc before I can compile.  This will likely install some dependancies if it&#39;s a new minimal install.  Same goes for make```&#34;&gt;sudo yum install gcc make
``````
sudo ./configure --with-firewall=iptables
``````
sudo make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK, you should have it installed at this point.  You can verify by doing:```
ls -la /usr/local/sbin/sshguard&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-which should yield something like this:```&#34; data-lang=&#34;which should yield something like this:```&#34;&gt;\-rwxr-xr-x 1 root root 399995 Dec 16 02:28 /usr/local/sbin/sshguard&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great, now we need to create firewall tables for sshguard for IPv4, and if you&amp;rsquo;re keeping up to date, IPv6.```
sudo iptables -N sshguard&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ip6tables -N sshguard
```Now tell iptables to drop that traffic. Make sure you don&#39;t have a permit ssh rule above this line or it won&#39;t work.```
sudo iptables -A INPUT -j sshguard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sudo ip6tables -A INPUT -j sshguard&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Save your config.  ```
sudo iptables-save &amp;lt; /etc/sysconfig/iptables
``````
sudo ip6tables-save &amp;lt; /etc/sysconfig/ip6tables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the examples below, we&amp;rsquo;ll just look at IPv4 to keep the post a bit shorter, but the v6 pieces are all identical save for the file names.  If you&amp;rsquo;re running v6 you should remember to secure it just as you would v4. Mine ruleset is pretty vanilla, mostly stock with the exception of ssl and dns.```
# Completed on Sat Dec 15 21:02:09 2012&lt;/p&gt;

&lt;h1 id=&#34;generated-by-iptables-save-v1-4-7-on-sat-dec-15-21-02-09-2012&#34;&gt;Generated by iptables-save v1.4.7 on Sat Dec 15 21:02:09 2012&lt;/h1&gt;

&lt;p&gt;*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [6585:1425605]
:sshguard - [0:0]
-A INPUT -m state &amp;ndash;state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -j sshguard
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state &amp;ndash;state NEW -m tcp &amp;ndash;dport 22 -j ACCEPT
-A INPUT -p tcp -m state &amp;ndash;state NEW -m tcp &amp;ndash;dport 443 -j ACCEPT
-A INPUT -p udp -m state &amp;ndash;state NEW -m udp &amp;ndash;dport 53 -j ACCEPT
-A INPUT -p tcp -m state &amp;ndash;state NEW -m tcp &amp;ndash;dport 53 -j ACCEPT
-A INPUT -j REJECT &amp;ndash;reject-with icmp-host-prohibited
-A FORWARD -j REJECT &amp;ndash;reject-with icmp-host-prohibited
COMMIT&lt;/p&gt;

&lt;h1 id=&#34;completed-on-sat-dec-15-21-02-09-2012&#34;&gt;Completed on Sat Dec 15 21:02:09 2012&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Note: I did have to relocate the sshguard rule to right below the first INPUT rule to make it actually effective.&#34; data-lang=&#34;Note: I did have to relocate the sshguard rule to right below the first INPUT rule to make it actually effective.&#34;&gt;Now we need to activate it.  This is pretty straightforward.  We essentially need to tell syslog to call sshguard based on activity and it&amp;#39;s why I prefer syslog-ng.  It&amp;#39;s very flexible and easy to add this stuff right in.  I&amp;#39;ve been using it for over a decade and it the most flexible syslog server I&amp;#39;ve found.  ```
vi /etc/syslog-ng/syslog-ng.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on the &lt;a href=&#34;http://www.sshguard.net/docs/setup/getlogs/syslog-ng/&#34;&gt;instructions at the sshguard site&lt;/a&gt; (which also have details for extending this to more than just ssh; I&amp;rsquo;ll do a post on that for CentOS at some point too), just add the following to the bottom of your syslog-ng.conf file:```
# pass only entries with auth+authpriv facilities from programs other than sshguard
filter f_sshguard { facility(auth, authpriv) and not program(&amp;ldquo;sshguard&amp;rdquo;); };&lt;/p&gt;

&lt;h1 id=&#34;pass-entries-built-with-this-format&#34;&gt;pass entries built with this format&lt;/h1&gt;

&lt;p&gt;destination sshguard {
 program(&amp;ldquo;/usr/local/sbin/sshguard&amp;rdquo;
 template(&amp;ldquo;$DATE $FULLHOST $MSGHDR$MESSAGE\n&amp;rdquo;)
 );
};
log { source(s_sys); filter(f_sshguard); destination(sshguard); };&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Then restart syslog-ng```&#34; data-lang=&#34;Then restart syslog-ng```&#34;&gt;sudo service syslog-ng stop
``````
sudo service syslog-ng start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;rsquo;ll probably see these errors, they can be ignored if you&amp;rsquo;re not using the afsql module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Plugin module not found in &#39;module-path&#39;; module-path=&#39;/lib64/syslog-ng&#39;, module=&#39;afsql&#39;
``````
Starting syslog-ng: Plugin module not found in &#39;module-path&#39;; module-path=&#39;/lib64/syslog-ng&#39;, module=&#39;afsql&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ssh into localhost or in from an outside host. This will create a log and cause syslog-ng to call sshguard. At that point you should see this when looking for sshguard:```
ps auxww | grep sshguard&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root 14010 0.0 0.0 16924 1260 ? Sl 20:49 0:00 /usr/local/sbin/sshguard
```You should see it in your iptables rules:```
\[buraglio@centos63 sysconfig\]# sudo iptables -L
Chain INPUT (policy ACCEPT)
target prot opt source destination 
ACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED 
sshguard all -- anywhere anywhere 
ACCEPT icmp -- anywhere anywhere 
ACCEPT all -- anywhere anywhere 
ACCEPT tcp -- anywhere anywhere state NEW tcp dpt:ssh 
ACCEPT tcp -- anywhere anywhere state NEW tcp dpt:https 
ACCEPT udp -- anywhere anywhere state NEW udp dpt:domain 
ACCEPT tcp -- anywhere anywhere state NEW tcp dpt:domain 
ACCEPT tcp -- anywhere anywhere state NEW tcp dpt:ndmp 
ACCEPT tcp -- anywhere anywhere state NEW tcp dpt:dnp 
REJECT all -- anywhere anywhere reject-with icmp-host-prohibited
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chain FORWARD (policy ACCEPT)
target prot opt source destination
REJECT all &amp;ndash; anywhere anywhere reject-with icmp-host-prohibited&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Chain OUTPUT (policy ACCEPT)
target prot opt source destination
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chain sshguard (1 references)
target prot opt source destination
```That&amp;rsquo;s pretty much it. Let it sit and wait. It will block scanners automagically and then unblock them after a period of time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brocade VDX First Impressions....</title>
      <link>https://forwardingplane.net/post/brocade-vdx-first-impressions/</link>
      <pubDate>Sat, 08 Dec 2012 17:53:00 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/brocade-vdx-first-impressions/</guid>
      <description>&lt;p&gt;I recently had the opportinity to work with the much-anticipated &lt;a href=&#34;http://www.brocade.com/launch/cloud-clarity/solutions-technology-innovation.html&#34;&gt;Brocade VDX &amp;ldquo;Ethernet Fabric&amp;rdquo;&lt;/a&gt; platform.  I do admit tha tI&amp;rsquo;m intrigued by this product.  I&amp;rsquo;d seen it work multiple times in demos and it worked so well and looked to easy that we actively tried to throw curve balls at the demo organizer to prove it wasn&amp;rsquo;t canned. &lt;img src=&#34;http://www.brocade.com/images/products/vdx-6720-dc-switches/VDX6720-24_front_large.jpg&#34; alt=&#34;&#34; /&gt; It succeeded. The hardware hashing across the VLAGs is very slick.  The VMware VSwitch integration worked well and was handy.  With the movement to virtualization, this is an important piece for most data center folks. That being said, some people have very specific data center requirements that aren&amp;rsquo;t really the same as an enterprise.  For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t firewall everything at the DC. That&amp;rsquo;s right. I said it.  Firewalls don&amp;rsquo;t solve all security problems.  Take that &amp;ldquo;defense in depth&amp;rdquo;!&lt;/li&gt;
&lt;li&gt;A potential need to do non-standard or experimental protocols.&lt;/li&gt;
&lt;li&gt;A lot of line rate 10G internally and to the rest of network.&lt;/li&gt;
&lt;li&gt;Integration with legacy, existing and or in-house written tools&lt;/li&gt;
&lt;li&gt;Need for GSLB/SLB&lt;/li&gt;
&lt;li&gt;Self Healing&lt;/li&gt;
&lt;li&gt;Ease of fabric upgrade (software upgrade doesn&amp;rsquo;t cause fabric isolation)&lt;/li&gt;
&lt;li&gt;Ease of fabric upgrade (increase LAG numbers and capacity easily)&lt;/li&gt;
&lt;li&gt;Multi-Homed hosts&lt;/li&gt;
&lt;li&gt;IPv4&lt;/li&gt;
&lt;li&gt;IPv6&lt;/li&gt;
&lt;li&gt;IPv4 Multicast&lt;/li&gt;
&lt;li&gt;Future SDN support&lt;/li&gt;
&lt;li&gt;NAT&lt;/li&gt;
&lt;li&gt;Public Address space&lt;/li&gt;
&lt;li&gt;All at the same time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I digress.  We can get into the Data Center design details later.  Below would be a theoretical data center reference design for a fabric deployment.  Please bear in mind that I mostly like to focus on the WAN and SP bits, so take my data center speculations and musings with a grain of salt.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2012/11/Flexible-DC.jpg&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2012/11/Flexible-DC.jpg&#34; alt=&#34;&#34; title=&#34;Flexible DC&#34; /&gt;&lt;/a&gt;   The Brocade VDX does most of what can be expected of a layer 2 fabric.  It really is the &amp;ldquo;easy&amp;rdquo; part of a DC design.  If you can avoid STP, I would heavily recommend it.  I have an unnatural dislike for spanning tree. The unexpected things I ran into with my very brief hands-on with the VDX were just that, unexpected.  I could reliably crash ssh on the boxes by sending a public key at login, which is default behavior for a normal ssh client.  This was very annoying and implied that they don&amp;rsquo;t yet support ssh keys for authentication.  One can work around it by doing &lt;em&gt;ssh -o PubkeyAuthentication=no -l &lt;name&gt;&lt;/em&gt; and worked with the newest version of putty, which I don&amp;rsquo;t use.  The version of OpenSSH on my Mac running 10.8.2 had an issue with it, as did the linux jumphost I used. There is no way, in current software to manage this centrally like you can with qfabric.  Each device is an individual switch.  I suspect this will change since it&amp;rsquo;s pretty inconvenient and I know many folks have asked for it.  This was my biggest issue with it. It doesn&amp;rsquo;t run spanning tree.  It has a loop detection mechanism, but it isn&amp;rsquo;t spanning tree.  It&amp;rsquo;s not meant to have anything but end hosts or other VDX plugged into it from what I gather, other than uplinks. Unknown SDN roadmap.  Currently it&amp;rsquo;s unsupported but with the level of commitment that Brocade has given to SDN so far, I&amp;rsquo;m cautiously optimistic. Untested Layer 3 capabilities.  It&amp;rsquo;s a new platform and they&amp;rsquo;ve just added layer3 into it.  I have no intention of testing the layer3 capabilities since I doubt that I&amp;rsquo;d want to route on them. Unknown IPv6 RA guard status.  Tis is important and I&amp;rsquo;m fairly certain they&amp;rsquo;ll add it, but it wasn&amp;rsquo;t in the code load that we had at SC12, at least that I could find. It is easily integrated into RANCID. &lt;a href=&#34;http://www.forwardingplane.net/2012/11/vdxrancid-contrib-scripts/&#34;&gt;I hacked together a script to do this&lt;/a&gt; in about 10 minutes and I&amp;rsquo;m an awful programmer. It looks EXACTLY like IOS so folks familiar with Ciscos venerable IOS command line will have absolutely no issue picking this right up. Some of the things I didn&amp;rsquo;t get to do during this first run were to put a packet cannon like an IXIA on it and jam traffic up to, and ideally beyond the limits and see how it reacts and to point existing SNMP based tools at it (other than basic up/down status).  I&amp;rsquo;d also like to push the limits of the interconnect between geographic locations and see the latency and efficiency of the VLAG ports when moving traffic and virtual machines.  With luck these will happen at some point soon. Bear in mind that this is a relatively new product.  I would probably place the best competitor for this as the Juniper Qfabric or Microfabric, bith of which are a larger scale product and suffer from some of the same issues.  I&amp;rsquo;m excited to see more about it, it did its job pretty well.  Juniper and cisco take notice, these bits are important and &lt;a href=&#34;http://www.plexxi.com&#34;&gt;more than just brocade are working on it&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RYU OpenFlow controller</title>
      <link>https://forwardingplane.net/post/435/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/435/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://osrg.github.com/ryu/index.html&#34;&gt;Ryu&lt;/a&gt;, an openflow controller, was new to me. After doing 5 minutes of reading I knew I needed to get it up in the lab. The thing that caught my eye was that the project page was boasting support for OpenStack. Now, I don;t really have much experience with openstack, but it has a cult like following and it&amp;rsquo;s on my short list of stuff to get involved with. This seemed like a great excuse.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
