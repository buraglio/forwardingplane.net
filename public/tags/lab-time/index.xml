<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>
    Lab Time on ForwardingPlane.net
    
    </title>
    <link>https://forwardingplane.net/tags/lab-time/</link>
    <description>Recent content 
    
    in Lab Time on ForwardingPlane.net
    </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <copyright>Copyright (c) 2019, all rights reserved.</copyright>
    <lastBuildDate>Sun, 08 Sep 2019 18:11:58 +0000</lastBuildDate>
    
    
        <atom:link href="https://forwardingplane.net/tags/lab-time/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ElastiFlow Template VM</title>
      <link>https://forwardingplane.net/post/elastiflow-template-vm/</link>
      <pubDate>Sun, 08 Sep 2019 18:11:58 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/elastiflow-template-vm/</guid>
      <description>&lt;p&gt;Flow data is a critical piece of understanding how your network works what what it is actively doing. It also provides a great baseline and capacity planning tool. However, some of the more feature rich NetFlow and/or sFlow collectors can be quite daunting in their cost and/or complexity to install. &lt;a href=&#34;https://github.com/robcowart/elastiflow&#34;&gt;ElastiFlow&lt;/a&gt; is a great alternative for flow analytics and is built on the well traveled and robust &lt;a href=&#34;https://www.elastic.co/start?ultron=[EL]-[B]-[AMER]-US+CA-Exact&amp;amp;blade=adwords-s&amp;amp;Device=c&amp;amp;thor=elastic%20stack&amp;amp;gclid=EAIaIQobChMIuKC5xefB5AIVCYnICh0wEg5lEAAYASAAEgIp_fD_BwE&#34;&gt;ElasticStack&lt;/a&gt;, meaning, its back end is well documented, well supported, and scales exceptionally well. For those that would like to play around with this but don&amp;rsquo;t want to take the time to install it (see below for the instruction set I used), I have provided a simple VM to toy around with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2019/09/Screen-Shot-2019-09-07-at-11.00.35-PM-1024x704.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Included here is a vanilla Ubuntu 18 LTS VM with a basic &lt;a href=&#34;https://github.com/robcowart/elastiflow&#34;&gt;Elastiflow&lt;/a&gt; install. This includes all of the components of an ElasticStack plus the front end pieces of the ElastiFlow project. Most of the install is based on &lt;a href=&#34;https://www.catapultsystems.com/blogs/install-elastiflow-on-ubuntu-18-04-part-1/&#34;&gt;this&lt;/a&gt; how-to. &lt;/p&gt;

&lt;p&gt;Included in the image is also a base install of NGINX and certbot so that you can reverse proxy the access and have a valid SSL certificate. There are a plethora of guides on how to accomplish that task on the internet.&lt;/p&gt;

&lt;p&gt;This was build and validated on Proxmox 6.0.6 but should be able to run on VMWare as well with a bit of qemu-img conversion. As expected, ElastiFlow (and ElasticStack) are fairly resource hungry. 16G of Memory and a handful of CPU cores is the bare minimum to run this with any real efficiency. Additionally, Ubuntu 18 has changed how the networking is setup - it is all located in /etc/netplan/ now.   &lt;/p&gt;

&lt;p&gt;Login Information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User Name: root
Password: elastiflow
Privileged user: elastiflow
Password: elastiflow  

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Default IP addresses:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10.255.255.5/27
2001:db8:ffff:2::5/64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the image &lt;a href=&#34;https://drive.google.com/open?id=1ga_Pj2j6h1ce9rcT7jQjncpVjLIC4X4t&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic automation for WISPs and small to medium ISPs</title>
      <link>https://forwardingplane.net/post/basic-automation-for-wisps-and-small-to-medium-isps/</link>
      <pubDate>Mon, 29 Jul 2019 09:39:35 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/basic-automation-for-wisps-and-small-to-medium-isps/</guid>
      <description>&lt;p&gt;Small to medium ISPs are an interesting phenomenon. Early in my career I was pretty heavily involved in that space, so much of my current thought processes and methodologies are heavily informed by that experience. Something that never ceases to amaze me today is that the practice of scripting and “automating” things seems to have become somewhat of a lost art, or at the very least it is not part of an initial deployment plan. As I learned to operate a network at scale and with efficiency, we used a significant amount of perl to automate repetitive tasks such as user creation for ppp profiles, provisioning DSL CPE, checking status of PRI and ATM VPCs, etc. In the many years that have passed since my introduction to ISP architecture and operation, the internet has gone from a luxury item to a required utility. In this lapsed time, specialization in networking has become far more prevalent and the generalist role has been significantly diminished. With that specialization and commoditization of IT, the prevalence of the network engineer that could write code became more and more uncommon. Then came “automation”. As we realized that the ubiquitous nature of IT systems and services was only going to increase, automation platforms and companies operating those platforms started to spring up. No longer was there a need to learn hardcore perl, python, shell programming. There were frameworks such as &lt;a href=&#34;https://cfengine.com/&#34;&gt;cfengine&lt;/a&gt;, &lt;a href=&#34;https://puppet.com/&#34;&gt;puppet&lt;/a&gt;, &lt;a href=&#34;https://www.saltstack.com/&#34;&gt;salt&lt;/a&gt;, and &lt;a href=&#34;https://www.ansible.com/&#34;&gt;ansible&lt;/a&gt; that could abstract some of that away and provide significant functionality in addition. I did extensive work with cfengine and did production deployments of salt. In addition, I was around for production deployments of puppet, but it wasn’t until I played with Ansible a few years ago that I got really interested in the automation space - but not really automation, per se. It was far more interesting to me to work on orchestrating workflows. Ansible was perfect for this due to its extreme flexibility and its ability to natively talk to network hardware. So I wrote some Ansible. Then I was informed that my ansible was poor form (which it definitely was). At that point I spent some time learning and playing. Then other things came along and I set it aside for a few years. Well, this past month my interest has ben re-ignited (mainly due to the inclusion of a &lt;a href=&#34;https://docs.ansible.com/ansible/latest/network/user_guide/platform_routeros.html&#34;&gt;mikrotik routeos ansible module&lt;/a&gt;). I spent some time with my &lt;a href=&#34;https://twitter.com/samoehlert&#34;&gt;local ansible guru&lt;/a&gt; and he taught me the best practices and from there I was off to the races. After a bit of re-education, I have compiled a few very simple ansible roles and playbooks focused mostly on the WISP world (because I have a lot of this type of gear in my lab), but I fully expect to expand on them greatly as they are all part of a larger bunch of orchestration parts that I have been writing at night and in my free time. Until then, please feel free to use, modify, or provide patches / input for what I have published thus far. &lt;img src=&#34;https://www.forwardingplane.net/wp-content/uploads/2019/07/transparent-ansible-logo.png&#34; alt=&#34;Transparent ansible logo&#34; title=&#34;transparent-ansible-logo.png&#34; /&gt; &lt;a href=&#34;https://github.com/buraglio/mikrotik-armor&#34;&gt;mikrotik-armor&lt;/a&gt; Simple Ansible role and playbook to harden a Mikrotik RouterOS device &lt;a href=&#34;https://github.com/buraglio/upgrade-mikrotik-routeros&#34;&gt;upgrade-mikrotik-routeros&lt;/a&gt; Simple Ansible playbook and role for setting a software channel and upgrading RouterOS on mikrotik devices &lt;a href=&#34;https://github.com/buraglio/ubnt-airos-tshaper&#34;&gt;ubnt-airos-tshaper&lt;/a&gt; Ansible playbooks to enable and configure the traffic shaper on Ubiquity AirOS CPE&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a dynamic security infrastructure [in a box - with SDN]</title>
      <link>https://forwardingplane.net/post/building-a-dynamic-security-infrastructure-in-a-box-with-sdn/</link>
      <pubDate>Wed, 29 May 2019 18:17:13 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-a-dynamic-security-infrastructure-in-a-box-with-sdn/</guid>
      <description>&lt;p&gt;Years ago I wrote about building a &lt;a href=&#34;https://www.forwardingplane.net/2013/07/building-a-secured-network-in-a-box/&#34;&gt;secure network in a box&lt;/a&gt;. Over a weekend I decided to revisit this concept thanks to a colleague at work wanting to do something similar. It got me thinking “a lot has changed since I last did this” and it felt like time to revisit it. Well, disappointment wasn’t in the cards because it’s easier, smarter, and more flexible now that it was back then. As I noted back in 2013 when I wrote that last post, OVS was a lot less well traveled and, frankly, there was not a reasonable controller that I could use in production for OpenFlow integration. I’ve since standardized on &lt;a href=&#34;https://www.proxmox.com/en/&#34;&gt;ProxMox&lt;/a&gt; for my lab and production virtualization and have espoused on every available occasion the usefulness of the &lt;a href=&#34;https://www.faucet.nz&#34;&gt;Faucet SDN controller&lt;/a&gt;. Both play fundamental roles in this project. This is significantly easier than I expected - primarily due to the use of faucet for controlling the OVS switch. It’s fairly straightforward, so I won’t go into the step by step details here since the projects have good install and support docs. Proxmox has support for OVS, so just install it using apt and create an OVS switch in the GUI interface. Faucet has &lt;a href=&#34;https://docs.faucet.nz/en/latest/&#34;&gt;amazingly complete documentation&lt;/a&gt; and even a &lt;a href=&#34;https://docs.faucet.nz/en/latest/installation.html#installing-on-raspberry-pi&#34;&gt;raspberry pi image&lt;/a&gt; (if you’re still thinking “OpenFlow is dead, isn’t it?”, have a listen to &lt;a href=&#34;https://blog.ipspace.net/2019/04/using-faucet-to-build-sc18-network-with.html&#34;&gt;this podcast&lt;/a&gt; I did with Ivan Pepelnjak). From there, install a &lt;a href=&#34;https://securityonion.net/&#34;&gt;security option VM&lt;/a&gt; (or any other tool you want to capture data with). Once you have the OVS switch, the controller, and the VM up and running getting data to it is as simple as issuing the comments to configure a controller. I my case the command was:```
sudo ovs-vsctl set-controller vmbr4 tcp:10.16.9.12:6653 tcp:10.16.9.12:6654&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-In my lab design the architecture was as such ![Faucet OVS Proxmox Security](https://www.forwardingplane.net/wp-content/uploads/2019/05/Faucet-OVS-Proxmox-Security.jpg &#34;Faucet OVS Proxmox Security.jpg&#34;) The two switches on the right are physical and span all uplink data via two physical ports into my proxmox host. Everything else is done virtually in OVS. Once you have the controller setup, the data coming in, and the host listening, you can validate you have the correct controller, interfaces and ports in ovs.```&#34; data-lang=&#34;In my lab design the architecture was as such ![Faucet OVS Proxmox Security](https://www.forwardingplane.net/wp-content/uploads/2019/05/Faucet-OVS-Proxmox-Security.jpg &#34;Faucet OVS Proxmox Security.jpg&#34;) The two switches on the right are physical and span all uplink data via two physical ports into my proxmox host. Everything else is done virtually in OVS. Once you have the controller setup, the data coming in, and the host listening, you can validate you have the correct controller, interfaces and ports in ovs.```&#34;&gt;root@pve1:~# ovs-vsctl show
75b4bc7f-4e00-45c2-8919-b043cbaf509d
Bridge &amp;#34;vmbr4&amp;#34;
Controller &amp;#34;tcp:10.16.9.12:6654&amp;#34;
Controller &amp;#34;tcp:10.16.9.12:6653&amp;#34;
is\_connected: true
Port &amp;#34;enx00051ba65ece&amp;#34;
Interface &amp;#34;enx00051ba65ece&amp;#34;
Port &amp;#34;tap115i1&amp;#34;
Interface &amp;#34;tap115i1&amp;#34;
Port &amp;#34;vmbr4&amp;#34;
Interface &amp;#34;vmbr4&amp;#34;
type: internal
Port &amp;#34;eno2&amp;#34;
Interface &amp;#34;eno2&amp;#34;
ovs\_version: “2.7.0&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Listing interfaces in OVS can be a helpful way to aid in building the faucet configuration```
root@pve1:~# ovs-vsctl &amp;ndash;columns=ofport,name list interface
ofport : 65534
name : &amp;ldquo;vmbr4&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 1
name : &amp;ldquo;eno2&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 4
name : &amp;ldquo;tap115i1&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ofport              : 2
name : &amp;ldquo;enx00051ba65ece&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-For spanning the data into the VM, the basic configuration within faucet looks like this and should reside in /etc/faucet/faucet.yaml. The real meat here is the mirror statement on port 4.```&#34; data-lang=&#34;For spanning the data into the VM, the basic configuration within faucet looks like this and should reside in /etc/faucet/faucet.yaml. The real meat here is the mirror statement on port 4.```&#34;&gt;dps:
    proxovs1:
        dp\_id: 0x51ba65ece
        hardware: &amp;#34;Open vSwitch&amp;#34;
        interfaces:
            65534:
                name: &amp;#34;vmbr4&amp;#34;
                description: &amp;#34;ProxMox OVS vmbr4&amp;#34;
                native\_vlan: servernet
            1:
                name: &amp;#34;eno2&amp;#34;
                description: &amp;#34;Span from sw1&amp;#34;
                native\_vlan: servernet
            2:
                name: &amp;#34;enx00051ba65ece&amp;#34;
                description: &amp;#34;Span from sw2&amp;#34;
                native\_vlan: servernet
            4:
                name: &amp;#34;tap115i1&amp;#34;
                description: &amp;#34;ProxMox OVS vmbr4&amp;#34;
                output\_only: True
                mirror: \[1,2\]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This can be fairly easily adjusted to mirror all internal, east-west traffic in a virtualization farm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeRouter as a test environment</title>
      <link>https://forwardingplane.net/post/freertr-as-a-lab-environment/</link>
      <pubDate>Sat, 02 Mar 2019 17:03:18 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/freertr-as-a-lab-environment/</guid>
      <description>&lt;p&gt;A few months ago &lt;a href=&#34;https://www.stubarea51.net/about-me/&#34;&gt;Kevin Myers&lt;/a&gt; of &lt;a href=&#34;https://www.iparchitechs.com/&#34;&gt;IP Architechs&lt;/a&gt; introduced me to a really interesting project called &lt;a href=&#34;http://freerouter.nop.hu/&#34;&gt;FreeRouter&lt;/a&gt;. Being that I absolutely love alternative routing platforms and feature complete simulation environments, this really got me going. I tend to define &amp;ldquo;feature complete&amp;rdquo; in a routing platform as something that can do both IS-IS and MPLS. Given that there aren&amp;rsquo;t many platforms that do both correctly or within a reasonable budget, and offer simulation options, I was pretty excited. I spent a fair amount of time pounding through it. I recommend spending some time with this if you have even remote interest in any of the above technologies. It costs nothing but your time. The project was written and is maintained by a Cisco CCIE and was built (according to his site) as a mechanism to learn. However, the feature list is incredibly complete, and extremely impressive, as seen below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;forwarding: ipv4, ipv6, ipx, mpls, nsh, layer2, irb, atom, eompls, vpls, evpn  
routing protocols: ospf, isis, bgp, rip, eigrp, babel, olsr, pim, msdp  
lsp support: p2p, p2mp, mp2mp built by ldp, rsvp-te, sr, sr-te, bier  
crypto: macsec, ipsec, ikev1, ikev2, tls, dtls, ssh, openvpn  
tunnel: gre, ipip, l2tp, pptp, lisp, geneve, nvgre, vxlan, etherip  
encapsulation: ethernet, vlan, nsh, ppp, framerelay, pwether, virtppp, hairpin  
misc: acl, hqos, nat, pbr, srv6, vrrp, hsrp, transproxy, 6to4, rpl, tunnel, vpdn 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.forwardingplane.net/configuration-archive/freertr-basic-configurations/&#34;&gt;My configurations&lt;/a&gt; can be found in the &lt;a href=&#34;https://www.forwardingplane.net/configuration-archive/&#34;&gt;Configuration Archive&lt;/a&gt; section of this site. It is definitely worth your time to check out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brocade Vyatta Install and OpenFlow 1.3 on ICX 7450</title>
      <link>https://forwardingplane.net/post/brocade-vyatta-install-and-openflow-1-3-on-icx-7450/</link>
      <pubDate>Sat, 20 Jun 2015 16:06:03 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/brocade-vyatta-install-and-openflow-1-3-on-icx-7450/</guid>
      <description>

&lt;p&gt;I recently had a need to test OpenFlow on the brocade ICX 7450 for a fairly good sized, high visibility &lt;a href=&#34;http://scinet.supercomputing.org&#34;&gt;project&lt;/a&gt;. The basic goal is pretty simple, Layer2 path provisioning. Straightforward and fairly well supported in OpenFlow, even from the early days. To do this, the idea was to use a turnkey platform, that way there is one throat to choke if there are issues. I landed on the &lt;a href=&#34;http://www1.brocade.com/forms/jsp/vyatta-controller/download.jsp&#34;&gt;Brocade Vyatta controller&lt;/a&gt; (which is essentially ODL), and the ICX. Below is a rough account of getting this up and working to the point of testing. For the purposes of this I used BVC 1.3 and an ICX 7450. The docs for the BVC are actually pretty good if you read them. I found the google searching for the docs led to &lt;sup&gt;9&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt; links to brocade being 404 errors. My guess is that they restructured their site and did not alias anything. Minor frustration since my guess is that most folks search using a search engine rather than going to the site and searching from there. The link to the configuration guide I used for the ICX is &lt;a href=&#34;http://www.brocade.com/content/brocade/en/backend-content/pdf-page.html?/content/dam/common/documents/content-types/configuration-guide/fastiron-08030-sdnguide.pdf&#34;&gt;here&lt;/a&gt;. Once I grabbed the software, which requires registration, I went on to try to build this on CentOS 6.6. After some hurdles that I didn&amp;rsquo;t expect, I went and actually read the doc for BVC and found that ubuntu is a requirement. Another minor annoyance, but surmountable pretty easily. Enterprise customers are probably not going to want to have a one-off from RHEL/CentOS even if I don&amp;rsquo;t have a strong preference either way. Now that the VM is up and running with just over the minimum requirements, time to log in and get to work. This is assuming you have the code actually on the server already.```
apt-get install -y unzip curl wget python-pip&lt;br /&gt;
curl -sL &lt;a href=&#34;https://deb.nodesource.com/setup&#34;&gt;https://deb.nodesource.com/setup&lt;/a&gt; | sudo bash -
sudo apt-get install -y nodejs
unzip -o bvc-1.3.0.zip -d /opt
unzip -o bvc-dependencies-1.3.0.zip -d /opt
unzip -o bvc-app-pathexplorer-packaging-1.2.0.zip -d /opt
cd /opt/bvc
./install&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-The output should look something like this```&#34; data-lang=&#34;The output should look something like this```&#34;&gt; root@bvc:/opt/bvc# ./install
 Brocade Vyatta Controller Installation

 Starting @ : 2015-06-17 15:31:15.564202

 Performing prerequisite check ...
 JDK Check ................................ \[ OK \]
 CPU Count Check: ......................... \[ OK \]
 Memory Size Check: ....................... \[ OK \]

 Running pre-install scripts ...

 Unpacking archives ....................... \[ OK \]

 Setting up karaf container ............... \[ OK \]

 Running controller pre-install scripts ...

 Configuring base features ................ \[ OK \]
 Start controller ......................... \[ OK \]
 Waiting for base initialization .......... \[ OK \]

 Configuring all features ................. \[ OK \]
 Adding Repositories ...................... \[ OK \]
 Adding Features .......................... \[ OK \]

 Running controller post install scripts ...

 Running install scripts ...


 Stopping NODEJS server 9000 .............. \[ OK \]
 Starting NODEJS server  .................. \[ OK \]
   Server @ http://10.42.44.20:9000/

 Install completed @ :  2015-06-17 15:32:26.464365&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monitoring the connection to the controller from the controller can be accomplished by using the included tool: /opt/bvc/bin/taillog which operates just like you think, by tailing a log file. Checking for capability can be pretty easily accomplished by looking at the restconf modules:```
http://&lt;IP address&gt;:8181/restconf/modules&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Now, for the ICX, I was under the impression that OpenFlow was in the base code. This is a true statement, however, I made a bad assumption that it was in _all_ code for that platform. Not so. After banging around and reading release notes as well as contacting my SE, I found that the code that it shipped with did _not_ support openflow, so I would need to upgrade it. _The ICX 7450 (and probably others) requires at least Version 08.0.30aa for OpenFlow support. Earlier versions will be lacking in the entire command hierarchy, even for older versions of OpenFlow._ **Brocade ICX 7450 configuration** From the console:```&#34; data-lang=&#34;Now, for the ICX, I was under the impression that OpenFlow was in the base code. This is a true statement, however, I made a bad assumption that it was in _all_ code for that platform. Not so. After banging around and reading release notes as well as contacting my SE, I found that the code that it shipped with did _not_ support openflow, so I would need to upgrade it. _The ICX 7450 (and probably others) requires at least Version 08.0.30aa for OpenFlow support. Earlier versions will be lacking in the entire command hierarchy, even for older versions of OpenFlow._ **Brocade ICX 7450 configuration** From the console:```&#34;&gt;ip address 10.42.44.30 255.255.255.224
no ip dhcp-client enable
ip default-gateway 10.42.44.1
ip dns server-address 10.42.2.2
clock timezone us central
clock summer-time
logging host 10.42.44.7
logging enable user-login
logging enable config-changed
ntp 
server 10.42.2.2

interface ethernet 1/1/1 
port-name port1

crypto key generate rsa modulus 2048
ip ssh  authentication-retries 5
ip ssh timeout 120 
ip ssh key-authentication yes
username buraglio enable
username buraglio privilege 0
username buraglio password brocade

openflow enable ofv130 
openflow controller 10.42.44.20
system-max openflow-flow-entries 3072&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thoughts: OpenFlow wants to use SSL by default. When configuring this it failed in a way that is not intuitive &lt;em&gt;at all&lt;/em&gt;. To get it running quickly, you need to disable SSL, which I absolutely &lt;em&gt;do not&lt;/em&gt; recommended for anything production). If you see anything other than this, the OpenFlow connection isn&amp;rsquo;t working```
SSH@icx-of-test#sh openflow controller
Openflow controller information&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controller-mode-tcp-ssl-ip-address-port-status&#34;&gt;Controller   Mode      TCP/SSL   IP-address        Port   Status&lt;/h2&gt;

&lt;p&gt;1  (Equal)   active    TCP       10.42.44.20     6653   OPENFLOW_ESTABLISHED&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-This command will make it talk to the BVC over unencrypted TCP:```&#34; data-lang=&#34;This command will make it talk to the BVC over unencrypted TCP:```&#34;&gt;openflow controller ip-address 10.42.44.20 no-ssl port 6653 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make this work over SSL requires pulling the certificates into the device from the controller. I am still working on this for consideration in a production environment. Path explorer has most of the interesting bits in it. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-4.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-4.png&#34; alt=&#34;BVC-4&#34; /&gt;&lt;/a&gt; Other handy commands:```
SSH@icx-of-test#sh openflow inter
  interface     Show interfaces where OpenFlow is enabled
  &lt;cr&gt;
SSH@icx-of-test#sh openflow interface&lt;/p&gt;

&lt;p&gt;Total number of Openflow interfaces: 2&lt;/p&gt;

&lt;p&gt;Port   Link   Speed Tag MAC            OF-portid   Name           Mode
1/1/1  Up     1G    No  cc4e.248b.4570 1           port1          Hybrid-Layer23
1/1/48 Down   None  No  cc4e.248b.459f 48          port48         Hybrid-Layer23&lt;/p&gt;

&lt;p&gt;```The topology explorer is pretty cool, lots of eye candy. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-1.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/06/BVC-1.png&#34; alt=&#34;BVC-1&#34; /&gt;&lt;/a&gt; Random Thoughts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Restarting the BVC causes the topology to need to rebuild, as one would expect. The ICX took longer to show up in the controller than I expected. In fact, it never recovered until I intervened manually.&lt;/li&gt;
&lt;li&gt;The Brocade ICX randomly rebooted while attempting to scp the bootloader code. I never figured out why.&lt;/li&gt;
&lt;li&gt;The ICX stopped responding to SSH for some reason. The only way I could recover it was to reboot. Concerning from a management standpoint, but I suspect it was an anomaly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next post I&amp;rsquo;ll explore the actual provisioning and the SSL configuration.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BigSwitch Networks BigCloud Fabric 2.5</title>
      <link>https://forwardingplane.net/post/bigswitch-networks-bigcloud-fabric-2-5/</link>
      <pubDate>Thu, 29 Jan 2015 01:04:46 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/bigswitch-networks-bigcloud-fabric-2-5/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.bigswitch.com&#34;&gt;BigSwitch&lt;/a&gt; is &lt;a href=&#34;http://www.bigswitch.com/press-releases/2015/01/28/big-switch-networks-unveils-big-cloud-fabric-2_5?mkt_tok=3RkMMJWWfF9wsRonvqTIZKXonjHpfsX56eQrUKS2lMI%2F0ER3fOvrPUfGjI4ASMtrI%2BSLDwEYGJlv6SgFQ7fBMbd4yLgIXRA%3D&#34;&gt;making waves again&lt;/a&gt;, this time with its Big Cloud Fabric product update. I was lucky enough to get a bit of a preview of what was coming and was pleasantly surprised by the new features, finding them functionally useful for both operators, security folks and management alike.&lt;/p&gt;

&lt;p&gt;Not only is the fabric fit to operate at hyper scale proportions, they&amp;rsquo;ve paid  close attention to making such operations even easier. With release 2.5 they&amp;rsquo;re focusing more on white box switches and abstracting the control plane further, which is important to note because decoupling those things can prove to be confusing and complicated and doing so can make operation and service clunky if not done well. From what &lt;a href=&#34;http://www.forwardingplane.net/2014/09/bigswitch-labs-for-sdn-learning-a-sneak-peek/&#34; title=&#34;BigSwitch Labs for SDN learning: a sneak peek!&#34;&gt;I&amp;rsquo;ve seen and experienced in their fabric cloud training&lt;/a&gt; and in this update, it appears smooth and easy to use.&lt;/p&gt;

&lt;p&gt;Something mentioned during this briefing that I found particularly cool was the notion of a starter kits. BigSwitch is making available a &amp;ldquo;kickstarter&amp;rdquo; of their big cloud fabric with available software, hardware, cables and optics; a turnkey SDN platform in a box. Where I could see this being convenient is for those looking to build out a lab, dip their toe into the SDN / data center fabric world or to build out a dedicated project. A nice option for sure.&lt;/p&gt;

&lt;p&gt;BigSwitch is also adding support for VMWare VCenter and they&amp;rsquo;re also adding support for the &lt;a href=&#34;http://www.dell.com/us/business/p/open-networking-switches/pd&#34;&gt;dell open network switch&lt;/a&gt; series to boot.&lt;/p&gt;

&lt;p&gt;What really caught my eye, though, was the existence of a very robust looking set of analytics. An eye catching assortment of graphs, logs and functional data that is, get this, driven by an &lt;a href=&#34;http://www.elasticsearch.com&#34;&gt;elasticsearch&lt;/a&gt; back end.   What is included is useful not only for Network and SDN engineers, but also for security &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/bsw-eyecandy.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/bsw-eyecandy.png&#34; alt=&#34;bsw-eyecandy&#34; /&gt;&lt;/a&gt;professionals. Including things like event logs, fine grained search, canned reports for the execs and presenting everything via a REST API and a subset available via syslog for good measure I could see this being a very handy set of data for tracking down any number of things from incident response to problem resolution.&lt;/p&gt;

&lt;p&gt;I look forward to seeing more from &lt;a href=&#34;http://www.bigswitch.com&#34;&gt;BigSwitch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring VMware ESXi with SNMP and Cacti</title>
      <link>https://forwardingplane.net/post/monitoring-vmware-esxi-with-snmp-and-cacti/</link>
      <pubDate>Mon, 19 Jan 2015 10:02:10 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/monitoring-vmware-esxi-with-snmp-and-cacti/</guid>
      <description>&lt;p&gt;VMWare is a powerful tool, and monitoring is a critical service. How does one monitor such an integral piece of infrastructure, and what do they monitor it with? There are powerful commercial ways of monitoring &lt;a href=&#34;http://www.vmware.com/&#34;&gt;VMware&lt;/a&gt;, however, for those with existing &lt;a href=&#34;http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol&#34;&gt;SNMP&lt;/a&gt; based systems in place, specifically &lt;a href=&#34;http://www.cacti.net/&#34;&gt;cacti&lt;/a&gt;, there are options. To that end, I&amp;rsquo;ll set aside my strong distaste for SNMP [yet again], because those are for a larger, less useful series of posts.&lt;/p&gt;

&lt;p&gt;Luckily for those of us that need it there exists in that vast wilderness we call the internet, a user contributed &lt;a href=&#34;http://www.cacti.net/&#34;&gt;cacti&lt;/a&gt; template for monitoring basic functionality with SNMP and cacti and it is available &lt;a href=&#34;http://forums.cacti.net/download/file.php?id=29171&amp;amp;sid=888e5451bc68b1c05a5b7dec6667afd2&#34;&gt;here&lt;/a&gt;, and with the full thread being worth a read &lt;a href=&#34;http://forums.cacti.net/viewtopic.php?f=12&amp;amp;t=52122&#34;&gt;here&lt;/a&gt;. Since VMWare ESXi doesn&amp;rsquo;t have SNMP enabled (or really exposed from what I can tell), you have to do some CLI jockeying to make it work. Full disclosure, I&amp;rsquo;m not a vmware expert by any stretch of the imagination, but I have been hacking at it for a few years because it is low overhead to use comparatively speaking, offers a free version for my lab, makes a nice contrast to my KVM system and is widely deployed, so I want to understand it. Your mileage may vary with what I&amp;rsquo;ve got here.&lt;/p&gt;

&lt;p&gt;Enabling ssh is beyond the scope of this post but details can be found &lt;a href=&#34;http://www.thomasmaurer.ch/2014/01/enable-ssh-on-vmware-esxi-5-5/&#34;&gt;here&lt;/a&gt;. It&amp;rsquo;s fairly straightforward.&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png&#34; alt=&#34;vmware-snmp-device&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Details of enabling SNMP for vmware 5.5 can be found &lt;a href=&#34;https://pubs.vmware.com/vsphere-51/index.jsp#com.vmware.vsphere.monitoring.doc/GUID-0EB48A32-34B0-4003-B2D0-ADE3BAFD29F0.html&#34;&gt;here&lt;/a&gt;, essentially one simply needs to run the following commands from within an ssh session:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;esxcli  system snmp set --communities &amp;lt;community&amp;gt;
esxcli system snmp set --port 161
esxcli system snmp set --enable true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Getting the cacti scripts in place is a little more involved, but it&amp;rsquo;s still pretty simple. Using the importer just add the new template. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.09.09.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.09.09.png&#34; alt=&#34;Screenshot 2015-01-10 10.09.09&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Once that is imported you&amp;rsquo;ll need to move some scripts into place within the cacti system as below (adjust your paths as needed; I moved them directly from my workstation into place)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp ss\_esxi\_vhosts.php netmon:/var/lib/cacti/scripts/
scp cacte\_esxi\_template/resource/snmp\_queries/\* netmon:/usr/share/cacti/resource/snmp\_queries/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[](&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.10.43.png)[![](http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png)](http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png&#34;&gt;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.10.43.png)[![](http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png)](http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-snmp-device.png&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;[](&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.13.33.png&#34;&gt;http://www.forwardingplane.net/wp-content/uploads/2015/01/Screenshot-2015-01-10-10.13.33.png&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Then adjust the template being used for your ESXi server or add it as a new host if it was not there already. The new template should show up in the list.&lt;/p&gt;

&lt;p&gt;Once complete the cacti server should start graphing and checking uptime, etc. IF it does not, make sure the scripts are in place and have the correct permissions. It&amp;rsquo;s also useful (although not required) to add the additional parameters to the host.&lt;/p&gt;

&lt;p&gt;Once complete, the cacti system should be able to baseline (and alert if so desited, using thresholds) on any of the newly added variables, including number of VMs, number of VMs using vmware tools, number of VMs running, disk space, processes, network traffic, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2015/01/vmware-create-graphs.png&#34; alt=&#34;vmware-create-graphs&#34; /&gt;  &lt;/p&gt;

&lt;p&gt;I have yet to be able to get successful CPU graphs, but I suspect it is user error on my part and I&amp;rsquo;ve not investigated yet. Overall, I&amp;rsquo;d call it a pretty bigwin for anyone that has an existing cacti installation and wants to include their vmware system(s). It should also be said that the readme that accompanies the template is relatively useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BigSwitch Labs for SDN learning: a sneak peek!</title>
      <link>https://forwardingplane.net/post/bigswitch-labs-for-sdn-learning-a-sneak-peek/</link>
      <pubDate>Mon, 22 Sep 2014 10:24:34 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/bigswitch-labs-for-sdn-learning-a-sneak-peek/</guid>
      <description>&lt;p&gt;I was recently granted access to the beta &lt;a href=&#34;http://www.bigswitch.com/&#34;&gt;BigSwitch Networks&lt;/a&gt; lab site, a purpose built classroom in the cloud focused on teaching the BigSwitch SDN environment.  I had seen some of the BSN offerings in the past and always held them in high regard, but I was thoroughly impressed with both the completeness of the lab and how polished the controller environment was.&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.28.50.png&#34; alt=&#34;Screenshot 2014-09-12 10.28.50&#34; /&gt; At the time of this writing, the lab consists of 3 modules: Building cloud fabric, monitoring fabric and dynamic provisioning of monitoring fabric.  Since there is quite a lot going on with this cloud based SDN classroom, for the scope of this post I&amp;rsquo;ll concentrate on the first, building cloud fabric.  I&amp;rsquo;m a big fan of the CLI*, and one thing that jumped right out to me was that they provide the GUI and the CLI, and that the CLI is familiar to anyone that has worked on an IOS device.  The lab is useful, even for someone that has done some SDN, both on production or in a lab, in that it presents the fundamentals in a way that both demonstrates the purpose and function and lays out the technology and product. From the technology presentation standpoint, the BigSwitch offering is quite impressive. The reality of it is that, in my experience, GUIs don&amp;rsquo;t always have the most intuitive or complete implementations and they&amp;rsquo;re hard to automate.  Now, from what I&amp;rsquo;ve seen to far the bigswitch offing is the exception to that rule.  The setup is very functional and goes through a range of great material. for comparison, below is the tenants display from the web interface: &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.47.37.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.47.37.png&#34; alt=&#34;Screenshot 2014-09-12 10.47.37&#34; /&gt;&lt;/a&gt;   and the corresponding show command: &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.33.49.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.33.49.png&#34; alt=&#34;show tenant&#34; /&gt;&lt;/a&gt; Nevertheless, part of my usual workflow is to use one to define the other when I can.  What I mean by that is that if I don&amp;rsquo;t know exactly how to accomplish my goal in the GUI, I switch to the CLI and see what I can do from there, returning to the GUI to see what has changed and then reverse engineer it from that perspective.  The opposite is also true, I have used the CLI to define the GUI &lt;em&gt;:cough:&lt;/em&gt; &lt;a href=&#34;http://www.juniper.net/us/en/products-services/security/netscreen/&#34;&gt;netscreen&lt;/a&gt; &lt;em&gt;:cough:&lt;/em&gt;. The important thing to note here, though, is that the tools all work as if it is a real environment, because it &lt;em&gt;is&lt;/em&gt; a real environment. The god among men here, really, is the &lt;em&gt;debug rest&lt;/em&gt; command.  This command, when issued in the CLI (displayed below) allows the commands sent to the terminal to automatically pop up with the rest interface commands necessary to utilize them.  Wrap your head around that one for a minute.  Are you thinking automation?  Me too; seeing that made me want to go write code, and I am a horrible developer. &lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/09/Screenshot-2014-09-12-10.50.19.png&#34; alt=&#34;Screenshot 2014-09-12 10.50.19&#34; /&gt; In the time I&amp;rsquo;ve spent within this system I have been thoroughly impressed with how well it functioned.  I had no issues whatsoever with how the training presented the material, executed the commands or displayed the responses.  My only suggestion would be to add a configuration guide for the CLI =) Below is a quick youtube video of some of the functions.    * Yes, I know SDN is supposed to &amp;ldquo;kill the CLI&amp;rdquo;.  I don&amp;rsquo;t by the sensationalism for the short to medium term.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install nfsen and nfdump on CentOS 6.5 for netflow and or sflow collection</title>
      <link>https://forwardingplane.net/post/install-nfsen-and-nfdump-on-centos-6-5-for-netflow-and-or-sflow-collection/</link>
      <pubDate>Sat, 11 Jan 2014 21:55:24 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/install-nfsen-and-nfdump-on-centos-6-5-for-netflow-and-or-sflow-collection/</guid>
      <description>&lt;p&gt;I am an absolutely &lt;strong&gt;huge&lt;/strong&gt; fan of statistical and instrumentation data, especially when it comes to traffic analysis, visualization and baselining.  I&amp;rsquo;ve rambled on about the importance of it at &lt;a href=&#34;http://searchnetworking.techtarget.com/news/2240212051/The-Der-Spiegel-NSA-revelations-What-network-engineers-need-to-know&#34;&gt;every opportunity&lt;/a&gt;.  As a result of that, I have been doing work with netflow and netflow-like data for a fairly long time.  My first collector was the &lt;a href=&#34;http://www.splintered.net/sw/flow-tools/&#34;&gt;OSU Flow tools&lt;/a&gt; based stuff  back around 13 years ago.  From there I played with all kinds of netflow tools, both &lt;a href=&#34;http://www.arbornetworks.com/&#34;&gt;commercial&lt;/a&gt; and open source, finally settling most of my focus on &lt;a href=&#34;http://nfdump.sourceforge.net/&#34;&gt;nfdump&lt;/a&gt; and &lt;a href=&#34;http://nfsen.sourceforge.net/&#34;&gt;nfsen&lt;/a&gt;. A bit of history: nfdump was born out of a research network, requiring it to be able to consume huge amounts of flows efficiently.  This makes it very powerful and very useful for nearly anyone, from the small technology tinkerer to to the enterprise network engineer up through the service provider architect.  nfsen is really just a php wrapper for nfdump, however, the really nice thing about it (other then being free, opensource software) is that it is extendable via &lt;a href=&#34;http://sourceforge.net/apps/trac/nfsen-plugins/&#34;&gt;plugins&lt;/a&gt;.  This is really what makes it a serious player from all angles.     From botnet detection to displaying IP geo-data on a map, there is likely a plugin for it.  Not finding what you are looking for?  Write it!  The architecture to use it is already there and documented. For ease of install, I chose CentOS 6.5.  Once you have a system up and running, to get nfsen/nfdump working, here is what you need to do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yum install -y httpd php wget gcc make rrdtool-devel rrdtool-perl perl-MailTools perl-Socket6 flex byacc&#34; data-lang=&#34;yum install -y httpd php wget gcc make rrdtool-devel rrdtool-perl perl-MailTools perl-Socket6 flex byacc&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vi /etc/selinux/config&#34; data-lang=&#34;vi /etc/selinux/config&#34;&gt;set SELINUX=disabled
reboot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;rsquo;ll need to make an iptables rule (I generally make one for ip6tables as well, in case I want to also enable ipv6 transport)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sudo iptables -I INPUT -p udp -m state --state NEW -m udp --dport 9995 -j ACCEPT&#34; data-lang=&#34;sudo iptables -I INPUT -p udp -m state --state NEW -m udp --dport 9995 -j ACCEPT&#34;&gt;sudo ipt6ables -I INPUT -p udp -m state --state NEW -m udp --dport 9995 -j ACCEPT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also allow for access to the web server you just installed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sudo ip6tables -I INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT&#34; data-lang=&#34;sudo ip6tables -I INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT&#34;&gt;sudo ip6tables -I INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT  
sudo iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT
sudo iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT  
service iptables save
service ip6tables save&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you enable https you can safely remove the table rules for port 80. Start HTTPd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sudo service httpd start&#34; data-lang=&#34;sudo service httpd start&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enable HTTPd at boot&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-chkconfig httpd on&#34; data-lang=&#34;chkconfig httpd on&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you need the actual code. I like to grab the latest from sourceforge. (nfdump-1.6.11 and nfsen-1.3.6p1 at the time of this writing)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-wget http://downloads.sourceforge.net/project/nfdump/stable/nfdump-1.6.11/nfdump-1.6.11.tar.gz&#34; data-lang=&#34;wget http://downloads.sourceforge.net/project/nfdump/stable/nfdump-1.6.11/nfdump-1.6.11.tar.gz&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-wget http://downloads.sourceforge.net/project/nfsen/stable/nfsen-1.3.6p1/nfsen-1.3.6p1.tar.gz&#34; data-lang=&#34;wget http://downloads.sourceforge.net/project/nfsen/stable/nfsen-1.3.6p1/nfsen-1.3.6p1.tar.gz&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-tar -zxvf nfdump-1.6.11.tar.gz&#34; data-lang=&#34;tar -zxvf nfdump-1.6.11.tar.gz&#34;&gt;./configure --enable-nfprofile --enable-nftrack --enable-sflow
make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default 1.6.11 enables v9 and ipfix =)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-adduser netflow&#34; data-lang=&#34;adduser netflow&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vi /etc/group&#34; data-lang=&#34;vi /etc/group&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add user netflow to group apache&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vi etc/nfsen.conf&#34; data-lang=&#34;vi etc/nfsen.conf&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;change www user to apache Add your host to the file to allow for collection, my %sources looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-%sources = (&#34; data-lang=&#34;%sources = (&#34;&gt;    &amp;#39;home&amp;#39;    =&amp;gt; { &amp;#39;port&amp;#39; =&amp;gt; &amp;#39;9995&amp;#39;, &amp;#39;col&amp;#39; =&amp;gt; &amp;#39;#0000ff&amp;#39;, &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;netflow&amp;#39; },
    &amp;#39;internal&amp;#39;    =&amp;gt; { &amp;#39;port&amp;#39; =&amp;gt; &amp;#39;9996&amp;#39;, &amp;#39;col&amp;#39; =&amp;gt; &amp;#39;#FF0000&amp;#39;, &amp;#39;type&amp;#39; =&amp;gt; &amp;#39;netflow&amp;#39; },
);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, I have two valid sources with different ports and different colors. You can make all netflow, all sflow, or any combination of protocol. change directory to /home/netflow&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-./install.pl etc/nfsen.conf&#34; data-lang=&#34;./install.pl etc/nfsen.conf&#34;&gt;cd /home/netflow/bin/
./nfsen start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make it start at boot (referenced from &lt;a href=&#34;http://sourceforge.net/mailarchive/message.php?msg_id=29434166&#34;&gt;this post&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vi /etc/init.d/nfsen&#34; data-lang=&#34;vi /etc/init.d/nfsen&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add this into the file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-#!/bin/bash&#34; data-lang=&#34;#!/bin/bash&#34;&gt;#
# chkconfig: - 50 50
# description: nfsen

DAEMON=/home/netflow/bin/nfsen

case &amp;#34;$1&amp;#34; in
		start)
		$DAEMON start
		;;
		stop)
		$DAEMON stop
		;;
		status)
		$DAEMON status
		;;
		restart)
		$DAEMON stop
		sleep 1
		$DAEMON start
		;;
		\*)
		echo &amp;#34;Usage: $0 {start|stop|status|restart}&amp;#34;
		exit 1
		;;
esac

exit 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then chkconfig it on to start it at boot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-chmod 755 nfsen &amp;&amp; chkconfig --add nfsen &amp;&amp; chkconfig nfsen on&#34; data-lang=&#34;chmod 755 nfsen &amp;&amp; chkconfig --add nfsen &amp;&amp; chkconfig nfsen on&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s pretty much it. Once you configure your netflow or sflow source, you should start seeing data in ~5-10 minutes. Point your browser at your web server and see: Mine is set as &lt;a href=&#34;https://netmon/nfsen/nfsen.php&#34;&gt;https://netmon/nfsen/nfsen.php&lt;/a&gt; (you&amp;rsquo;ll need to include the &amp;ldquo;nfsen.php&amp;rdquo; uness you edit your apache config to recognize &amp;ldquo;nfsen.php&amp;rdquo; as in index.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/01/Screen-Shot-2014-01-11-at-3.13.53-PM.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/01/Screen-Shot-2014-01-11-at-3.13.53-PM-913x1024.png&#34; alt=&#34;Screen Shot 2014-01-11 at 3.13.53 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Common issues: I see this one every time: &amp;ldquo;ERROR: nfsend connect() error: Permission denied!&amp;rdquo; It&amp;rsquo;s always a permissions issue, as documented &lt;a href=&#34;https://code.google.com/p/nfsenplugins/wiki/NFSEN_Installation_Gotchas&#34;&gt;here&lt;/a&gt;.  You need to make sure that the nfsen package can read the nfsen.comm socket file. I fixed mine by doing&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-chmod g+rwx ~netflow/&#34; data-lang=&#34;chmod g+rwx ~netflow/&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My nfsen.conf file is using /home/netflow as the $BASEDIR.
 &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/01/Screenshot-2014-01-11-13.04.17.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2014/01/Screenshot-2014-01-11-13.04.17.png&#34; alt=&#34;Screenshot 2014-01-11 13.04.17&#34; /&gt;&lt;/a&gt;
You&amp;rsquo;ll likely see &amp;ldquo;Frontend - Backend version mismatch!&amp;rdquo;, this is a known issue. There is a patch to fix it &lt;a href=&#34;http://sourceforge.net/p/nfsen/bugs/43/&#34;&gt;here&lt;/a&gt;, I never bothered since it did not cause any issues for me. Disk full. Depending on your setup, you may generate a firehose worth of data. I have filled disks in less than a day in the past on a good sized regional WAN. I generally keep a month of data, but you can store as much data as disk you want to buy. I have a script run from cron to prune data, if you want to do the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vi /usr/local/etc/rmflowdata.sh&#34; data-lang=&#34;vi /usr/local/etc/rmflowdata.sh&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Paste this in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-#!/bin/bash&#34; data-lang=&#34;#!/bin/bash&#34;&gt;# prune flow data
# Usage:
# +30 is the number of days, adjust accordingly.

/bin/find /home/netflow/profiles-data/live -name &amp;#34;nfcapd.\*&amp;#34; -type f -mtime +30 -delete&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add this to your crontab:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-@daily /usr/local/bin/rmflowdata.sh&#34; data-lang=&#34;@daily /usr/local/bin/rmflowdata.sh&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make it executable&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-chmod 755 /usr/local/bin/rmflowdata.sh&#34; data-lang=&#34;chmod 755 /usr/local/bin/rmflowdata.sh&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are probably more elegant ways to do it but this works just fine, is lightweight and can be run manually if needed. There are a lot of great use cases for this.  If you&amp;rsquo;re looking for an SDN tie-in, guess what, there is one.  &lt;a href=&#34;http://blog.sflow.com/2010/05/configuring-open-vswitch.html&#34;&gt;OpenVSwitch supports sflow export&lt;/a&gt; and low-and-behold, nfsen and nfdump can easily consume and display sflow data. Want flow statistics on your all VM, OVS based SDN lab?  Guess what, you can! There are some other great things you can do with flow data, too, specifically sflow.  It&amp;rsquo;s not just for network statistics, there is a host &lt;a href=&#34;http://host-sflow.sourceforge.net/&#34;&gt;based sflow implementation&lt;/a&gt; that track any number of interesting metrics.  &lt;a href=&#34;http://blog.sflow.com/&#34;&gt;blog.sflow.com&lt;/a&gt; is a great resource for all things sflow (also, it does IPv6 by default, as it should). Ok, now you have &lt;strong&gt;absolutely&lt;/strong&gt; no good reason not to be collecting flow data.   It&amp;rsquo;s easy, it&amp;rsquo;s useful and almost everything (hosts, routers, virtual switches) supports exporting &lt;strong&gt;&lt;em&gt;some&lt;/em&gt;&lt;/strong&gt; kind of flow information.  You can even generate it from an inline linux box or a box off of an optical tap or a span port running &lt;a href=&#34;https://code.google.com/p/softflowd/&#34;&gt;softflowd&lt;/a&gt; or &lt;a href=&#34;http://www.ntop.org/products/nprobe/&#34;&gt;nprobe&lt;/a&gt;.   Both of which I can confirm work wonderfully (the above collector is gathering flows from softflowd running on my &lt;a href=&#34;http://www.forwardingplane.net/2013/07/building-a-secured-network-in-a-box/&#34; title=&#34;Building a secured network in a box&#34;&gt;security onion box&lt;/a&gt; as well as exported flows from pfflowd on a &lt;a href=&#34;http://www.pfsense.org/&#34;&gt;pfsense&lt;/a&gt; router).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing the dreaded &#34;error: could not open configuration database (juniper.data&#43;)&#34; problem.</title>
      <link>https://forwardingplane.net/post/fixing-the-dreaded-error-could-not-open-configuration-database-juniper-data-problem/</link>
      <pubDate>Wed, 07 Aug 2013 16:52:04 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/fixing-the-dreaded-error-could-not-open-configuration-database-juniper-data-problem/</guid>
      <description>&lt;p&gt;Working on some MX series routers recently I encountered a problem I&amp;rsquo;d never seen before, essentially preventing the configuration from being committed:```
buraglio@rtr# commit check
re0:
error: could not open configuration database (juniper.data+)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-This is a very annoying problem and is terribly inconvenient as you can probably imagine. So, my first instinct is to drop down to the shell and starting hacking at it UNIX style.```&#34; data-lang=&#34;This is a very annoying problem and is terribly inconvenient as you can probably imagine. So, my first instinct is to drop down to the shell and starting hacking at it UNIX style.```&#34;&gt;buraglio@rtr&amp;gt;start shell&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there I wanted to see the file system and check out the stats of what it thinks we have.```
buraglio@rtr% df -h
Filesystem     Size    Used   Avail Capacity  Mounted on
/dev/ad0s1a    3.5G    313M    2.9G    10%    /
devfs          1.0K    1.0K      0B   100%    /dev
/dev/md0        63M     63M      0B   100%    /packages/mnt/jbase
/dev/md1        53M     53M      0B   100%    /packages/mnt/jkernel64-12.3R3.4
buraglio@rtr%    82M     82M      0B   100%    /packages/mnt/jpfe-X960-12.3R3.4
/dev/md3       5.0M    5.0M      0B   100%    /packages/mnt/jdocs-12.3R3.4
buraglio@rtr%   104M    104M      0B   100%    /packages/mnt/jroute-12.3R3.4
buraglio@rtr% clearM     28M      0B   100%    /packages/mnt/jcrypto64-12.3R3.4
/dev/md6        38M     38M      0B   100%    /packages/mnt/jpfe-common-12.3R3.4
/dev/md7        92K     92K      0B   100%    /packages/mnt/jplatform-12.3R3.4
/dev/md8       422M    422M      0B   100%    /packages/mnt/jruntime-12.3R3.4
/dev/md9       7.9G     16K    7.2G     0%    /tmp
/dev/md10      7.9G     11M    7.2G     0%    /mfs
/dev/ad0s1e    393M     36K    362M     0%    /config
procfs         4.0K    4.0K      0B   100%    /proc
/dev/ad1s1f     18G    4.2G     12G    26%    /var&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-... and check the mounted partitions.```&#34; data-lang=&#34;... and check the mounted partitions.```&#34;&gt;buraglio@rtr% mount
/dev/ad0s1a on / (ufs, local, noatime)
devfs on /dev (devfs, local, multilabel)
/dev/md0 on /packages/mnt/jbase (cd9660, local, noatime, read-only, verified)
/dev/md1 on /packages/mnt/jkernel64-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md2 on /packages/mnt/jpfe-X960-12.3R3.4 (cd9660, local, noatime, read-only)
/dev/md3 on /packages/mnt/jdocs-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md4 on /packages/mnt/jroute-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md5 on /packages/mnt/jcrypto64-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md6 on /packages/mnt/jpfe-common-12.3R3.4 (cd9660, local, noatime, read-only)
/dev/md7 on /packages/mnt/jplatform-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md8 on /packages/mnt/jruntime-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md9 on /tmp (ufs, asynchronous, local, noatime)
/dev/md10 on /mfs (ufs, asynchronous, local, noatime)
/dev/ad0s1e on /config (ufs, local, noatime)
procfs on /proc (procfs, local, noatime)
/dev/ad1s1f on /var (ufs, local, noatime)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I ran a fsck to get some stats and see what the problem could be since it appears that there is no free space even though the router reports that it has it.```
buraglio@rtr% fsck -y -f /dev/ad1s1f
** /dev/ad1s1f (NO WRITE)
** Last Mounted on /var
** Phase 1 - Check Blocks and Sizes
** Phase 2 - Check Pathnames
** Phase 3 - Check Connectivity
** Phase 4 - Check Reference Counts
** Phase 5 - Check Cyl groups
FREE BLK COUNT(S) WRONG IN SUPERBLK
SALVAGE? no&lt;/p&gt;

&lt;p&gt;605 files, 2202492 used, 7040218 free (786 frags, 879929 blocks, 0.0% fragmentation)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Playing around in the shell presented this error as well```&#34; data-lang=&#34;Playing around in the shell presented this error as well```&#34;&gt;/var: create/symlink failed, no inodes free&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, it appears as if the /var partition is the issue. On my router /var is mounted as /dev/ad1s1f, so lets unmount this partition and try to fix it. In my experience Juniper will shy away from telling you to do anything in the shell, so do this at your own risk. Rebooting the router would also fix this issue, but I&amp;rsquo;m a form believer that rebooting networking equipment to fix issues is a lazy way to fix problems and will only serve to atrophy any troubleshooting skills you may have.```&lt;/p&gt;

&lt;p&gt;buraglio@rtr% umount -f /var&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Now run fsck again to repair the file system```&#34; data-lang=&#34;Now run fsck again to repair the file system```&#34;&gt;buraglio@rtr% fsck -y -f /dev/ad1s1f
\*\* /dev/ad1s1f
\*\* Last Mounted on /var
\*\* Phase 1 - Check Blocks and Sizes
\*\* Phase 2 - Check Pathnames
\*\* Phase 3 - Check Connectivity
\*\* Phase 4 - Check Reference Counts
\*\* Phase 5 - Check Cyl groups
FREE BLK COUNT(S) WRONG IN SUPERBLK
SALVAGE? yes

605 files, 2203376 used, 7039334 free (782 frags, 879819 blocks, 0.0% fragmentation)

\*\*\*\*\* FILE SYSTEM WAS MODIFIED \*\*\*\*\*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that the problematic bits have been repaired, we re-mount the partition```
buraglio@rtr% mount /dev/ad1s1f /var/&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Verify the mount```&#34; data-lang=&#34;Verify the mount```&#34;&gt;buraglio@rtr% mount
/dev/ad0s1a on / (ufs, local, noatime)
devfs on /dev (devfs, local, multilabel)
/dev/md0 on /packages/mnt/jbase (cd9660, local, noatime, read-only, verified)
/dev/md1 on /packages/mnt/jkernel64-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md2 on /packages/mnt/jpfe-X960-12.3R3.4 (cd9660, local, noatime, read-only)
/dev/md3 on /packages/mnt/jdocs-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md4 on /packages/mnt/jroute-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md5 on /packages/mnt/jcrypto64-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md6 on /packages/mnt/jpfe-common-12.3R3.4 (cd9660, local, noatime, read-only)
/dev/md7 on /packages/mnt/jplatform-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md8 on /packages/mnt/jruntime-12.3R3.4 (cd9660, local, noatime, read-only, verified)
/dev/md9 on /tmp (ufs, asynchronous, local, noatime)
/dev/md10 on /mfs (ufs, asynchronous, local, noatime)
/dev/ad0s1e on /config (ufs, local, noatime)
procfs on /proc (procfs, local, noatime)
/dev/ad1s1f on /var (ufs, local, noatime)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We should now be able to commit correctly.```
buraglio@rtr% cli
{master}
buraglio@rtr&amp;gt;&lt;/p&gt;

&lt;p&gt;{master}
buraglio@rtr&amp;gt; edit
Entering configuration mode
The configuration has been changed but not committed&lt;/p&gt;

&lt;p&gt;{master}[edit]
buraglio@rtr# commit check
re0:
configuration check succeeds
re1:
configuration check succeeds&lt;/p&gt;

&lt;p&gt;{master}[edit]
buraglio@rtr# commit
re0:
configuration check succeeds
re1:
commit complete
re0:
commit complete&lt;/p&gt;

&lt;p&gt;{master}[edit]
buraglio@rtr#
```And&amp;hellip;.you&amp;rsquo;re done. Hopefully this will help someone fight this problem, I only found a &lt;a href=&#34;http://www.gns3.net/labs/juniper/jncia-junos/operational-monitoring-and-maintenance/&#34;&gt;handful&lt;/a&gt; of &lt;a href=&#34;http://forums.juniper.net/t5/Junos-and-Junosphere/Commit-Errors/td-p/17615&#34;&gt;other references&lt;/a&gt; to it that was useful but it didn&amp;rsquo;t address my exact scenario.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a secured network in a box</title>
      <link>https://forwardingplane.net/post/building-a-secured-network-in-a-box/</link>
      <pubDate>Fri, 26 Jul 2013 05:28:15 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-a-secured-network-in-a-box/</guid>
      <description>&lt;p&gt;In many environments, the move to virtualization is a path well traveled.  My home and lab networks are no exception to this and I&amp;rsquo;m sure nearly everyone who reads these pages has at least been exposed to it in one way or another.  I have played with nearly all of the virtualization platforms and am firmly in the camp that there will be a large segment of networking that will move to a virtualized platform especially in the data center and campus segments.  Virtualization of routing tables has existed for a long time, see &lt;a href=&#34;http://en.wikipedia.org/wiki/Virtual_Routing_and_Forwarding&#34;&gt;VRF-Lite  and MPLS VRF&lt;/a&gt; as well as multi-tenancy technologies like Junipers logical systems so the concept, at some level, has existed in networking for quite some time. &amp;ldquo;How is a small to medium sized environment going to take advantage of this and more interestingly, how can it be secured?&amp;rdquo; &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/Red_onions.jpg&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/Red_onions-1024x763.jpg&#34; alt=&#34;Red_onions&#34; /&gt;&lt;/a&gt;This is a question I inadvertently found at least one answer to when building out my own network and testing a great little project called &lt;a href=&#34;http://securityonion.blogspot.com/&#34;&gt;security onion&lt;/a&gt;.  I&amp;rsquo;d seen and used this platform a bit in the past, but it had been at least a version ago and my exposure was pretty short. The problem now, though, was that everything I have in use other than a gigabit switch and a NAS is virtualized.  My firewall, my router, all of my dev and test boxes and all but one of my non-portable machines.  All VMs.  I&amp;rsquo;d gone back and forth between VMware and KVM, and while I like KVM better, management of edge case or non-standard networking stuff wasn&amp;rsquo;t as well documented and &lt;a href=&#34;http://openvswitch.org/&#34;&gt;OVS&lt;/a&gt; either wasn&amp;rsquo;t in the build of CentOS I was using or I didn&amp;rsquo;t know about its inclusion yet, so I settled on VMware ESXi 5 for this particular box.  I needed to be able to span a port on a vswitch.  My hopes were not high, but I figured there may be an unsupported way. Interestingly enough, the VMWare operating system has a mechanism for makeshift &amp;ldquo;spanning&amp;rdquo; a port.  More correctly, it has a way to see &amp;ldquo;all vlans&amp;rdquo; on a given vswitch, and it&amp;rsquo;s quite simple.  Essentially, you have to create a port group on vlan 4095 on the vswitch then set that port group to promiscuous mode. Add the vm NIC that you are going to use to monitor traffic to that port group.  &lt;a href=&#34;http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;amp;cmd=displayKC&amp;amp;externalId=1004099&#34;&gt;From VMware site&lt;/a&gt;: &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-site.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-site.png&#34; alt=&#34;VMWare-site&#34; /&gt;&lt;/a&gt; I was pleasanty surprised at how easy it was and was at the point of telling security onion to have interfaces on both of the vswitches in less than 15 minutes. Configuration, Networking, Properties, Security. VLAN 4095. Done.Here are a few screenshots of my VMware config following the steps laid out above. It&amp;rsquo;s far more simple than I could have imagined.   &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWAre-config-networking.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWAre-config-networking.png&#34; alt=&#34;VMWAre-config-networking&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-SPAN-WAN1.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-SPAN-WAN1.png&#34; alt=&#34;VMWare-SPAN-WAN1&#34; /&gt;&lt;/a&gt;           &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWARE-Span-WAN2.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWARE-Span-WAN2.png&#34; alt=&#34;VMWARE-Span-WAN2&#34; /&gt;&lt;/a&gt;             At this point Security onion was able to see what was going on.  In my case I allowed for visibility on both sides of my routing firewall, so there was a decent amount of data.     This is the interesting part, I think.  My initial thoughts are that this could be a &amp;ldquo;network in a box&amp;rdquo; for small offices.  No router, no servers (other than the VMware host), essentially a fully functional &amp;ldquo;enterprise&amp;rdquo; network of hosts, including a very high quality IDS device in a single device.  Put whatever firewall / vrouter in there that is supported or familiar, &lt;a href=&#34;http://www.pfsense.org&#34;&gt;pfsense&lt;/a&gt;, &lt;a href=&#34;http://www.juniper.net&#34;&gt;Juniper vSRX&lt;/a&gt;, &lt;a href=&#34;http://www.fortinet.com&#34;&gt;fortinet&lt;/a&gt;, &lt;a href=&#34;http://www.paloaltonetworks.com&#34;&gt;Palo Alto&lt;/a&gt;, they all have virtual devices and they all do a fine job [with the exception of IPv6; the only one I could get DHCPv6-PD to work with was pfsense.  Still need to test the fortinet]. Here is a high level diagram of how mine is put together. &lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-SPAN.jpg&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/07/VMWare-SPAN.jpg&#34; alt=&#34;VMWare SPAN&#34; /&gt;&lt;/a&gt; Is this a viable option?  I have no idea, but it does work pretty darned well.  In fact, ironically enough, the day I got this working (July 13, 2013), a post went up over at &lt;a href=&#34;http://www.geekempire.com/2013/07/virtual-security-onion-via-ubuntu-kvm.html&#34;&gt;GeekEmpire&lt;/a&gt; doing almost exactly the same thing with KVM and OVS.  The setup is shockingly similar, right down to using pfSense. I was actually a bit envious, not only because his post went up first, but because he did what I had actually wanted to do by using KVM and OVS.  It&amp;rsquo;s well done, I recommend reading it. I think this is a sign of what will come.  &amp;ldquo;network in a box&amp;rdquo; is an intriguing concept, and I&amp;rsquo;m absolutely &lt;a href=&#34;https://www.google.com/search?q=network+in+a+box&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;aq=t&amp;amp;rls=org.mozilla:en-US:official&amp;amp;client=firefox-a&amp;amp;channel=fflb&#34;&gt;positive I am not the only one thinking about it&lt;/a&gt;.  I think, however, that the important part is to see the options available and make sure the masses know that there are many ways to do it.  It is not VMware or nothing, and it&amp;rsquo;s certainly not cisco or the highway.  OpenSource tools like OVS and KVM under a free operating system like Linux can compete at the highest levels and there are documents and how-tos out there.  More importantly, it&amp;rsquo;s not hard.  The same goes for security appliances and even vrouters.  Security Onion and pfSense are both viable platforms and they&amp;rsquo;re just the tip of the iceberg.  At the end of the day it all comes down to options. Opensource, commercial, they all have virtualization strategies and the more you know the better off you&amp;rsquo;ll be in the long run because virt is here to stay.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building FlowVisor on Centos 6 - quick and dirty</title>
      <link>https://forwardingplane.net/post/building-flowvisor-on-centos-6-quick-and-dirty/</link>
      <pubDate>Fri, 05 Jul 2013 10:22:23 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/building-flowvisor-on-centos-6-quick-and-dirty/</guid>
      <description>&lt;p&gt;I had the need to build a FlowVisor instance under CentOS.  Since nearly all of the docs I could find were for debian, I threw this together.  I utilized this &lt;a href=&#34;http://groups.geni.net/geni/wiki/FlowVisor&#34;&gt;GENI doc&lt;/a&gt; and the &lt;a href=&#34;https://github.com/OPENNETWORKINGLAB/flowvisor/wiki/Installation-from-Source&#34;&gt;github docs&lt;/a&gt; as a simple reference.  This is the quick and dirty method I used: Install the prerequisites:```
sudo yum -y install ant eclipse java-1.6.0-openjdk.x86_64 git
sudo yum -y groupinstall &amp;ldquo;Development Tools&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Create my standard directories:```&#34; data-lang=&#34;Create my standard directories:```&#34;&gt;mkdir /services
cd /services
git clone git://github.com/OPENNETWORKINGLAB/flowvisor.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Navigate, add user and install```
cd flowvisor
adduser flowvisor
sudo make fvuser=flowvisor fvgroup=flowvisor install&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Here is the relativde output I saw:```&#34; data-lang=&#34;Here is the relativde output I saw:```&#34;&gt;\[root@collector flowvisor\]# sudo make fvuser=flowvisor fvgroup=flowvisor install
ant
Buildfile: build.xml

init:
\[mkdir\] Created dir: /services/flowvisor/build
\[mkdir\] Created dir: /services/flowvisor/build.tests

compile:
\[javac\] Compiling 239 source files to /services/flowvisor/build
\[javac\] Note: /services/flowvisor/src/org/flowvisor/config/LoadConfig.java uses or overrides a deprecated API.
\[javac\] Note: Recompile with -Xlint:deprecation for details.

dist:
\[mkdir\] Created dir: /services/flowvisor/dist
\[jar\] Building jar: /services/flowvisor/dist/flowvisor.jar
\[jar\] Building jar: /services/flowvisor/dist/flowvisor.jar

BUILD SUCCESSFUL
Total time: 3 seconds
./scripts/install-script.sh
Using source dir: ./scripts/..
Installation prefix (/usr/local):
Install to different root directory ()
Installing FlowVisor into /usr/local with prefix=/usr/local as user/group flowvisor:flowvisor
Updating fvctl-xml.sh to fvctl-xml
Updating fvconfig.sh to fvconfig
Updating flowvisor.sh to flowvisor
Updating envs.sh to envs
Creating directories
Creating /usr/local/bin
Creating /usr/local/sbin
Creating /usr/local/libexec/flowvisor
Creating /usr/local/share/man/man1
Creating /usr/local/share/man/man8
Creating /usr/local/share/doc/flowvisor
Creating /usr/local/share/db/flowvisor
Creating /etc/flowvisor (owned by user=flowvisor  group=flowvisor)
Installing scripts
Installing SYSV startup script (not enabled by default)
Installing jars
Installing flowvisor.jar
Installing manpages
Installing FlowVisorDB
Installing configs
Installing Logrotate config
Installing documentation
Linking fvctl to fvctl-json
ln: creating symbolic link \`fvctl&amp;#39;: File exists
Generating a default config FlowVisor config
Trying to generate SSL Server Key with passwd from scripts/envs.sh
Generating cert with common name == flowvisor
keytool error: java.lang.Exception: Key pair not generated, alias &amp;lt;mykey&amp;gt; already exists
Enter password for account &amp;#39;fvadmin&amp;#39; on the flowvisor:
Generating default config in db
Outputing config file /etc/flowvisor/config.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Start the controller:```
sudo /etc/init.d/flowvisor start&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Output from controller starting:```&#34; data-lang=&#34;Output from controller starting:```&#34;&gt;Starting flowvisor with the configuration stored in DB
If DB unpopulated, load config using &amp;#39;fvconfig load config.json&amp;#39;
\[root@collector flowvisor\]#
Message from syslogd@collector at Jul  3 08:49:51 ...
1&amp;gt;Jul  3 08:49:51 flowvisor: ERROR none : log level enabled: CRIT

Message from syslogd@collector at Jul  3 08:49:51 ...
1&amp;gt;Jul  3 08:49:51 flowvisor: ERROR none : log level enabled: ALERT

Message from syslogd@collector at Jul  3 08:49:51 ...
1&amp;gt;Jul  3 08:49:51 flowvisor: WARN none : log level enabled: WARN
``````
This yields a &amp;#34;working&amp;#34; flow visor.

Lock it down with a password:
``````
yum -y install pwgen
test -f /etc/flowvisor.passwd || sudo sh -c &amp;#39;pwgen -sB 24 &amp;gt; /etc/flowvisor.passwd&amp;#39;
service flowvisor restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Broadcast input with iTerm</title>
      <link>https://forwardingplane.net/post/broadcast-input-with-iterm/</link>
      <pubDate>Sat, 22 Jun 2013 15:56:12 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/broadcast-input-with-iterm/</guid>
      <description>&lt;p&gt;As much as I like to think I automate everything, I&amp;rsquo;m pretty bad at writing code to make my life easier since it tends to take me longer to write the code and it tends to make be a bit grumpy (this is eomthing I&amp;rsquo;m fixing by learning as much code dev as I can during my limited spare time).  However, I like to think I can be fairly smart about working around my limited programming skills (think boba fett rather than jedi) by using the tools available to common folk.  Enter &lt;a href=&#34;http://www.iterm2.com/#/section/home&#34;&gt;iTerm2&lt;/a&gt;. Last I looked at this is was buggy and unstable. &amp;hellip;.that was years and years ago. This has changed.  &lt;a href=&#34;http://www.iterm2.com/#/section/home&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/06/iTerm.png&#34; alt=&#34;iTerm&#34; /&gt;&lt;/a&gt; iTerm has been vastly improved.   In fact, after someone suggested I look at it again, it took all of about 10 minutes for me to go all in as mt primary terminal.  The list of features is good, split pane, tabs and a wealth of customization options.  One of the big weinners for me, though, goes back to my original statement.   Being able to do broadcast input across panes, tabs or windows is fantastically useful.  If you manage systems, need to look at statistics at the same time on routers or switches or just want to do some quick and dirty &amp;ldquo;automation&amp;rdquo;, this is the ticket. I like it so much I did a quick screencast on how to do basic broadcast input.  It&amp;rsquo;s really straightforward.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MPLS PseudoWire (VLL) between JunOS and Brocade MLX/XMR</title>
      <link>https://forwardingplane.net/post/mpls-pseudowire-vll-between-junos-and-brocade-mlxxmr/</link>
      <pubDate>Sun, 19 May 2013 16:24:03 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/mpls-pseudowire-vll-between-junos-and-brocade-mlxxmr/</guid>
      <description>&lt;p&gt;I love to be the &amp;ldquo;uncola&amp;rdquo; of networking sites.  I like interop and I don&amp;rsquo;t do a lot with Cisco because I don&amp;rsquo;t have access to much of their gear anymore.  So, that being the case, I had a need to bring up a l2circuit (in JunOS speak), or VLL (in Brocade speak) between an MX480 and an MLX.  Since they are very different platforms, I had to do some digging and playing around to get it to work. You should have a rudimentary understanding of MPLS (which is about what I have) to do this. l2circuit / pseudowire / vll are all synonymous for the scope of this post. JunOS:```
set protocols l2circuit neighbor interface virtual-circuit-id
set protocols l2circuit neighbor interface encapsulation-type ethernet&lt;/p&gt;

&lt;p&gt;set interfaces xe-3/3/0 description
set interfaces xe-3/3/0 vlan-tagging
set interfaces xe-3/3/0 encapsulation flexible-ethernet-services
set interfaces xe-3/3/0 unit encapsulation vlan-ccc
set interfaces xe-3/3/0 unit vlan-id&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Brocade:```&#34; data-lang=&#34;Brocade:```&#34;&gt;MLX1#show mpls config
router mpls
policy
no propagate-ttl

mpls-interface e1/1
ldp-enable

mpls-interface e1/4
ldp-enable

vll TEST-ICCN-VLL-1 raw-mode
vll-peer
vlan
tagged e 5/2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some commands I found helpful for debugging while testing this out: JunOS: Useful for debugging connections that won&amp;rsquo;t come up:```
set protocols l2circuit traceoptions file l2-VLL
set protocols l2circuit traceoptions file size 20240
set protocols l2circuit traceoptions flag all
show log l2-VLL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Brocade:```&#34; data-lang=&#34;Brocade:```&#34;&gt;logging console
terminal monitor
debug mpls all
debug mpls ldp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show commands that are very useful: JunOS: check end to end l2circuit / VLL connectivity```
ping mpls l2circuit interface  detail&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Show detail of l2circuit / pseudowire / vll show interfaces extensive # or detail Brocade:```&#34; data-lang=&#34;Show detail of l2circuit / pseudowire / vll show interfaces extensive # or detail Brocade:```&#34;&gt;show VLL detail &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Scripting the build of OpenDayight Controller under CentOS</title>
      <link>https://forwardingplane.net/post/scripting-the-build-of-opendayight-controller-under-centos/</link>
      <pubDate>Fri, 03 May 2013 21:45:41 +0000</pubDate>
      
      <guid>https://forwardingplane.net/post/scripting-the-build-of-opendayight-controller-under-centos/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://twitter.com/blinken_lichten&#34;&gt;Jon Langemak&lt;/a&gt; has a great write up on &lt;a href=&#34;http://www.dasblinkenlichten.com/installing-opendaylight-on-centos/&#34;&gt;building the OpenDaylight controller under CentOS&lt;/a&gt;. Since I&amp;rsquo;ll have to do this a bunch of times, I though tI&amp;rsquo;d take what he so generously put online and build a very rudimentary script for deploying ODC under CentOS. The prerequisites are that you already have an account and ssh key at the &lt;a href=&#34;https://git.opendaylight.org/&#34;&gt;OpenDaylight GIT repo&lt;/a&gt; and that you &lt;a href=&#34;http://www.revsys.com/writings/quicktips/turn-off-selinux.html&#34;&gt;disable SELinux&lt;/a&gt;. Here is the script:```
#!/bin/bash&lt;/p&gt;

&lt;h1 id=&#34;install-opendaylight-controller-under-centos&#34;&gt;Install Opendaylight controller under CentOS&lt;/h1&gt;

&lt;h1 id=&#34;by-nick-at-buraglio-com-http-www-twitter-com-buraglio&#34;&gt;by nick [at] buraglio.com &lt;a href=&#34;http://www.twitter.com/buraglio&#34;&gt;http://www.twitter.com/buraglio&lt;/a&gt;&lt;/h1&gt;

&lt;h1 id=&#34;http-www-forwardingplane-net&#34;&gt;&lt;a href=&#34;http://www.forwardingplane.net&#34;&gt;http://www.forwardingplane.net&lt;/a&gt;&lt;/h1&gt;

&lt;h1 id=&#34;based-on-post-by-jon-langemak-http-www-twitter-com-blinken-lichten&#34;&gt;Based on post by Jon Langemak (&lt;a href=&#34;http://www.twitter.com/blinken_lichten&#34;&gt;http://www.twitter.com/blinken_lichten&lt;/a&gt;)&lt;/h1&gt;

&lt;h1 id=&#34;http-www-dasblinkenlichten-com-installing-opendaylight-on-centos&#34;&gt;&lt;a href=&#34;http://www.dasblinkenlichten.com/installing-opendaylight-on-centos/&#34;&gt;http://www.dasblinkenlichten.com/installing-opendaylight-on-centos/&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;yum=&amp;ldquo;/usr/bin/yum&amp;rdquo;
servivce=&amp;ldquo;/sbin/service&amp;rdquo;
chkconfig=&amp;ldquo;/sbin/chkconfig&amp;rdquo;&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Disable SELINUX before starting this process&amp;rdquo;
echo &amp;ldquo;Edit the /etc/selinux/config file and restart the server&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Change the username in the GIT section to your own&amp;rdquo;
echo &amp;ldquo;you&amp;rsquo;ll need to create it and upload&amp;rdquo;
echo &amp;ldquo;your ssh key at git.opendaylight.org&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;************************&amp;ldquo;&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Installing Development tools and other deps&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
yum install -y wget vim java ant python eclipse-platform git
yum groupinstall -y “Development tools”A&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Downloading and installing maven&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
wget &lt;a href=&#34;http://www.poolsaboveground.com/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.zip&#34;&gt;http://www.poolsaboveground.com/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.zip&lt;/a&gt;
unzip apache-maven-3.0.5-bin.zip -d /usr/share/
ln -s /usr/share/apache-maven-3.0.5/bin/mvn /usr/bin/mvn&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Downloading GIT code&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;&lt;/p&gt;

&lt;h1 id=&#34;change-the-username-here-to-your-own-you-ll-need-to-create-it-and-upload&#34;&gt;Change the username here to your own, you&amp;rsquo;ll need to create it and upload&lt;/h1&gt;

&lt;h1 id=&#34;your-ssh-key-at-git-opendaylight-org&#34;&gt;your ssh key at git.opendaylight.org&lt;/h1&gt;

&lt;p&gt;mkdir -p /services/opendaylight/
cd /services/opendaylight/
git clone &lt;a href=&#34;https://buraglio@git.opendaylight.org/gerrit/p/controller.git&#34;&gt;https://buraglio@git.opendaylight.org/gerrit/p/controller.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Building OpenDaylight Controller with Maven&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
cd controller/opendaylight/distribution/opendaylight/
mvn clean install&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Configure Java Env variables&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
export JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk.x86_64
echo &amp;ldquo;JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk.x86_64&amp;rdquo; &amp;gt;&amp;gt; /etc/environment&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Load the controller&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
cd /services/opendaylight/controller/opendaylight/distribution/opendaylight/target/distribution.opendaylight-0.1.0-SNAPSHOT-osgipackage/opendaylight&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;************************&amp;ldquo;
echo &amp;ldquo;Start OpenDaylight OF controller&amp;rdquo;
echo &amp;ldquo;************************&amp;ldquo;
./run.sh&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Once up and running, it&#39;s pretty trivial to point something like an HP switch at the controller. For an HP5400, just decide what VLAN(s) you want to use OpenFlow on. I chose 999 as my test VLAN.```&#34; data-lang=&#34;Once up and running, it&#39;s pretty trivial to point something like an HP switch at the controller. For an HP5400, just decide what VLAN(s) you want to use OpenFlow on. I chose 999 as my test VLAN.```&#34;&gt;sw-5400-of# conf t
sw-5400-of(config)# vlan 999 name test-openflow999
sw-5400-of(vlan-999)# untagged A3-A4 
sw-5400-of(vlan-999)# exit
sw-5400-of(config)# openflow vlan 999
sw-5400-of(openFlow vlan-999)# enable
sw-5400-of(openFlow vlan-999)# controller &amp;#34;tcp:10.17.4.22:6633&amp;#34;
sw-5400-of(openFlow vlan-999)# exit       
sw-5400-of(openFlow)# exit
sw-5400-of(config)# 
w-5400-of(config)# exit
sw-5400-of# show openflow 

sw-5400-of# show openflow 

 Openflow Configuration

  Openflow aggregate VLANs \[Disabled\] :           
  Openflow aggregate management VlanId \[0\] : 0     
  Openflow second aggregate management VlanId \[0\] : 0     
  Openflow aggregate configuration VlanId \[0\] : 0     

  VID  State HW  Active controller Pseudo-URL                       Conn
  ---- ----- --- -------------------------------------------------- ----
  666  Off   On                                                     No  
  999  On    On  tcp:10.17.4.22:6633                                Yes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From here we can see the box in the openflow controller.    &lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/05/Screen-Shot-2013-05-03-at-4.20.03-PM.png&#34;&gt;&lt;img src=&#34;http://www.forwardingplane.net/wp-content/uploads/2013/05/Screen-Shot-2013-05-03-at-4.20.03-PM.png&#34; alt=&#34;Screen Shot 2013-05-03 at 4.20.03 PM&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  I&amp;rsquo;m still having some issues pushing flows, I&amp;rsquo;m sure I can work it out but here is a quick screencast of me trying to push a flow.  More posts will be added as soon as I can get the flows to push correctly. I suspect it is user error and I just need to read the docs.  More to come for sure.  This controller is very, very slick.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
